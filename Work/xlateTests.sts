
"Translated from file D:/SmallScript/ProtoScheme/xlateTests.scm"

include path: ProtoScheme.sts.
[

/* (define a 3) */

 SchemeAccess.Scheme define:  #'a'
  as:  3.

/* (define b (+ a 5)) */

 SchemeAccess.Scheme define:  #'b'
  as: ((SchemeAccess.Scheme globalRef:  #'+')
            value: ( (SchemeAccess.Scheme globalRef:  #'a')
           ) value: ( 5)).

/* (define (f x) 3) */

 SchemeAccess.Scheme define:  #'f'
  as: 
       [ :x |  3.].

/* (define (g x) (+ x 1)) */

 SchemeAccess.Scheme define:  #'g'
  as: 
       [ :x | ((SchemeAccess.Scheme globalRef:  #'+')
                value: ( x) value: ( 1)).].

/* (define (h x y) (* x (+ y b))) */

 SchemeAccess.Scheme define:  #'h'
  as: 
       [ :x :y | ((SchemeAccess.Scheme globalRef:  #'*')
                value: ( x) value: (((SchemeAccess.Scheme globalRef:  #'+')
                value: ( y) value: ( (SchemeAccess.Scheme globalRef:  #'b')
               )))).].

/* (display "(h 2 3) is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( '(h 2 3) is ')).

/* (display (h 2 3)) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: (((SchemeAccess.Scheme globalRef:  #'h')
      value: ( 2) value: ( 3)))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (let ((a 1) (b 2)) (display "(let ((a 1)(b 2))(+ a b)) is ") (display (+ a b))) */
 [ :a :b | 
      [
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( '(let ((a 1)(b 2))(+ a b)) is ')).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: (((SchemeAccess.Scheme globalRef:  #'+')
            value: ( a) value: ( b)))).
      ] value..
 ]( 1 , 2).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (let loop ((n 5) (a 1)) (display "n a = ") (display n) (display " ") (display a) (newline) (if (< n 2) (display a) (loop (- n 1) (* n a)))) */

  [ | loop | := 
     [ :n :a | 
      [
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( 'n a = ')).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( n)).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( ' ')).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( a)).
       ((SchemeAccess.Scheme globalRef:  #'newline')
            value).
        (if (((SchemeAccess.Scheme globalRef:  #'<')
                value: ( n) value: ( 2)))
            then [((SchemeAccess.Scheme globalRef:  #'display')
                value: ( a))]
            else [(loop value: (((SchemeAccess.Scheme globalRef:  #'-')
                value: ( n) value: ( 1))) value: (((SchemeAccess.Scheme globalRef:  #'*')
                value: ( n) value: ( a))))]).
      ] value.
 ].
 loop valueWithArguments: {
      5. 
      1. } ] value.

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (define (fact n) (let loop ((n n) (a 1)) (if (< n 2) a (loop (- n 1) (* n a))))) */

 SchemeAccess.Scheme define:  #'fact'
  as: 
       [ :n | 
            [ | loop | := 
               [ :n :a | 
                (if (((SchemeAccess.Scheme globalRef:  #'<')
                        value: ( n) value: ( 2)))
                    then [ a]
                    else [(loop value: (((SchemeAccess.Scheme globalRef:  #'-')
                        value: ( n) value: ( 1))) value: (((SchemeAccess.Scheme globalRef:  #'*')
                        value: ( n) value: ( a))))])
           ].
           loop valueWithArguments: {
                n. 
                1. } ] value.].

/* (display "fact 50 is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'fact 50 is ')).

/* (display (fact 50)) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: (((SchemeAccess.Scheme globalRef:  #'fact')
      value: ( 50)))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "a is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'a is ')).

/* (display a) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( (SchemeAccess.Scheme globalRef:  #'a')
     )).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "b is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'b is ')).

/* (display b) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( (SchemeAccess.Scheme globalRef:  #'b')
     )).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (let* ((a b) (b (+ a 1))) (display "(let* ((a b)(b (+ a 1)))(+ a b)) is ") (display (+ a b))) */

 [ :a | 
   [ :b | 
      [
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( '(let* ((a b)(b (+ a 1)))(+ a b)) is ')).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: (((SchemeAccess.Scheme globalRef:  #'+')
            value: ( a) value: ( b)))).
      ] value.
   ](((SchemeAccess.Scheme globalRef:  #'+')
        value: ( a) value: ( 1)))
 ]( (SchemeAccess.Scheme globalRef:  #'b')
     ).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1))))) (odd (lambda (n) (if (= n 0) #f (even (- n 1)))))) (display "(even 7) is ") (display (even 7)) (newline) (display "(odd 17) is ") (display (odd 17))) */

  [ :even :odd | 
   even := (
   [ :n |  (if (((SchemeAccess.Scheme globalRef:  #'=')
                value: ( n) value: ( 0)))
            then [ true]
            else [(odd value: (((SchemeAccess.Scheme globalRef:  #'-')
                value: ( n) value: ( 1))))]).]).
   odd := (
   [ :n |  (if (((SchemeAccess.Scheme globalRef:  #'=')
                value: ( n) value: ( 0)))
            then [ false]
            else [(even value: (((SchemeAccess.Scheme globalRef:  #'-')
                value: ( n) value: ( 1))))]).]).
      [
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( '(even 7) is ')).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ((even value: ( 7)))).
       ((SchemeAccess.Scheme globalRef:  #'newline')
            value).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( '(odd 17) is ')).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ((odd value: ( 17)))).
      ] value..
 ] value..

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (cond ((eqv? #t #f) (error "true is false?!?")) ((= 1 2) (error "1 is 2 ?!?")) (else (display "cond1-ok"))) */
 (if (((SchemeAccess.Scheme globalRef:  #'eqv?')
          value: ( true) value: ( false)))
      then [((SchemeAccess.Scheme globalRef:  #'error')
          value: ( 'true is false?!?'))]
      else [ (if (((SchemeAccess.Scheme globalRef:  #'=')
              value: ( 1) value: ( 2)))
          then [((SchemeAccess.Scheme globalRef:  #'error')
              value: ( '1 is 2 ?!?'))]
          else [((SchemeAccess.Scheme globalRef:  #'display')
              value: ( 'cond1-ok'))])]).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (cond ((eqv? #t #f) (error "true is false?!?")) ((= 1 2) (error "1 is 2 ?!?")) ((= (fact 5) 120) (display "cond2-ok")) (else (error "cond fell off end"))) */
 (if (((SchemeAccess.Scheme globalRef:  #'eqv?')
          value: ( true) value: ( false)))
      then [((SchemeAccess.Scheme globalRef:  #'error')
          value: ( 'true is false?!?'))]
      else [ (if (((SchemeAccess.Scheme globalRef:  #'=')
              value: ( 1) value: ( 2)))
          then [((SchemeAccess.Scheme globalRef:  #'error')
              value: ( '1 is 2 ?!?'))]
          else [ (if (((SchemeAccess.Scheme globalRef:  #'=')
                  value: (((SchemeAccess.Scheme globalRef:  #'fact')
                  value: ( 5))) value: ( 120)))
              then [((SchemeAccess.Scheme globalRef:  #'display')
                  value: ( 'cond2-ok'))]
              else [((SchemeAccess.Scheme globalRef:  #'error')
                  value: ( 'cond fell off end'))])])]).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "b is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'b is ')).

/* (display b) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( (SchemeAccess.Scheme globalRef:  #'b')
     )).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "(set! b 'sym)") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( '(set! b ''sym)')).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (set! b 'sym) */
(SchemeAccess.Scheme setBang:  #'b' as:  #'sym').

/* (display "b is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'b is ')).

/* (write b) */
((SchemeAccess.Scheme globalRef:  #'write')
      value: ( (SchemeAccess.Scheme globalRef:  #'b')
     )).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "a should be 3, is: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'a should be 3, is: ')).

/* (let ((a 5)) (if (> a 1) (set! a 3)) (display a)) */
 [ :a | 
      [
        (if (((SchemeAccess.Scheme globalRef:  #'>')
                value: ( a) value: ( 1)))
            then [(a :=  3)]).
       ((SchemeAccess.Scheme globalRef:  #'display')
            value: ( a)).
      ] value..
 ]( 5).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (: (current-output-port) << "Hello from" << " Smallscript!") */
 (((SchemeAccess.Scheme globalRef:  #'current-output-port')
      value) << 'Hello from' << ' Smallscript!').

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display (: "Hello again" "asString")) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( ( 'Hello again' asString))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (define (cons a b) (: ($ "Pair") car: a cdr: b)) */

 SchemeAccess.Scheme define:  #'cons'
  as: 
       [ :a :b |  ( Pair car: a cdr: b).].

/* (define (car c) (: c car)) */

 SchemeAccess.Scheme define:  #'car'
  as: 
       [ :c |  ( c car).].

/* (define (cdr c) (: c cdr)) */

 SchemeAccess.Scheme define:  #'cdr'
  as: 
       [ :c |  ( c cdr).].

/* (display "(list #\\c \"str\" () #t 'sym 34 (a b (c) d)) is ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( '(list #\c "str" () #t ''sym 34 (a b (c) d)) is ')).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "      ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( '      ')).

/* (display (list #\c "str" '() #t 'sym 34 '(a b (c) d))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( $c) value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( 'str') value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( nil) value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( true) value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( #'sym') value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( 34) value: (((SchemeAccess.Scheme globalRef:  #'cons')
      value: ( ({ #'a'.  #'b'.  ({ #'c'. } asPair).  #'d'. } asPair)) value: ( nil)))))))))))))))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (define count 0) */

 SchemeAccess.Scheme define:  #'count'
  as:  0.

/* (define p (delay (begin (set! count (+ count 1)) (if (> count x) count (force p))))) */

 SchemeAccess.Scheme define:  #'p'
  as: ((SchemeAccess.Scheme globalRef:  #'make-promise')
            value: (
       [ [
             (SchemeAccess.Scheme setBang:  #'count' as: ((SchemeAccess.Scheme globalRef:  #'+')
                  value: ( (SchemeAccess.Scheme globalRef:  #'count')
                 ) value: ( 1))).
              (if (((SchemeAccess.Scheme globalRef:  #'>')
                      value: ( (SchemeAccess.Scheme globalRef:  #'count')
                     ) value: ( (SchemeAccess.Scheme globalRef:  #'x')
                     )))
                  then [ (SchemeAccess.Scheme globalRef:  #'count')
                     ]
                  else [((SchemeAccess.Scheme globalRef:  #'force')
                      value: ( (SchemeAccess.Scheme globalRef:  #'p')
                     ))]).
            ] value..])).

/* (define x 5) */

 SchemeAccess.Scheme define:  #'x'
  as:  5.

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "should show 6 and 6") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'should show 6 and 6')).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display p) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( (SchemeAccess.Scheme globalRef:  #'p')
     )).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display (force p)) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: (((SchemeAccess.Scheme globalRef:  #'force')
      value: ( (SchemeAccess.Scheme globalRef:  #'p')
     )))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display p) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( (SchemeAccess.Scheme globalRef:  #'p')
     )).

/* (begin (newline) (set! x 10) (display (force p))) */
 [
   ((SchemeAccess.Scheme globalRef:  #'newline')
        value).
   (SchemeAccess.Scheme setBang:  #'x' as:  10).
   ((SchemeAccess.Scheme globalRef:  #'display')
        value: (((SchemeAccess.Scheme globalRef:  #'force')
        value: ( (SchemeAccess.Scheme globalRef:  #'p')
       )))).
  ] value..

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "expected: neither, got: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'expected: neither, got: ')).

/* (display (let ((x 0)) (cond ((< x 0) 'negative) ((> x 0) 'positive) (else 'neither)))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( [ :x | 
      (if (((SchemeAccess.Scheme globalRef:  #'<')
              value: ( x) value: ( 0)))
          then [ #'negative']
          else [ (if (((SchemeAccess.Scheme globalRef:  #'>')
                  value: ( x) value: ( 0)))
              then [ #'positive']
              else [ #'neither'])]).
 ]( 0))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "expected: composit, got: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'expected: composit, got: ')).

/* (display (case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composit))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( [ :key197 | 
      (if (((SchemeAccess.Scheme globalRef:  #'memv')
              value: ( key197) value: ( ({ 2.  3.  5.  7. } asPair))))
          then [ #'prime']
          else [ [ :key198 | 
              (if (((SchemeAccess.Scheme globalRef:  #'memv')
                      value: ( key198) value: ( ({ 1.  4.  6.  8.  9. } asPair))))
                  then [ #'composit']
                  else [ key198]).
         ]( key197)]).
 ](((SchemeAccess.Scheme globalRef:  #'*')
          value: ( 2) value: ( 3))))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "expected: consonant, got: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'expected: consonant, got: ')).

/* (display (case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( [ :key199 | 
      (if (((SchemeAccess.Scheme globalRef:  #'memv')
              value: ( key199) value: ( ({ #'a'.  #'e'.  #'i'.  #'o'.  #'u'. } asPair))))
          then [ #'vowel']
          else [ [ :key200 | 
              (if (((SchemeAccess.Scheme globalRef:  #'memv')
                      value: ( key200) value: ( ({ #'w'.  #'y'. } asPair))))
                  then [ #'semivowel']
                  else [ [
                    key200.
                    #'consonant'.
                  ] value.]).
         ]( key199)]).
 ](((SchemeAccess.Scheme globalRef:  #'car')
          value: ( ({ #'c'.  #'d'. } asPair)))))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "expected: 2, got: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'expected: 2, got: ')).

/* (display (cond ((assv 'b '((a 1) (b 2))) => cadr) (else #f))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( [ :result201 | 
      (if ( result201)
          then [((SchemeAccess.Scheme globalRef:  #'cadr')
              value: ( result201))]
          else [ false]).
 ](((SchemeAccess.Scheme globalRef:  #'assv')
          value: ( #'b') value: ( ({ ({ #'a'.  1. } asPair).  ({ #'b'.  2. } asPair). } asPair)))))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "expected: 25, got: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'expected: 25, got: ')).

/* (display (let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum)))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( [ :x | 
     
      [ | doX2Dloop202 | := 
         [ :x :sum | 
          (if (((SchemeAccess.Scheme globalRef:  #'null?')
                  value: ( x)))
              then [ sum]
              else [(doX2Dloop202 value: (((SchemeAccess.Scheme globalRef:  #'cdr')
                  value: ( x))) value: (((SchemeAccess.Scheme globalRef:  #'+')
                  value: ( sum) value: (((SchemeAccess.Scheme globalRef:  #'car')
                  value: ( x))))))])
     ].
     doX2Dloop202 valueWithArguments: {
          x. 
          0. } ] value.
 ]( ({ 1.  3.  5.  7.  9. } asPair)))).

/* (newline) */
((SchemeAccess.Scheme globalRef:  #'newline')
      value).

/* (display "expected: #(0 1 2 3 4), got: ") */
((SchemeAccess.Scheme globalRef:  #'display')
      value: ( 'expected: #(0 1 2 3 4), got: ')).

/* (display (do ((vec (make-vector 5)) (idx 0 (+ idx 1))) ((= idx 5) vec) (vector-set! vec idx idx))) */
((SchemeAccess.Scheme globalRef:  #'display')
      value: (
  [ | doX2Dloop203 | := 
     [ :vec :idx | 
      (if (((SchemeAccess.Scheme globalRef:  #'=')
              value: ( idx) value: ( 5)))
          then [ vec]
          else [ [
           ((SchemeAccess.Scheme globalRef:  #'vector-set!')
                value: ( vec) value: ( idx) value: ( idx)).
           (doX2Dloop203 value: ( vec) value: (((SchemeAccess.Scheme globalRef:  #'+')
                value: ( idx) value: ( 1)))).
          ] value.])
 ].
 doX2Dloop203 valueWithArguments: {
     ((SchemeAccess.Scheme globalRef:  #'make-vector')
          value: ( 5)). 
      0. } ] value)).

/* #t */
 true.

]
"--- E O F ---"
