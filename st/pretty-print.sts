'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.4Translated from file /usr/local/src/Squeak/ProtoScheme/scm/pretty-print.scm'!!SmallScheme class methodsFor: 'initialization'!initPrettyX2Dprint SmallScheme define:  #'genericX2Dwrite'    "generic-write"  as: (        [ :obj :displayX3F :width :output |             [ | readX2DmacroX3F readX2DmacroX2Dbody readX2DmacroX2Dprefix out wr pp |                         readX2DmacroX3F := (             [ :l |                   [ | length1X3F |                                     length1X3F := (                   [ :l |  (((((SmallScheme globalRef:  #'pairX3F')                                value: ( l))) == false) not)                           	ifTrue: [((SmallScheme globalRef:  #'nullX3F')                                value: (((SmallScheme globalRef:  #'cdr')                                value: ( l))))]                           	ifFalse: [ false]]).                      [ :head :tail |                           [ :key73 |                               (((((SmallScheme globalRef:  #'memv')                                      value: ( key73) value: ( ({ #'quote'.  #'quasiquote'.  #'unquote'.  #'unquoteX2Dsplicing'. } asRest)))) == false) not)                                 	ifTrue: [(length1X3F value: ( tail))]                                 	ifFalse: [ [                                    key73.                                    false.                                  ] value].                         ] valueWithArguments: {( head). }.                     ] valueWithArguments: {(((SmallScheme globalRef:  #'car')                              value: ( l))). (((SmallScheme globalRef:  #'cdr')                              value: ( l))). }.                 ] value]).              readX2DmacroX2Dbody := (             [ :l | ((SmallScheme globalRef:  #'cadr')                      value: ( l))]).              readX2DmacroX2Dprefix := (             [ :l |  [ :head :tail |                       [ :key74 |                           (((((SmallScheme globalRef:  #'memv')                                  value: ( key74) value: ( ({ #'quote'. } asRest)))) == false) not)                             	ifTrue: [ '''']                             	ifFalse: [ [ :key75 |                                   (((((SmallScheme globalRef:  #'memv')                                          value: ( key75) value: ( ({ #'quasiquote'. } asRest)))) == false) not)                                     	ifTrue: [ '``']                                     	ifFalse: [ [ :key76 |                                           (((((SmallScheme globalRef:  #'memv')                                                  value: ( key76) value: ( ({ #'unquote'. } asRest)))) == false) not)                                             	ifTrue: [ ',']                                             	ifFalse: [ [ :key77 |                                                   (((((SmallScheme globalRef:  #'memv')                                                          value: ( key77) value: ( ({ #'unquoteX2Dsplicing'. } asRest)))) == false) not)                                                     	ifTrue: [ ',@']                                                     	ifFalse: [ key77].                                             ] valueWithArguments: {( key76). }].                                     ] valueWithArguments: {( key75). }].                             ] valueWithArguments: {( key74). }].                     ] valueWithArguments: {( head). }.                 ] valueWithArguments: {(((SmallScheme globalRef:  #'car')                          value: ( l))). (((SmallScheme globalRef:  #'cdr')                          value: ( l))). }]).              out := (             [ :str :col |  ((( col) == false) not)                     	ifTrue: [ ((((output value: ( str))) == false) not)                         	ifTrue: [((SmallScheme globalRef:  #'X2B')                              value: ( col) value: (((SmallScheme globalRef:  #'stringX2Dlength')                              value: ( str))))]                         	ifFalse: [ false]]                     	ifFalse: [ false]]).              wr := (             [ :obj :col |                   [ | wrX2Dexpr wrX2Dlst |                                     wrX2Dexpr := (                   [ :expr :col |  ((((readX2DmacroX3F value: ( expr))) == false) not)                           	ifTrue: [(wr value: ((readX2DmacroX2Dbody value: ( expr))) value: ((out value: ((readX2DmacroX2Dprefix value: ( expr))) value: ( col))))]                           	ifFalse: [(wrX2Dlst value: ( expr) value: ( col))]]).                    wrX2Dlst := (                   [ :l :col |  (((((SmallScheme globalRef:  #'pairX3F')                                value: ( l))) == false) not)                           	ifTrue: [                            [ | loop |                                loop :=                                [ :l :col |                                 ((( col) == false) not)                                   	ifTrue: [ (((((SmallScheme globalRef:  #'pairX3F')                                            value: ( l))) == false) not)                                       	ifTrue: [(loop value: (((SmallScheme globalRef:  #'cdr')                                            value: ( l))) value: ((wr value: (((SmallScheme globalRef:  #'car')                                            value: ( l))) value: ((out value: ( ' ') value: ( col))))))]                                       	ifFalse: [ (((((SmallScheme globalRef:  #'nullX3F')                                                value: ( l))) == false) not)                                           	ifTrue: [(out value: ( ')') value: ( col))]                                           	ifFalse: [(out value: ( ')') value: ((wr value: ( l) value: ((out value: ( ' . ') value: ( col))))))]]]                                   	ifFalse: [ false]                           ].                           loop valueWithArguments: {                               ((SmallScheme globalRef:  #'cdr')                                    value: ( l)).                                (wr value: (((SmallScheme globalRef:  #'car')                                    value: ( l))) value: ((out value: ( '(') value: ( col)))). } ] value]                           	ifFalse: [(out value: ( '()') value: ( col))]]).                      (((((SmallScheme globalRef:  #'pairX3F')                              value: ( obj))) == false) not)                         	ifTrue: [(wrX2Dexpr value: ( obj) value: ( col))]                         	ifFalse: [ (((((SmallScheme globalRef:  #'nullX3F')                                  value: ( obj))) == false) not)                             	ifTrue: [(wrX2Dlst value: ( obj) value: ( col))]                             	ifFalse: [ (((((SmallScheme globalRef:  #'vectorX3F')                                      value: ( obj))) == false) not)                                 	ifTrue: [(wrX2Dlst value: (((SmallScheme globalRef:  #'vectorX2DX3Elist')                                      value: ( obj))) value: ((out value: ( '#') value: ( col))))]                                 	ifFalse: [ (((((SmallScheme globalRef:  #'booleanX3F')                                          value: ( obj))) == false) not)                                     	ifTrue: [(out value: ( ((( obj) == false) not)                                         	ifTrue: [ '#t']                                         	ifFalse: [ '#f']) value: ( col))]                                     	ifFalse: [ (((((SmallScheme globalRef:  #'numberX3F')                                              value: ( obj))) == false) not)                                         	ifTrue: [(out value: (((SmallScheme globalRef:  #'numberX2DX3Estring')                                              value: ( obj))) value: ( col))]                                         	ifFalse: [ (((((SmallScheme globalRef:  #'symbolX3F')                                                  value: ( obj))) == false) not)                                             	ifTrue: [(out value: (((SmallScheme globalRef:  #'symbolX2DX3Estring')                                                  value: ( obj))) value: ( col))]                                             	ifFalse: [ (((((SmallScheme globalRef:  #'procedureX3F')                                                      value: ( obj))) == false) not)                                                 	ifTrue: [(out value: ( '#[procedure]') value: ( col))]                                                 	ifFalse: [ (((((SmallScheme globalRef:  #'stringX3F')                                                          value: ( obj))) == false) not)                                                     	ifTrue: [ ((( displayX3F) == false) not)                                                         	ifTrue: [(out value: ( obj) value: ( col))]                                                         	ifFalse: [                                                          [ | loop |                                                              loop :=                                                              [ :i :j :col |                                                               ((( ((( col) == false) not)                                                                     	ifTrue: [((SmallScheme globalRef:  #'X3C')                                                                          value: ( j) value: (((SmallScheme globalRef:  #'stringX2Dlength')                                                                          value: ( obj))))]                                                                     	ifFalse: [ false]) == false) not)                                                                 	ifTrue: [ [ :c |                                                                       ((( [ :temp78 |                                                                               ((( temp78) == false) not)                                                                                 	ifTrue: [ temp78]                                                                                 	ifFalse: [((SmallScheme globalRef:  #'charX3DX3F')                                                                                      value: ( c) value: ( $"))].                                                                         ] valueWithArguments: {(((SmallScheme globalRef:  #'charX3DX3F')                                                                                  value: ( c) value: ( $\))). }) == false) not)                                                                         	ifTrue: [(loop value: ( j) value: (((SmallScheme globalRef:  #'X2B')                                                                              value: ( j) value: ( 1))) value: ((out value: ( '\') value: ((out value: (((SmallScheme globalRef:  #'substring')                                                                              value: ( obj) value: ( i) value: ( j))) value: ( col))))))]                                                                         	ifFalse: [(loop value: ( i) value: (((SmallScheme globalRef:  #'X2B')                                                                              value: ( j) value: ( 1))) value: ( col))].                                                                 ] valueWithArguments: {(((SmallScheme globalRef:  #'stringX2Dref')                                                                          value: ( obj) value: ( j))). }]                                                                 	ifFalse: [(out value: ( '"') value: ((out value: (((SmallScheme globalRef:  #'substring')                                                                      value: ( obj) value: ( i) value: ( j))) value: ( col))))]                                                         ].                                                         loop valueWithArguments: {                                                              00.                                                               00.                                                              (out value: ( '"') value: ( col)). } ] value]]                                                     	ifFalse: [ (((((SmallScheme globalRef:  #'charX3F')                                                              value: ( obj))) == false) not)                                                         	ifTrue: [ ((( displayX3F) == false) not)                                                             	ifTrue: [(out value: (((SmallScheme globalRef:  #'makeX2Dstring')                                                                  value: ( 1) value: ( obj))) value: ( col))]                                                             	ifFalse: [(out value: ( ( obj asSchemeObjString)) value: ( col))]]                                                         	ifFalse: [ (((((SmallScheme globalRef:  #'inputX2DportX3F')                                                                  value: ( obj))) == false) not)                                                             	ifTrue: [(out value: ( '#[input-port]') value: ( col))]                                                             	ifFalse: [ (((((SmallScheme globalRef:  #'outputX2DportX3F')                                                                      value: ( obj))) == false) not)                                                                 	ifTrue: [(out value: ( '#[output-port]') value: ( col))]                                                                 	ifFalse: [ (((((SmallScheme globalRef:  #'eofX2DobjectX3F')                                                                          value: ( obj))) == false) not)                                                                     	ifTrue: [(out value: ( '#[eof-object]') value: ( col))]                                                                     	ifFalse: [(out value: ( '#[unknown]') value: ( col))]]]]]]]]]]]].                 ] value]).              pp := (             [ :obj :col |                   [ | spaces indent pr ppX2Dexpr ppX2Dcall ppX2Dlist ppX2Ddown ppX2Dgeneral ppX2DexprX2Dlist ppX2Dlambda ppX2Dif ppX2Dcond ppX2Dcase ppX2Dand ppX2Dlet ppX2Dbegin ppX2Ddo indentX2Dgeneral maxX2DcallX2DheadX2Dwidth maxX2DexprX2Dwidth style |                                     spaces := (                   [ :n :col |  (((((SmallScheme globalRef:  #'X3E')                                value: ( n) value: ( 00))) == false) not)                           	ifTrue: [ (((((SmallScheme globalRef:  #'X3E')                                    value: ( n) value: ( 7))) == false) not)                               	ifTrue: [(spaces value: (((SmallScheme globalRef:  #'X2D')                                    value: ( n) value: ( 8))) value: ((out value: ( '        ') value: ( col))))]                               	ifFalse: [(out value: (((SmallScheme globalRef:  #'substring')                                    value: ( '        ') value: ( 00) value: ( n))) value: ( col))]]                           	ifFalse: [ col]]).                    indent := (                   [ :to :col |  ((( col) == false) not)                           	ifTrue: [ (((((SmallScheme globalRef:  #'X3C')                                    value: ( to) value: ( col))) == false) not)                               	ifTrue: [ ((((out value: (((SmallScheme globalRef:  #'makeX2Dstring')                                        value: ( 1) value: ((Character cr)))) value: ( col))) == false) not)                                   	ifTrue: [(spaces value: ( to) value: ( 00))]                                   	ifFalse: [ false]]                               	ifFalse: [(spaces value: (((SmallScheme globalRef:  #'X2D')                                    value: ( to) value: ( col))) value: ( col))]]                           	ifFalse: [ false]]).                    pr := (                   [ :obj :col :extra :ppX2Dpair |  ((( [ :temp79 |                                 ((( temp79) == false) not)                                   	ifTrue: [ temp79]                                   	ifFalse: [((SmallScheme globalRef:  #'vectorX3F')                                        value: ( obj))].                           ] valueWithArguments: {(((SmallScheme globalRef:  #'pairX3F')                                    value: ( obj))). }) == false) not)                           	ifTrue: [ [ :result :left |                                 [                                 ((SmallScheme globalRef:  #'genericX2Dwrite')                                                                       valueWithArguments: {  obj.  displayX3F.  false.                                  [ :str |  [                                       (result := ((SmallScheme globalRef:  #'cons')                                            value: ( str) value: ( result))).                                       (left := ((SmallScheme globalRef:  #'X2D')                                            value: ( left) value: (((SmallScheme globalRef:  #'stringX2Dlength')                                            value: ( str))))).                                       ((SmallScheme globalRef:  #'X3E')                                            value: ( left) value: ( 00)).                                      ] value].}).                                  (((((SmallScheme globalRef:  #'X3E')                                          value: ( left) value: ( 00))) == false) not)                                     	ifTrue: [(out value: (((SmallScheme globalRef:  #'reverseX2DstringX2Dappend')                                          value: ( result))) value: ( col))]                                     	ifFalse: [ (((((SmallScheme globalRef:  #'pairX3F')                                              value: ( obj))) == false) not)                                         	ifTrue: [(ppX2Dpair value: ( obj) value: ( col) value: ( extra))]                                         	ifFalse: [(ppX2Dlist                                          valueWithArguments: { ((SmallScheme globalRef:  #'vectorX2DX3Elist')                                              value: ( obj)). (out value: ( '#') value: ( col)).  extra.  ppX2Dexpr.})]].                                ] value.                           ] valueWithArguments: {( nil). (((SmallScheme globalRef:  #'min')                                    value: (((SmallScheme globalRef:  #'X2B')                                    value: (((SmallScheme globalRef:  #'X2D')                                    value: (((SmallScheme globalRef:  #'X2D')                                    value: ( width) value: ( col))) value: ( extra))) value: ( 1))) value: ( maxX2DexprX2Dwidth))). }]                           	ifFalse: [(wr value: ( obj) value: ( col))]]).                    ppX2Dexpr := (                   [ :expr :col :extra |  ((((readX2DmacroX3F value: ( expr))) == false) not)                           	ifTrue: [(pr                            valueWithArguments: { (readX2DmacroX2Dbody value: ( expr)). (out value: ((readX2DmacroX2Dprefix value: ( expr))) value: ( col)).  extra.  ppX2Dexpr.})]                           	ifFalse: [ [ :head |                                 (((((SmallScheme globalRef:  #'symbolX3F')                                        value: ( head))) == false) not)                                   	ifTrue: [ [ :proc |                                         ((( proc) == false) not)                                           	ifTrue: [(proc value: ( expr) value: ( col) value: ( extra))]                                           	ifFalse: [ (((((SmallScheme globalRef:  #'X3E')                                                    value: (((SmallScheme globalRef:  #'stringX2Dlength')                                                    value: (((SmallScheme globalRef:  #'symbolX2DX3Estring')                                                    value: ( head))))) value: ( maxX2DcallX2DheadX2Dwidth))) == false) not)                                               	ifTrue: [(ppX2Dgeneral                                                valueWithArguments: {  expr.  col.  extra.  false.  false.  false.  ppX2Dexpr.})]                                               	ifFalse: [(ppX2Dcall                                                valueWithArguments: {  expr.  col.  extra.  ppX2Dexpr.})]].                                   ] valueWithArguments: {((style value: ( head))). }]                                   	ifFalse: [(ppX2Dlist                                    valueWithArguments: {  expr.  col.  extra.  ppX2Dexpr.})].                           ] valueWithArguments: {(((SmallScheme globalRef:  #'car')                                    value: ( expr))). }]]).                    ppX2Dcall := (                   [ :expr :col :extra :ppX2Ditem |  [ :colX2A |                             ((( col) == false) not)                               	ifTrue: [(ppX2Ddown                                valueWithArguments: { ((SmallScheme globalRef:  #'cdr')                                    value: ( expr)).  colX2A. ((SmallScheme globalRef:  #'X2B')                                    value: ( colX2A) value: ( 1)).  extra.  ppX2Ditem.})]                               	ifFalse: [ false].                       ] valueWithArguments: {((wr value: (((SmallScheme globalRef:  #'car')                                value: ( expr))) value: ((out value: ( '(') value: ( col))))). }]).                    ppX2Dlist := (                   [ :l :col :extra :ppX2Ditem |  [ :col |                            (ppX2Ddown                            valueWithArguments: {  l.  col.  col.  extra.  ppX2Ditem.}).                       ] valueWithArguments: {((out value: ( '(') value: ( col))). }]).                    ppX2Ddown := (                   [ :l :col1 :col2 :extra :ppX2Ditem |                         [ | loop |                            loop :=                            [ :l :col |                             ((( col) == false) not)                               	ifTrue: [ (((((SmallScheme globalRef:  #'pairX3F')                                        value: ( l))) == false) not)                                   	ifTrue: [ [ :rest |                                         [ :extra |                                            (loop value: ( rest) value: ((pr                                            valueWithArguments: { ((SmallScheme globalRef:  #'car')                                                value: ( l)). (indent value: ( col2) value: ( col)).  extra.  ppX2Ditem.}))).                                       ] valueWithArguments: {( (((((SmallScheme globalRef:  #'nullX3F')                                                    value: ( rest))) == false) not)                                               	ifTrue: [((SmallScheme globalRef:  #'X2B')                                                    value: ( extra) value: ( 1))]                                               	ifFalse: [ 00]). }.                                   ] valueWithArguments: {(((SmallScheme globalRef:  #'cdr')                                            value: ( l))). }]                                   	ifFalse: [ (((((SmallScheme globalRef:  #'nullX3F')                                            value: ( l))) == false) not)                                       	ifTrue: [(out value: ( ')') value: ( col))]                                       	ifFalse: [(out value: ( ')') value: ((pr                                        valueWithArguments: {  l. (indent value: ( col2) value: ((out value: ( '.') value: ((indent value: ( col2) value: ( col)))))). ((SmallScheme globalRef:  #'X2B')                                            value: ( extra) value: ( 1)).  ppX2Ditem.})))]]]                               	ifFalse: [ false]                       ].                       loop valueWithArguments: {                            l.                             col1. } ] value]).                    ppX2Dgeneral := (                   [ :expr :col :extra :namedX3F :ppX2D1 :ppX2D2 :ppX2D3 |                         [ | tail1 tail2 tail3 |                                                 tail1 := (                         [ :rest :col1 :col2 :col3 |  ((( ((( ppX2D1) == false) not)                                     	ifTrue: [((SmallScheme globalRef:  #'pairX3F')                                          value: ( rest))]                                     	ifFalse: [ false]) == false) not)                                 	ifTrue: [                                 [ :val1 |                                    [ :rest |                                      [ :extra |                                        (tail2                                        valueWithArguments: {  rest.  col1. (pr                                        valueWithArguments: {  val1. (indent value: ( col3) value: ( col2)).  extra.  ppX2D1.}).  col3.})                                     ] value: ( (((((SmallScheme globalRef:  #'nullX3F')                                              value: ( rest))) == false) not)                                         	ifTrue: [((SmallScheme globalRef:  #'X2B')                                              value: ( extra) value: ( 1))]                                         	ifFalse: [ 00])                                   ] value: (((SmallScheme globalRef:  #'cdr')                                        value: ( rest)))                                 ] value: (((SmallScheme globalRef:  #'car')                                      value: ( rest)))]                                 	ifFalse: [(tail2                                  valueWithArguments: {  rest.  col1.  col2.  col3.})]]).                          tail2 := (                         [ :rest :col1 :col2 :col3 |  ((( ((( ppX2D2) == false) not)                                     	ifTrue: [((SmallScheme globalRef:  #'pairX3F')                                          value: ( rest))]                                     	ifFalse: [ false]) == false) not)                                 	ifTrue: [                                 [ :val1 |                                    [ :rest |                                      [ :extra |                                        (tail3 value: ( rest) value: ( col1) value: ((pr                                        valueWithArguments: {  val1. (indent value: ( col3) value: ( col2)).  extra.  ppX2D2.})))                                     ] value: ( (((((SmallScheme globalRef:  #'nullX3F')                                              value: ( rest))) == false) not)                                         	ifTrue: [((SmallScheme globalRef:  #'X2B')                                              value: ( extra) value: ( 1))]                                         	ifFalse: [ 00])                                   ] value: (((SmallScheme globalRef:  #'cdr')                                        value: ( rest)))                                 ] value: (((SmallScheme globalRef:  #'car')                                      value: ( rest)))]                                 	ifFalse: [(tail3 value: ( rest) value: ( col1) value: ( col2))]]).                          tail3 := (                         [ :rest :col1 :col2 | (ppX2Ddown                              valueWithArguments: {  rest.  col2.  col1.  extra.  ppX2D3.})]).                                                      [ :head |                              [ :rest |                                [ :colX2A |                                   ((( ((( namedX3F) == false) not)                                         	ifTrue: [((SmallScheme globalRef:  #'pairX3F')                                              value: ( rest))]                                         	ifFalse: [ false]) == false) not)                                     	ifTrue: [                                     [ :name |                                        [ :rest |                                          [ :colX2AX2A |                                            (tail1                                            valueWithArguments: {  rest. ((SmallScheme globalRef:  #'X2B')                                                value: ( col) value: ( indentX2Dgeneral)).  colX2AX2A. ((SmallScheme globalRef:  #'X2B')                                                value: ( colX2AX2A) value: ( 1)).})                                         ] value: ((wr value: ( name) value: ((out value: ( ' ') value: ( colX2A)))))                                       ] value: (((SmallScheme globalRef:  #'cdr')                                            value: ( rest)))                                     ] value: (((SmallScheme globalRef:  #'car')                                          value: ( rest)))]                                     	ifFalse: [(tail1                                      valueWithArguments: {  rest. ((SmallScheme globalRef:  #'X2B')                                          value: ( col) value: ( indentX2Dgeneral)).  colX2A. ((SmallScheme globalRef:  #'X2B')                                          value: ( colX2A) value: ( 1)).})]                               ] value: ((wr value: ( head) value: ((out value: ( '(') value: ( col)))))                             ] value: (((SmallScheme globalRef:  #'cdr')                                  value: ( expr)))                           ] value: (((SmallScheme globalRef:  #'car')                                value: ( expr))).                       ] value]).                    ppX2DexprX2Dlist := (                   [ :l :col :extra | (ppX2Dlist                        valueWithArguments: {  l.  col.  extra.  ppX2Dexpr.})]).                    ppX2Dlambda := (                   [ :expr :col :extra | (ppX2Dgeneral                        valueWithArguments: {  expr.  col.  extra.  false.  ppX2DexprX2Dlist.  false.  ppX2Dexpr.})]).                    ppX2Dif := (                   [ :expr :col :extra | (ppX2Dgeneral                        valueWithArguments: {  expr.  col.  extra.  false.  ppX2Dexpr.  false.  ppX2Dexpr.})]).                    ppX2Dcond := (                   [ :expr :col :extra | (ppX2Dcall                        valueWithArguments: {  expr.  col.  extra.  ppX2DexprX2Dlist.})]).                    ppX2Dcase := (                   [ :expr :col :extra | (ppX2Dgeneral                        valueWithArguments: {  expr.  col.  extra.  false.  ppX2Dexpr.  false.  ppX2DexprX2Dlist.})]).                    ppX2Dand := (                   [ :expr :col :extra | (ppX2Dcall                        valueWithArguments: {  expr.  col.  extra.  ppX2Dexpr.})]).                    ppX2Dlet := (                   [ :expr :col :extra |                        [ :rest |                          [ :namedX3F |                            (ppX2Dgeneral                            valueWithArguments: {  expr.  col.  extra.  namedX3F.  ppX2DexprX2Dlist.  false.  ppX2Dexpr.})                         ] value: ( (((((SmallScheme globalRef:  #'pairX3F')                                  value: ( rest))) == false) not)                             	ifTrue: [((SmallScheme globalRef:  #'symbolX3F')                                  value: (((SmallScheme globalRef:  #'car')                                  value: ( rest))))]                             	ifFalse: [ false])                       ] value: (((SmallScheme globalRef:  #'cdr')                            value: ( expr)))]).                    ppX2Dbegin := (                   [ :expr :col :extra | (ppX2Dgeneral                        valueWithArguments: {  expr.  col.  extra.  false.  false.  false.  ppX2Dexpr.})]).                    ppX2Ddo := (                   [ :expr :col :extra | (ppX2Dgeneral                        valueWithArguments: {  expr.  col.  extra.  false.  ppX2DexprX2Dlist.  ppX2DexprX2Dlist.  ppX2Dexpr.})]).                    indentX2Dgeneral := ( 2).                    maxX2DcallX2DheadX2Dwidth := ( 5).                    maxX2DexprX2Dwidth := ( 50).                    style := (                   [ :head |  [ :key80 |                             (((((SmallScheme globalRef:  #'memv')                                    value: ( key80) value: ( ({ #'lambda'.  #'letX2A'.  #'letrec'.  #'define'. } asRest)))) == false) not)                               	ifTrue: [ ppX2Dlambda]                               	ifFalse: [ [ :key81 |                                     (((((SmallScheme globalRef:  #'memv')                                            value: ( key81) value: ( ({ #'if'.  #'setX21'. } asRest)))) == false) not)                                       	ifTrue: [ ppX2Dif]                                       	ifFalse: [ [ :key82 |                                             (((((SmallScheme globalRef:  #'memv')                                                    value: ( key82) value: ( ({ #'cond'. } asRest)))) == false) not)                                               	ifTrue: [ ppX2Dcond]                                               	ifFalse: [ [ :key83 |                                                     (((((SmallScheme globalRef:  #'memv')                                                            value: ( key83) value: ( ({ #'case'. } asRest)))) == false) not)                                                       	ifTrue: [ ppX2Dcase]                                                       	ifFalse: [ [ :key84 |                                                             (((((SmallScheme globalRef:  #'memv')                                                                    value: ( key84) value: ( ({ #'and'.  #'or'. } asRest)))) == false) not)                                                               	ifTrue: [ ppX2Dand]                                                               	ifFalse: [ [ :key85 |                                                                     (((((SmallScheme globalRef:  #'memv')                                                                            value: ( key85) value: ( ({ #'let'. } asRest)))) == false) not)                                                                       	ifTrue: [ ppX2Dlet]                                                                       	ifFalse: [ [ :key86 |                                                                             (((((SmallScheme globalRef:  #'memv')                                                                                    value: ( key86) value: ( ({ #'begin'. } asRest)))) == false) not)                                                                               	ifTrue: [ ppX2Dbegin]                                                                               	ifFalse: [ [ :key87 |                                                                                     (((((SmallScheme globalRef:  #'memv')                                                                                            value: ( key87) value: ( ({ #'do'. } asRest)))) == false) not)                                                                                       	ifTrue: [ ppX2Ddo]                                                                                       	ifFalse: [ [                                                                                          key87.                                                                                          false.                                                                                        ] value].                                                                               ] valueWithArguments: {( key86). }].                                                                       ] valueWithArguments: {( key85). }].                                                               ] valueWithArguments: {( key84). }].                                                       ] valueWithArguments: {( key83). }].                                               ] valueWithArguments: {( key82). }].                                       ] valueWithArguments: {( key81). }].                               ] valueWithArguments: {( key80). }].                       ] valueWithArguments: {( head). }]).                     (pr                      valueWithArguments: {  obj.  col.  00.  ppX2Dexpr.}).                 ] value]).                ((( width) == false) not)                   	ifTrue: [(out value: (((SmallScheme globalRef:  #'makeX2Dstring')                        value: ( 1) value: ((Character cr)))) value: ((pp value: ( obj) value: ( 00))))]                   	ifFalse: [(wr value: ( obj) value: ( 00))].           ] value] ) . SmallScheme define:  #'reverseX2DstringX2Dappend'    "reverse-string-append"  as: (        [ :l | ((SmallScheme globalRef:  #'apply')                value: ( (SmallScheme globalRef:  #'stringX2Dappend')               ) value: (((SmallScheme globalRef:  #'reverse')                value: ( l))))] ) . SmallScheme define:  #'prettyX2Dprint'    "pretty-print"  as: (        [ :obj :opt |            opt := opt asRest.            [ :port |                ((SmallScheme globalRef:  #'genericX2Dwrite')                                   valueWithArguments: {  obj.  false.  79.                [ :s |  [                     ((SmallScheme globalRef:  #'display')                          value: ( s) value: ( port)).                      true.                    ] value].}).           ] valueWithArguments: {( (((((SmallScheme globalRef:  #'pairX3F')                        value: ( opt))) == false) not)                   	ifTrue: [((SmallScheme globalRef:  #'car')                        value: ( opt))]                   	ifFalse: [((SmallScheme globalRef:  #'currentX2DoutputX2Dport')                        value)]). }] withLastArgRest  ) . SmallScheme define:  #'prettyX2DprintX2DtoX2Dstring'    "pretty-print-to-string"  as: (        [ :obj |  [ :result |                 [                 ((SmallScheme globalRef:  #'genericX2Dwrite')                                       valueWithArguments: {  obj.  false.  79.                  [ :str |  [                       (result := ((SmallScheme globalRef:  #'cons')                            value: ( str) value: ( result))).                        true.                      ] value].}).                 ((SmallScheme globalRef:  #'reverseX2DstringX2Dappend')                      value: ( result)).                ] value.           ] valueWithArguments: {( nil). }] ) .! !