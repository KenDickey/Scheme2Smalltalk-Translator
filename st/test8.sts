'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test8.scm'!!SmallScheme methodsFor: 'user'!test8    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 8)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'vectorX3F')     ) value: ( { 00.  ({ 2.  2.  2.  2. } asRest).  'Anna'. })).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'vectorX3F')     ) value: ( {})).((schemeEnv globalRef:  #'test')       valueWithArguments: {  { #'a'.  #'b'.  #'c'. }.  (schemeEnv globalRef:  #'vector')     .  #'a'.  #'b'.  #'c'.}).((schemeEnv globalRef:  #'test')      value: ( {}) value: ( (schemeEnv globalRef:  #'vector')     )).((schemeEnv globalRef:  #'test')      value: ( 3) value: ( (schemeEnv globalRef:  #'vectorX2Dlength')     ) value: ( { 00.  ({ 2.  2.  2.  2. } asRest).  'Anna'. })).((schemeEnv globalRef:  #'test')      value: ( 00) value: ( (schemeEnv globalRef:  #'vectorX2Dlength')     ) value: ( {})).((schemeEnv globalRef:  #'test')       valueWithArguments: {  8.  (schemeEnv globalRef:  #'vectorX2Dref')     .  { 1.  1.  2.  3.  5.  8.  13.  21. }.  5.}).((schemeEnv globalRef:  #'test')      value: ( { 00.  ({ 'Sue'.  'Sue'. } asRest).  'Anna'. }) value: ( #'vectorX2Dset') value: ( [ :vec |       [       ((schemeEnv globalRef:  #'vectorX2DsetX21')            value: ( vec) value: ( 1) value: ( ({ 'Sue'.  'Sue'. } asRest))).        vec.      ] value. ] valueWithArguments: {(((schemeEnv globalRef:  #'listX2DX3Evector')          value: (((schemeEnv globalRef:  #'list')          value: ( 00) value: ( ({ 2.  2.  2.  2. } asRest)) value: ( 'Anna'))))). })).((schemeEnv globalRef:  #'test')       valueWithArguments: {  { #'hi'.  #'hi'. }.  (schemeEnv globalRef:  #'makeX2Dvector')     .  2.  #'hi'.}).((schemeEnv globalRef:  #'test')      value: ( {}) value: ( (schemeEnv globalRef:  #'makeX2Dvector')     ) value: ( 00)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  {}.  (schemeEnv globalRef:  #'makeX2Dvector')     .  00.  #'a'.}).((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 9)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'procedureX3F')     ) value: ( (schemeEnv globalRef:  #'car')     )).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'procedureX3F')     ) value: ( #'car')).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'procedureX3F')     ) value: ( [ :x | ((schemeEnv globalRef:  #'X2A')          value: ( x) value: ( x))])).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'procedureX3F')     ) value: ( ({ #'lambda'.  ({ #'x'. } asRest).  ({ #'X2A'.  #'x'.  #'x'. } asRest). } asRest))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'callX2DwithX2DcurrentX2Dcontinuation')     ) value: ( (schemeEnv globalRef:  #'procedureX3F')     )).((schemeEnv globalRef:  #'test')       valueWithArguments: {  7.  (schemeEnv globalRef:  #'apply')     .  (schemeEnv globalRef:  #'X2B')     . ((schemeEnv globalRef:  #'list')      value: ( 3) value: ( 4)).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  7.  (schemeEnv globalRef:  #'apply')     .  [ :a :b | ((schemeEnv globalRef:  #'X2B')          value: ( a) value: ( b))]. ((schemeEnv globalRef:  #'list')      value: ( 3) value: ( 4)).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  17.  (schemeEnv globalRef:  #'apply')     .  (schemeEnv globalRef:  #'X2B')     .  10. ((schemeEnv globalRef:  #'list')      value: ( 3) value: ( 4)).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  nil.  (schemeEnv globalRef:  #'apply')     .  (schemeEnv globalRef:  #'list')     .  nil.}). schemeEnv define:  #'compose'  as: (        [ :f :g |            [ :args |                args := args asRest.               (f value: (((schemeEnv globalRef:  #'apply')                    value: ( g) value: ( args))))] withLastArgRest ] ) . schemeEnv define:  #'sqt'  as: (        [ :x |             [ | doX2Dloop113 |                doX2Dloop113 :=                [ :i |                 (((((schemeEnv globalRef:  #'X3E')                        value: (((schemeEnv globalRef:  #'X2A')                        value: ( i) value: ( i))) value: ( x))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'X2D')                        value: ( i) value: ( 1))]                   	ifFalse: [(doX2Dloop113 value: (((schemeEnv globalRef:  #'X2B')                        value: ( i) value: ( 1))))]           ].           doX2Dloop113 valueWithArguments: {                00. } ] value] ) .((schemeEnv globalRef:  #'test')       valueWithArguments: {  30. ((schemeEnv globalRef:  #'compose')      value: ( (schemeEnv globalRef:  #'sqt')     ) value: ( (schemeEnv globalRef:  #'X2A')     )).  12.  75.}). schemeEnv define:  #'sqt'  as: (        [ :x |             [ | doX2Dloop114 |                doX2Dloop114 :=                [ :i |                 (((((schemeEnv globalRef:  #'X3E')                        value: (((schemeEnv globalRef:  #'X2A')                        value: ( i) value: ( i))) value: ( x))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'X2D')                        value: ( i) value: ( 1))]                   	ifFalse: [(doX2Dloop114 value: (((schemeEnv globalRef:  #'X2B')                        value: ( i) value: ( 1))))]           ].           doX2Dloop114 valueWithArguments: {                00. } ] value] ) .((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'b'.  #'e'.  #'h'. } asRest).  (schemeEnv globalRef:  #'map')     .  (schemeEnv globalRef:  #'cadr')     .  ({ ({ #'a'.  #'b'. } asRest).  ({ #'d'.  #'e'. } asRest).  ({ #'g'.  #'h'. } asRest). } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ 5.  7.  9. } asRest).  (schemeEnv globalRef:  #'map')     .  (schemeEnv globalRef:  #'X2B')     .  ({ 1.  2.  3. } asRest).  ({ 4.  5.  6. } asRest).}).((schemeEnv globalRef:  #'test')      value: ( { 00.  1.  4.  9.  16. }) value: ( #'forX2Deach') value: ( [ :v |       [       ((schemeEnv globalRef:  #'forX2Deach')            value: (       [ :i | ((schemeEnv globalRef:  #'vectorX2DsetX21')                value: ( v) value: ( i) value: (((schemeEnv globalRef:  #'X2A')                value: ( i) value: ( i))))]) value: ( ({ 00.  1.  2.  3.  4. } asRest))).        v.      ] value. ] valueWithArguments: {(((schemeEnv globalRef:  #'makeX2Dvector')          value: ( 5))). })).((schemeEnv globalRef:  #'test')      value: ( -3) value: ( (schemeEnv globalRef:  #'callX2DwithX2DcurrentX2Dcontinuation')     ) value: ( [ :exit |  [       ((schemeEnv globalRef:  #'forX2Deach')            value: (       [ :x |  (((((schemeEnv globalRef:  #'negativeX3F')                    value: ( x))) == false) not)               	ifTrue: [(exit value: ( x))]]) value: ( ({ 54.  00.  37.  -3.  245.  19. } asRest))).        true.      ] value])). schemeEnv define:  #'listX2Dlength'    "list-length"  as: (        [ :obj | ((schemeEnv globalRef:  #'callX2DwithX2DcurrentX2Dcontinuation')                value: (           [ :return |                 [ | r |                                 r := (                 [ :obj |  (((((schemeEnv globalRef:  #'nullX3F')                              value: ( obj))) == false) not)                         	ifTrue: [ 00]                         	ifFalse: [ (((((schemeEnv globalRef:  #'pairX3F')                                  value: ( obj))) == false) not)                             	ifTrue: [((schemeEnv globalRef:  #'X2B')                                  value: ((r value: (((schemeEnv globalRef:  #'cdr')                                  value: ( obj))))) value: ( 1))]                             	ifFalse: [(return value: ( false))]]]).                   (r value: ( obj)).               ] value]))] ) .((schemeEnv globalRef:  #'test')      value: ( 4) value: ( (schemeEnv globalRef:  #'listX2Dlength')     ) value: ( ({ 1.  2.  3.  4. } asRest))).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'listX2Dlength')     ) value: ( (Pair car:  #'a' cdr:  (Pair car:  #'b' cdr:  #'c')))).((schemeEnv globalRef:  #'test')       valueWithArguments: {  nil.  (schemeEnv globalRef:  #'map')     .  (schemeEnv globalRef:  #'cadr')     .  nil.}). schemeEnv define:  #'nextX2DleafX2Dgenerator'    "next-leaf-generator"  as: (        [ :obj :eot |             [ | return cont recur |                         return := ( false).              cont := (             [ :x |  [                   (recur value: ( obj)).                   (cont :=                    [ :x | (return value: ( eot))]).                   (cont value: ( false)).                  ] value]).              recur := (             [ :obj |  (((((schemeEnv globalRef:  #'pairX3F')                          value: ( obj))) == false) not)                     	ifTrue: [((schemeEnv globalRef:  #'forX2Deach')                          value: ( recur) value: ( obj))]                     	ifFalse: [((schemeEnv globalRef:  #'callX2DwithX2DcurrentX2Dcontinuation')                          value: (                     [ :c |  [                           (cont :=  c).                           (return value: ( obj)).                          ] value]))]]).                              [((schemeEnv globalRef:  #'callX2DwithX2DcurrentX2Dcontinuation')                        value: (                   [ :ret |  [                         (return :=  ret).                         (cont value: ( false)).                        ] value]))].           ] value] ) . schemeEnv define:  #'leafX2DeqX3F'    "leaf-eq?"  as: (        [ :x :y |            [ :eot |              [ :xf |                [ :yf |                                    [ | loop |                                     loop := (                   [ :x :y |  (((((schemeEnv globalRef:  #'not')                                value: (((schemeEnv globalRef:  #'eqX3F')                                value: ( x) value: ( y))))) == false) not)                           	ifTrue: [ false]                           	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                    value: ( eot) value: ( x))) == false) not)                               	ifTrue: [ true]                               	ifFalse: [(loop value: ((xf value)) value: ((yf value)))]]]).                     (loop value: ((xf value)) value: ((yf value))).                 ] value               ] value: (((schemeEnv globalRef:  #'nextX2DleafX2Dgenerator')                    value: ( y) value: ( eot)))             ] value: (((schemeEnv globalRef:  #'nextX2DleafX2Dgenerator')                  value: ( x) value: ( eot)))           ] value: (((schemeEnv globalRef:  #'list')                value: ( #'eot')))] ) . schemeEnv define:  #'testX2Dcont'    "test-cont"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).             ((schemeEnv globalRef:  #'display')                  value: ( ';testing continuations; ')).             ((schemeEnv globalRef:  #'newline')                  value).             ((schemeEnv globalRef:  #'section')                  value: ( 6) value: ( 9)).             ((schemeEnv globalRef:  #'test')                               valueWithArguments: {  true.  (schemeEnv globalRef:  #'leafX2DeqX3F')                 .  ({ #'a'.  ({ #'b'.  ({ #'c'. } asRest). } asRest). } asRest).  ({ ({ #'a'. } asRest).  #'b'.  #'c'. } asRest).}).             ((schemeEnv globalRef:  #'test')                               valueWithArguments: {  false.  (schemeEnv globalRef:  #'leafX2DeqX3F')                 .  ({ #'a'.  ({ #'b'.  ({ #'c'. } asRest). } asRest). } asRest).  ({ ({ #'a'. } asRest).  #'b'.  #'c'.  #'d'. } asRest).}).             ((schemeEnv globalRef:  #'reportX2Derrs')                  value).            ] value] ) . schemeEnv define:  #'testX2Ddelay'    "test-delay"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).             ((schemeEnv globalRef:  #'display')                  value: ( ';testing DELAY and FORCE; ')).             ((schemeEnv globalRef:  #'newline')                  value).             ((schemeEnv globalRef:  #'section')                  value: ( 6) value: ( 9)).             ((schemeEnv globalRef:  #'test')                  value: ( 3) value: ( #'delay') value: (((schemeEnv globalRef:  #'force')                  value: (((schemeEnv globalRef:  #'makeX2Dpromise')                  value: (             [((schemeEnv globalRef:  #'X2B')                      value: ( 1) value: ( 2))])))))).             ((schemeEnv globalRef:  #'test')                  value: ( ({ 3.  3. } asRest)) value: ( #'delay') value: ( [ :p |                  ((schemeEnv globalRef:  #'list')                      value: (((schemeEnv globalRef:  #'force')                      value: ( p))) value: (((schemeEnv globalRef:  #'force')                      value: ( p)))).             ] valueWithArguments: {(((schemeEnv globalRef:  #'makeX2Dpromise')                      value: (                 [((schemeEnv globalRef:  #'X2B')                          value: ( 1) value: ( 2))]))). })).             ((schemeEnv globalRef:  #'test')                  value: ( 2) value: ( #'delay') value: (              [ | aX2Dstream head tail |                             aX2Dstream := (                [ | next |                                 next := (                 [ :n | ((schemeEnv globalRef:  #'cons')                          value: ( n) value: (((schemeEnv globalRef:  #'makeX2Dpromise')                          value: (                     [(next value: (((schemeEnv globalRef:  #'X2B')                              value: ( n) value: ( 1))))]))))]).                   (next value: ( 00)).               ] value).                head := ( (schemeEnv globalRef:  #'car')                   ).                tail := (               [ :stream | ((schemeEnv globalRef:  #'force')                        value: (((schemeEnv globalRef:  #'cdr')                        value: ( stream))))]).                 (head value: ((tail value: ((tail value: ( aX2Dstream)))))).             ] value)).                           [ | count p x |                             count := ( 00).                p := (((schemeEnv globalRef:  #'makeX2Dpromise')                    value: (               [ [                     (count := ((schemeEnv globalRef:  #'X2B')                          value: ( count) value: ( 1))).                      (((((schemeEnv globalRef:  #'X3E')                              value: ( count) value: ( x))) == false) not)                         	ifTrue: [ count]                         	ifFalse: [((schemeEnv globalRef:  #'force')                              value: ( p))].                    ] value]))).                x := ( 5).                  [                   ((schemeEnv globalRef:  #'test')                        value: ( 6) value: ( (schemeEnv globalRef:  #'force')                       ) value: ( p)).                   (x :=  10).                   ((schemeEnv globalRef:  #'test')                        value: ( 6) value: ( (schemeEnv globalRef:  #'force')                       ) value: ( p)).                  ] value.             ] value.             ((schemeEnv globalRef:  #'test')                  value: ( 3) value: ( #'force') value: (              [ | p c |                             p := (((schemeEnv globalRef:  #'makeX2Dpromise')                    value: (               [ ((( c) == false) not)                       	ifTrue: [ 3]                       	ifFalse: [ [                         (c :=  true).                         ((schemeEnv globalRef:  #'X2B')                              value: (((schemeEnv globalRef:  #'force')                              value: ( p))) value: ( 1)).                        ] value]]))).                c := ( false).                 ((schemeEnv globalRef:  #'force')                      value: ( p)).             ] value)).             ((schemeEnv globalRef:  #'reportX2Derrs')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 10) value: ( 1)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'inputX2DportX3F')     ) value: (((schemeEnv globalRef:  #'currentX2DinputX2Dport')      value))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'outputX2DportX3F')     ) value: (((schemeEnv globalRef:  #'currentX2DoutputX2Dport')      value))).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'callX2DwithX2DinputX2Dfile')     .  'test.scm'.  (schemeEnv globalRef:  #'inputX2DportX3F')     .}). schemeEnv define:  #'thisX2Dfile'    "this-file"  as: ( ((schemeEnv globalRef:  #'openX2DinputX2Dfile')            value: ( 'test.scm')) ) .((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'inputX2DportX3F')     ) value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 10) value: ( 2)).((schemeEnv globalRef:  #'test')      value: ( $;) value: ( (schemeEnv globalRef:  #'peekX2Dchar')     ) value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'test')      value: ( $;) value: ( (schemeEnv globalRef:  #'readX2Dchar')     ) value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'test')      value: ( ({ #'define'.  #'curX2Dsection'.  ({ #'quote'.  nil. } asRest). } asRest)) value: ( (schemeEnv globalRef:  #'read')     ) value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'test')      value: ( $() value: ( (schemeEnv globalRef:  #'peekX2Dchar')     ) value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'test')      value: ( ({ #'define'.  #'errs'.  ({ #'quote'.  nil. } asRest). } asRest)) value: ( (schemeEnv globalRef:  #'read')     ) value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'closeX2DinputX2Dport')      value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )).((schemeEnv globalRef:  #'closeX2DinputX2Dport')      value: ( (schemeEnv globalRef:  #'thisX2Dfile')     )). schemeEnv define:  #'checkX2DtestX2Dfile'    "check-test-file"  as: (        [ :name |             [ | testX2Dfile |                         testX2Dfile := (((schemeEnv globalRef:  #'openX2DinputX2Dfile')                  value: ( name))).                [                 ((schemeEnv globalRef:  #'test')                      value: ( true) value: ( #'inputX2DportX3F') value: (((schemeEnv globalRef:  #'callX2DwithX2DinputX2Dfile')                      value: ( name) value: (                 [ :testX2Dfile |  [                       ((schemeEnv globalRef:  #'test')                            value: ( (schemeEnv globalRef:  #'loadX2DtestX2Dobj')                           ) value: ( (schemeEnv globalRef:  #'read')                           ) value: ( testX2Dfile)).                       ((schemeEnv globalRef:  #'test')                            value: ( true) value: ( (schemeEnv globalRef:  #'eofX2DobjectX3F')                           ) value: (((schemeEnv globalRef:  #'peekX2Dchar')                            value: ( testX2Dfile)))).                       ((schemeEnv globalRef:  #'test')                            value: ( true) value: ( (schemeEnv globalRef:  #'eofX2DobjectX3F')                           ) value: (((schemeEnv globalRef:  #'readX2Dchar')                            value: ( testX2Dfile)))).                       ((schemeEnv globalRef:  #'inputX2DportX3F')                            value: ( testX2Dfile)).                      ] value])))).                 ((schemeEnv globalRef:  #'test')                      value: ( $;) value: ( (schemeEnv globalRef:  #'readX2Dchar')                     ) value: ( testX2Dfile)).                 ((schemeEnv globalRef:  #'test')                      value: ( (schemeEnv globalRef:  #'displayX2DtestX2Dobj')                     ) value: ( (schemeEnv globalRef:  #'read')                     ) value: ( testX2Dfile)).                 ((schemeEnv globalRef:  #'test')                      value: ( (schemeEnv globalRef:  #'loadX2DtestX2Dobj')                     ) value: ( (schemeEnv globalRef:  #'read')                     ) value: ( testX2Dfile)).                 ((schemeEnv globalRef:  #'closeX2DinputX2Dport')                      value: ( testX2Dfile)).                ] value.           ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 10) value: ( 3)). schemeEnv define:  #'writeX2DtestX2Dobj'    "write-test-obj"  as: (  (Pair car:  true cdr:  (Pair car:  false cdr:  (Pair car:  $a cdr:  (Pair car:  nil cdr:  (Pair car:  9739 cdr:  (Pair car:  -3 cdr:  { ({ #'test'. } asRest).  'te " " st'.  ''.  #'test'.  {}.  #'b'.  #'c'. })))))) ) . schemeEnv define:  #'displayX2DtestX2Dobj'    "display-test-obj"  as: (  (Pair car:  true cdr:  (Pair car:  false cdr:  (Pair car:  #'a' cdr:  (Pair car:  nil cdr:  (Pair car:  9739 cdr:  (Pair car:  -3 cdr:  { ({ #'test'. } asRest).  #'te'.  ' '.  #'st'.  #'test'.  {}.  #'b'.  #'c'. })))))) ) . schemeEnv define:  #'loadX2DtestX2Dobj'    "load-test-obj"  as: ( ((schemeEnv globalRef:  #'list')            value: ( #'define') value: ( #'foo') value: (((schemeEnv globalRef:  #'list')            value: ( #'quote') value: ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')           )))) ) .((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'callX2DwithX2DoutputX2Dfile')     .  'tmp1'.  [ :testX2Dfile |  [       ((schemeEnv globalRef:  #'writeX2Dchar')            value: ( $;) value: ( testX2Dfile)).       ((schemeEnv globalRef:  #'display')            value: ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')           ) value: ( testX2Dfile)).       ((schemeEnv globalRef:  #'newline')            value: ( testX2Dfile)).       ((schemeEnv globalRef:  #'write')            value: ( (schemeEnv globalRef:  #'loadX2DtestX2Dobj')           ) value: ( testX2Dfile)).       ((schemeEnv globalRef:  #'outputX2DportX3F')            value: ( testX2Dfile)).      ] value].}).((schemeEnv globalRef:  #'checkX2DtestX2Dfile')      value: ( 'tmp1')). schemeEnv define:  #'testX2Dfile'    "test-file"  as: ( ((schemeEnv globalRef:  #'openX2DoutputX2Dfile')            value: ( 'tmp2')) ) .((schemeEnv globalRef:  #'writeX2Dchar')      value: ( $;) value: ( (schemeEnv globalRef:  #'testX2Dfile')     )).((schemeEnv globalRef:  #'display')      value: ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')     ) value: ( (schemeEnv globalRef:  #'testX2Dfile')     )).((schemeEnv globalRef:  #'newline')      value: ( (schemeEnv globalRef:  #'testX2Dfile')     )).((schemeEnv globalRef:  #'write')      value: ( (schemeEnv globalRef:  #'loadX2DtestX2Dobj')     ) value: ( (schemeEnv globalRef:  #'testX2Dfile')     )).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'outputX2DportX3F')     ) value: ( (schemeEnv globalRef:  #'testX2Dfile')     )).((schemeEnv globalRef:  #'closeX2DoutputX2Dport')      value: ( (schemeEnv globalRef:  #'testX2Dfile')     )).((schemeEnv globalRef:  #'checkX2DtestX2Dfile')      value: ( 'tmp2')). schemeEnv define:  #'testX2Dsc4'    "test-sc4"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).             ((schemeEnv globalRef:  #'display')                  value: ( ';testing scheme 4 functions; ')).             ((schemeEnv globalRef:  #'newline')                  value).             ((schemeEnv globalRef:  #'section')                  value: ( 6) value: ( 7)).             ((schemeEnv globalRef:  #'test')                  value: ( ({ $P.  $ .  $l. } asRest)) value: ( (schemeEnv globalRef:  #'stringX2DX3Elist')                 ) value: ( 'P l')).             ((schemeEnv globalRef:  #'test')                  value: ( nil) value: ( (schemeEnv globalRef:  #'stringX2DX3Elist')                 ) value: ( '')).             ((schemeEnv globalRef:  #'test')                  value: ( '1\"') value: ( (schemeEnv globalRef:  #'listX2DX3Estring')                 ) value: ( ({ $1.  $\.  $". } asRest))).             ((schemeEnv globalRef:  #'test')                  value: ( '') value: ( (schemeEnv globalRef:  #'listX2DX3Estring')                 ) value: ( nil)).             ((schemeEnv globalRef:  #'section')                  value: ( 6) value: ( 8)).             ((schemeEnv globalRef:  #'test')                  value: ( ({ #'dah'.  #'dah'.  #'didah'. } asRest)) value: ( (schemeEnv globalRef:  #'vectorX2DX3Elist')                 ) value: ( { #'dah'.  #'dah'.  #'didah'. })).             ((schemeEnv globalRef:  #'test')                  value: ( nil) value: ( (schemeEnv globalRef:  #'vectorX2DX3Elist')                 ) value: ( {})).             ((schemeEnv globalRef:  #'test')                  value: ( { #'dididit'.  #'dah'. }) value: ( (schemeEnv globalRef:  #'listX2DX3Evector')                 ) value: ( ({ #'dididit'.  #'dah'. } asRest))).             ((schemeEnv globalRef:  #'test')                  value: ( {}) value: ( (schemeEnv globalRef:  #'listX2DX3Evector')                 ) value: ( nil)).             ((schemeEnv globalRef:  #'section')                  value: ( 6) value: ( 10) value: ( 4)).             ((schemeEnv globalRef:  #'load')                  value: ( 'tmp1')).             ((schemeEnv globalRef:  #'test')                  value: ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')                 ) value: ( #'load') value: ( (schemeEnv globalRef:  #'foo')                 )).             ((schemeEnv globalRef:  #'reportX2Derrs')                  value).            ] value] ) .((schemeEnv globalRef:  #'reportX2Derrs')      value). ((( (((((schemeEnv globalRef:  #'stringX2DX3Enumber')              value: ( '0.0'))) == false) not)         	ifTrue: [((schemeEnv globalRef:  #'inexactX3F')              value: (((schemeEnv globalRef:  #'stringX2DX3Enumber')              value: ( '0.0'))))]         	ifFalse: [ false]) == false) not)     	ifTrue: [((schemeEnv globalRef:  #'testX2Dinexact')          value)]. [ :n |       ((( ((( n) == false) not)             	ifTrue: [((schemeEnv globalRef:  #'exactX3F')                  value: ( n))]             	ifFalse: [ false]) == false) not)         	ifTrue: [((schemeEnv globalRef:  #'testX2Dbignum')              value)]. ] valueWithArguments: {(((schemeEnv globalRef:  #'stringX2DX3Enumber')          value: ( '281474976710655'))). }.((schemeEnv globalRef:  #'newline')      value).((schemeEnv globalRef:  #'display')      value: ( 'To fully test continuations, Scheme 4, and DELAY/FORCE do:')).((schemeEnv globalRef:  #'newline')      value).((schemeEnv globalRef:  #'display')      value: ( '(test-cont) (test-sc4) (test-delay)')).((schemeEnv globalRef:  #'testX2Dsc4')      value).((schemeEnv globalRef:  #'testX2Ddelay')      value).((schemeEnv globalRef:  #'testX2Dcont')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !