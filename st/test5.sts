'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test5.scm'!!SmallScheme methodsFor: 'user'!test5    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 5) value: ( 5)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'numberX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'complexX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'realX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'rationalX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'integerX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'exactX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'inexactX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3D')     .  22.  22.  22.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3D')     .  22.  22.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3D')     .  34.  34.  35.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3D')     .  34.  35.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3E')     .  3.  -6246.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3E')     .  9.  9.  -2424.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3EX3D')     .  3.  -4.  -6246.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3EX3D')     .  9.  9.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3EX3D')     .  8.  9.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3C')     .  -1.  2.  3.  4.  5.  6.  7.  8.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3C')     .  -1.  2.  3.  4.  4.  5.  6.  7.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3CX3D')     .  -1.  2.  3.  4.  5.  6.  7.  8.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'X3CX3D')     .  -1.  2.  3.  4.  4.  5.  6.  7.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3C')     .  1.  3.  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'X3EX3D')     .  1.  3.  2.}).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'zeroX3F')     ) value: ( 00)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'zeroX3F')     ) value: ( 1)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'zeroX3F')     ) value: ( -1)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'zeroX3F')     ) value: ( -100)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'positiveX3F')     ) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'positiveX3F')     ) value: ( -4)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'positiveX3F')     ) value: ( 00)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'negativeX3F')     ) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'negativeX3F')     ) value: ( -4)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'negativeX3F')     ) value: ( 00)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'oddX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'oddX3F')     ) value: ( 2)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'oddX3F')     ) value: ( -4)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'oddX3F')     ) value: ( -1)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'evenX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'evenX3F')     ) value: ( 2)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'evenX3F')     ) value: ( -4)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'evenX3F')     ) value: ( -1)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  38.  (schemeEnv globalRef:  #'max')     .  34.  5.  7.  38.  6.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -24.  (schemeEnv globalRef:  #'min')     .  3.  5.  5.  330.  4.  -24.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  7.  (schemeEnv globalRef:  #'X2B')     .  3.  4.}).((schemeEnv globalRef:  #'test')      value: ( 3) value: ( (schemeEnv globalRef:  #'X2B')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( 00) value: ( (schemeEnv globalRef:  #'X2B')     )).((schemeEnv globalRef:  #'test')      value: ( 4) value: ( (schemeEnv globalRef:  #'X2A')     ) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( 1) value: ( (schemeEnv globalRef:  #'X2A')     )).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -1.  (schemeEnv globalRef:  #'X2D')     .  3.  4.}).((schemeEnv globalRef:  #'test')      value: ( -3) value: ( (schemeEnv globalRef:  #'X2D')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( 7) value: ( (schemeEnv globalRef:  #'abs')     ) value: ( -7)).((schemeEnv globalRef:  #'test')      value: ( 7) value: ( (schemeEnv globalRef:  #'abs')     ) value: ( 7)).((schemeEnv globalRef:  #'test')      value: ( 00) value: ( (schemeEnv globalRef:  #'abs')     ) value: ( 00)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  5.  (schemeEnv globalRef:  #'quotient')     .  35.  7.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -5.  (schemeEnv globalRef:  #'quotient')     .  -35.  7.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -5.  (schemeEnv globalRef:  #'quotient')     .  35.  -7.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  5.  (schemeEnv globalRef:  #'quotient')     .  -35.  -7.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  1.  (schemeEnv globalRef:  #'modulo')     .  13.  4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  1.  (schemeEnv globalRef:  #'remainder')     .  13.  4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  3.  (schemeEnv globalRef:  #'modulo')     .  -13.  4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -1.  (schemeEnv globalRef:  #'remainder')     .  -13.  4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -3.  (schemeEnv globalRef:  #'modulo')     .  13.  -4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  1.  (schemeEnv globalRef:  #'remainder')     .  13.  -4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -1.  (schemeEnv globalRef:  #'modulo')     .  -13.  -4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  -1.  (schemeEnv globalRef:  #'remainder')     .  -13.  -4.}). schemeEnv define:  #'divtest'  as: (        [ :n1 :n2 | ((schemeEnv globalRef:  #'X3D')                value: ( n1) value: (((schemeEnv globalRef:  #'X2B')                value: (((schemeEnv globalRef:  #'X2A')                value: ( n2) value: (((schemeEnv globalRef:  #'quotient')                value: ( n1) value: ( n2))))) value: (((schemeEnv globalRef:  #'remainder')                value: ( n1) value: ( n2))))))] ) .((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'divtest')     .  238.  9.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'divtest')     .  -238.  9.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'divtest')     .  238.  -9.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'divtest')     .  -238.  -9.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  4.  (schemeEnv globalRef:  #'gcd')     .  00.  4.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  4.  (schemeEnv globalRef:  #'gcd')     .  -4.  00.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  4.  (schemeEnv globalRef:  #'gcd')     .  32.  -36.}).((schemeEnv globalRef:  #'test')      value: ( 00) value: ( (schemeEnv globalRef:  #'gcd')     )).((schemeEnv globalRef:  #'test')       valueWithArguments: {  288.  (schemeEnv globalRef:  #'lcm')     .  32.  -36.}).((schemeEnv globalRef:  #'test')      value: ( 1) value: ( (schemeEnv globalRef:  #'lcm')     )). schemeEnv define:  #'testX2Dinexact'    "test-inexact"  as: (        [            [ | f3X2E9 f4X2E0 fX2D3X2E25 fX2E25 f4X2E5 f3X2E5 f0X2E0 f0X2E8 f1X2E0 wto dto lto |                         f3X2E9 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '3.9'))).              f4X2E0 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '4.0'))).              fX2D3X2E25 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '-3.25'))).              fX2E25 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '.25'))).              f4X2E5 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '4.5'))).              f3X2E5 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '3.5'))).              f0X2E0 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '0.0'))).              f0X2E8 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '0.8'))).              f1X2E0 := (((schemeEnv globalRef:  #'stringX2DX3Enumber')                  value: ( '1.0'))).              wto := ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')                 ).              dto := ( (schemeEnv globalRef:  #'displayX2DtestX2Dobj')                 ).              lto := ( (schemeEnv globalRef:  #'loadX2DtestX2Dobj')                 ).                [                 ((schemeEnv globalRef:  #'newline')                      value).                 ((schemeEnv globalRef:  #'display')                      value: ( ';testing inexact numbers; ')).                 ((schemeEnv globalRef:  #'newline')                      value).                 ((schemeEnv globalRef:  #'section')                      value: ( 6) value: ( 5) value: ( 5)).                 ((schemeEnv globalRef:  #'test')                      value: ( true) value: ( (schemeEnv globalRef:  #'inexactX3F')                     ) value: ( f3X2E9)).                 ((schemeEnv globalRef:  #'test')                      value: ( true) value: ( #'inexactX3F') value: (((schemeEnv globalRef:  #'inexactX3F')                      value: (((schemeEnv globalRef:  #'max')                      value: ( f3X2E9) value: ( 4)))))).                 ((schemeEnv globalRef:  #'test')                      value: ( f4X2E0) value: ( #'max') value: (((schemeEnv globalRef:  #'max')                      value: ( f3X2E9) value: ( 4)))).                 ((schemeEnv globalRef:  #'test')                      value: ( f4X2E0) value: ( #'exactX2DX3Einexact') value: (((schemeEnv globalRef:  #'exactX2DX3Einexact')                      value: ( 4)))).                 ((schemeEnv globalRef:  #'test')                      value: (((schemeEnv globalRef:  #'X2D')                      value: ( f4X2E0))) value: ( (schemeEnv globalRef:  #'round')                     ) value: (((schemeEnv globalRef:  #'X2D')                      value: ( f4X2E5)))).                 ((schemeEnv globalRef:  #'test')                      value: (((schemeEnv globalRef:  #'X2D')                      value: ( f4X2E0))) value: ( (schemeEnv globalRef:  #'round')                     ) value: (((schemeEnv globalRef:  #'X2D')                      value: ( f3X2E5)))).                 ((schemeEnv globalRef:  #'test')                      value: (((schemeEnv globalRef:  #'X2D')                      value: ( f4X2E0))) value: ( (schemeEnv globalRef:  #'round')                     ) value: (((schemeEnv globalRef:  #'X2D')                      value: ( f3X2E9)))).                 ((schemeEnv globalRef:  #'test')                      value: ( f0X2E0) value: ( (schemeEnv globalRef:  #'round')                     ) value: ( f0X2E0)).                 ((schemeEnv globalRef:  #'test')                      value: ( f0X2E0) value: ( (schemeEnv globalRef:  #'round')                     ) value: ( fX2E25)).                 ((schemeEnv globalRef:  #'test')                      value: ( f1X2E0) value: ( (schemeEnv globalRef:  #'round')                     ) value: ( f0X2E8)).                 ((schemeEnv globalRef:  #'test')                      value: ( f4X2E0) value: ( (schemeEnv globalRef:  #'round')                     ) value: ( f3X2E5)).                 ((schemeEnv globalRef:  #'test')                      value: ( f4X2E0) value: ( (schemeEnv globalRef:  #'round')                     ) value: ( f4X2E5)).                 (schemeEnv setX21:  #'writeX2DtestX2Dobj' as: ((schemeEnv globalRef:  #'list')                      value: ( fX2E25) value: ( fX2D3X2E25))).                 (schemeEnv setX21:  #'displayX2DtestX2Dobj' as: ((schemeEnv globalRef:  #'list')                      value: ( fX2E25) value: ( fX2D3X2E25))).                 (schemeEnv setX21:  #'loadX2DtestX2Dobj' as: ((schemeEnv globalRef:  #'list')                      value: ( #'define') value: ( #'foo') value: (((schemeEnv globalRef:  #'list')                      value: ( #'quote') value: ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')                     ))))).                 ((schemeEnv globalRef:  #'test')                                       valueWithArguments: {  true.  (schemeEnv globalRef:  #'callX2DwithX2DoutputX2Dfile')                     .  'tmp3'.                  [ :testX2Dfile |  [                       ((schemeEnv globalRef:  #'writeX2Dchar')                            value: ( $;) value: ( testX2Dfile)).                       ((schemeEnv globalRef:  #'display')                            value: ( (schemeEnv globalRef:  #'writeX2DtestX2Dobj')                           ) value: ( testX2Dfile)).                       ((schemeEnv globalRef:  #'newline')                            value: ( testX2Dfile)).                       ((schemeEnv globalRef:  #'write')                            value: ( (schemeEnv globalRef:  #'loadX2DtestX2Dobj')                           ) value: ( testX2Dfile)).                       ((schemeEnv globalRef:  #'outputX2DportX3F')                            value: ( testX2Dfile)).                      ] value].}).                 ((schemeEnv globalRef:  #'checkX2DtestX2Dfile')                      value: ( 'tmp3')).                 (schemeEnv setX21:  #'writeX2DtestX2Dobj' as:  wto).                 (schemeEnv setX21:  #'displayX2DtestX2Dobj' as:  dto).                 (schemeEnv setX21:  #'loadX2DtestX2Dobj' as:  lto).                  [ :x :y |                      ((schemeEnv globalRef:  #'test')                          value: ( true) value: ( #'pentiumX2DfdivX2Dbug') value: (((schemeEnv globalRef:  #'X3E')                          value: ( f1X2E0) value: (((schemeEnv globalRef:  #'X2D')                          value: ( x) value: (((schemeEnv globalRef:  #'X2A')                          value: (((schemeEnv globalRef:  #'X2F')                          value: ( x) value: ( y))) value: ( y)))))))).                 ] valueWithArguments: {(((schemeEnv globalRef:  #'stringX2DX3Enumber')                          value: ( '4195835.0'))). (((schemeEnv globalRef:  #'stringX2DX3Enumber')                          value: ( '3145727.0'))). }.                 ((schemeEnv globalRef:  #'reportX2Derrs')                      value).                ] value.           ] value] ) . schemeEnv define:  #'testX2Dbignum'    "test-bignum"  as: (        [            [ | tb |                         tb := (             [ :n1 :n2 | ((schemeEnv globalRef:  #'X3D')                      value: ( n1) value: (((schemeEnv globalRef:  #'X2B')                      value: (((schemeEnv globalRef:  #'X2A')                      value: ( n2) value: (((schemeEnv globalRef:  #'quotient')                      value: ( n1) value: ( n2))))) value: (((schemeEnv globalRef:  #'remainder')                      value: ( n1) value: ( n2))))))]).                [                 ((schemeEnv globalRef:  #'newline')                      value).                 ((schemeEnv globalRef:  #'display')                      value: ( ';testing bignums; ')).                 ((schemeEnv globalRef:  #'newline')                      value).                 ((schemeEnv globalRef:  #'section')                      value: ( 6) value: ( 5) value: ( 5)).                 ((schemeEnv globalRef:  #'test')                                       valueWithArguments: {  00.  (schemeEnv globalRef:  #'modulo')                     .  -2177452800.  86400.}).                 ((schemeEnv globalRef:  #'test')                                       valueWithArguments: {  00.  (schemeEnv globalRef:  #'modulo')                     .  2177452800.  -86400.}).                 ((schemeEnv globalRef:  #'test')                                       valueWithArguments: {  00.  (schemeEnv globalRef:  #'modulo')                     .  2177452800.  86400.}).                 ((schemeEnv globalRef:  #'test')                                       valueWithArguments: {  00.  (schemeEnv globalRef:  #'modulo')                     .  -2177452800.  -86400.}).                 ((schemeEnv globalRef:  #'test')                      value: ( true) value: ( #'remainder') value: ((tb value: ( 281474976710655) value: ( 65535)))).                 ((schemeEnv globalRef:  #'test')                      value: ( true) value: ( #'remainder') value: ((tb value: ( 281474976710654) value: ( 65535)))).                 ((schemeEnv globalRef:  #'section')                      value: ( 6) value: ( 5) value: ( 6)).                 ((schemeEnv globalRef:  #'test')                      value: ( 281474976710655) value: ( (schemeEnv globalRef:  #'stringX2DX3Enumber')                     ) value: ( '281474976710655')).                 ((schemeEnv globalRef:  #'test')                      value: ( '281474976710655') value: ( (schemeEnv globalRef:  #'numberX2DX3Estring')                     ) value: ( 281474976710655)).                 ((schemeEnv globalRef:  #'reportX2Derrs')                      value).                ] value.           ] value] ) .((schemeEnv globalRef:  #'reportX2Derrs')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !