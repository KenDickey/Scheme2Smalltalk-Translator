'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.4Translated from file /usr/local/src/Squeak/ProtoScheme/scm/lists.scm'!!SmallScheme class methodsFor: 'initialization'!initLists SmallScheme define:  #'pairX3F'    "pair?"  as: (        [ :obj |  ( obj isPair)] ) . SmallScheme define:  #'cons'  as: (        [ :obj1 :obj2 |  ( Pair car: obj1 cdr: obj2)] ) . SmallScheme define:  #'car'  as: (        [ :pair |  ( pair car)] ) . SmallScheme define:  #'cdr'  as: (        [ :pair |  ( pair cdr)] ) . SmallScheme define:  #'setX2DcarX21'    "set-car!!"  as: (        [ :pair :obj |  ( pair setCar: obj)] ) . SmallScheme define:  #'setX2DcdrX21'    "set-cdr!!"  as: (        [ :pair :obj |  ( pair setCdr: obj)] ) . SmallScheme define:  #'caar'  as: (        [ :pair |  ( pair caar)] ) . SmallScheme define:  #'cadr'  as: (        [ :pair |  ( pair cadr)] ) . SmallScheme define:  #'cddr'  as: (        [ :pair |  ( pair cddr)] ) . SmallScheme define:  #'cdar'  as: (        [ :pair |  ( pair cdar)] ) . SmallScheme define:  #'caaar'  as: (        [ :pair |  ( pair caaar)] ) . SmallScheme define:  #'caadr'  as: (        [ :pair |  ( pair caadr)] ) . SmallScheme define:  #'cadar'  as: (        [ :pair |  ( pair cadar)] ) . SmallScheme define:  #'cdaar'  as: (        [ :pair |  ( pair cdaar)] ) . SmallScheme define:  #'caddr'  as: (        [ :pair |  ( pair caddr)] ) . SmallScheme define:  #'cdadr'  as: (        [ :pair |  ( pair cdadr)] ) . SmallScheme define:  #'cdddr'  as: (        [ :pair |  ( pair cdddr)] ) . SmallScheme define:  #'cddar'  as: (        [ :pair |  ( pair cddar)] ) . SmallScheme define:  #'caaaar'  as: (        [ :pair |  ( pair caaadr)] ) . SmallScheme define:  #'caaadr'  as: (        [ :pair |  ( pair caaadr)] ) . SmallScheme define:  #'caadar'  as: (        [ :pair |  ( pair caadar)] ) . SmallScheme define:  #'cadaar'  as: (        [ :pair |  ( pair cadaar)] ) . SmallScheme define:  #'cdaaar'  as: (        [ :pair |  ( pair cdaaar)] ) . SmallScheme define:  #'caaddr'  as: (        [ :pair |  ( pair caaddr)] ) . SmallScheme define:  #'cadadr'  as: (        [ :pair |  ( pair cadadr)] ) . SmallScheme define:  #'cdaadr'  as: (        [ :pair |  ( pair cdaadr)] ) . SmallScheme define:  #'caddar'  as: (        [ :pair |  ( pair caddar)] ) . SmallScheme define:  #'cdadar'  as: (        [ :pair |  ( pair cdadar)] ) . SmallScheme define:  #'cadddr'  as: (        [ :pair |  ( pair cadddr)] ) . SmallScheme define:  #'cdaddr'  as: (        [ :pair |  ( pair cdaddr)] ) . SmallScheme define:  #'cddadr'  as: (        [ :pair |  ( pair cddadr)] ) . SmallScheme define:  #'cdddar'  as: (        [ :pair |  ( pair cdddar)] ) . SmallScheme define:  #'cddddr'  as: (        [ :pair |  ( pair cddddr)] ) . SmallScheme define:  #'nullX3F'    "null?"  as: (        [ :obj |  ( obj == nil)] ) . SmallScheme define:  #'listX3F'    "list?"  as: (        [ :obj |  [ :temp16 |                 ((( temp16) == false) not)                   	ifTrue: [ temp16]                   	ifFalse: [ ((( ( obj isKindOf: Pair)) == false) not)                       	ifTrue: [ ( obj isProper)]                       	ifFalse: [ false]].           ] valueWithArguments: {(((SmallScheme globalRef:  #'nullX3F')                    value: ( obj))). }] ) . SmallScheme define:  #'list'  as: (        [ :things |            things := things asRest.            things] withLastArgRest  ) . SmallScheme define:  #'length'  as: (        [ :list |  ( list length)] ) . SmallScheme define:  #'setX2DlastX2Dpair'    "set-last-pair"  as: (        [ :list :thing |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( list))) == false) not)               	ifTrue: [ thing]               	ifFalse: [ (((((SmallScheme globalRef:  #'not')                        value: (((SmallScheme globalRef:  #'pairX3F')                        value: ( list))))) == false) not)                   	ifTrue: [((SmallScheme globalRef:  #'error')                        value: ( 'set-last-pair: expected a list') value: ( list))]                   	ifFalse: [                    [ | loop |                        loop :=                        [ :result :lastX2Dpair :old |                         ((( [ :temp17 |                                 ((( temp17) == false) not)                                   	ifTrue: [ temp17]                                   	ifFalse: [((SmallScheme globalRef:  #'not')                                        value: (((SmallScheme globalRef:  #'pairX3F')                                        value: ( old))))].                           ] valueWithArguments: {(((SmallScheme globalRef:  #'nullX3F')                                    value: ( old))). }) == false) not)                           	ifTrue: [ [                             ((SmallScheme globalRef:  #'setX2DcdrX21')                                  value: ( lastX2Dpair) value: ( thing)).                              result.                            ] value]                           	ifFalse: [ [ :new |                                 (((((SmallScheme globalRef:  #'nullX3F')                                        value: ( lastX2Dpair))) == false) not)                                   	ifTrue: [(loop value: ( new) value: ( new) value: (((SmallScheme globalRef:  #'cdr')                                        value: ( old))))]                                   	ifFalse: [ [                                     ((SmallScheme globalRef:  #'setX2DcdrX21')                                          value: ( lastX2Dpair) value: ( new)).                                     (loop value: ( result) value: ( new) value: (((SmallScheme globalRef:  #'cdr')                                          value: ( old)))).                                    ] value].                           ] valueWithArguments: {(((SmallScheme globalRef:  #'cons')                                    value: (((SmallScheme globalRef:  #'car')                                    value: ( old))) value: ( nil))). }]                   ].                   loop valueWithArguments: {                        nil.                         nil.                         list. } ] value]]] ) . SmallScheme define:  #'append'  as: (        [ :lists |            lists := lists asRest.            (((((SmallScheme globalRef:  #'nullX3F')                    value: ( lists))) == false) not)               	ifTrue: [ nil]               	ifFalse: [                [ | loop |                    loop :=                    [ :l |                     (((((SmallScheme globalRef:  #'nullX3F')                            value: (((SmallScheme globalRef:  #'cdr')                            value: ( l))))) == false) not)                       	ifTrue: [((SmallScheme globalRef:  #'car')                            value: ( l))]                       	ifFalse: [((SmallScheme globalRef:  #'setX2DlastX2Dpair')                            value: (((SmallScheme globalRef:  #'car')                            value: ( l))) value: ((loop value: (((SmallScheme globalRef:  #'cdr')                            value: ( l))))))]               ].               loop valueWithArguments: {                    lists. } ] value]] withLastArgRest  ) . SmallScheme define:  #'appendX21'    "append!!"  as: (        [ :list1 :list2 |  ( list1 appendX21: list2)] ) . SmallScheme define:  #'reverse'  as: (        [ :list |  ( list reverse)] ) . SmallScheme define:  #'listX2Dtail'    "list-tail"  as: (        [ :list :k |  (((((SmallScheme globalRef:  #'X3CX3D')                    value: ( k) value: ( 00))) == false) not)               	ifTrue: [ list]               	ifFalse: [((SmallScheme globalRef:  #'listX2Dtail')                    value: (((SmallScheme globalRef:  #'cdr')                    value: ( list))) value: (((SmallScheme globalRef:  #'X2D')                    value: ( k) value: ( 1))))]] ) . SmallScheme define:  #'listX2Dref'    "list-ref"  as: (        [ :list :k | ((SmallScheme globalRef:  #'car')                value: (((SmallScheme globalRef:  #'listX2Dtail')                value: ( list) value: ( k))))] ) . SmallScheme define:  #'lastX2Dpair'    "last-pair"  as: (        [ :list |  ( list lastPair)] ) . SmallScheme define:  #'setX2DlastX2DpairX21'    "set-last-pair!!"  as: (        [ :list :thing |  [             ((SmallScheme globalRef:  #'setX2DcdrX21')                  value: (((SmallScheme globalRef:  #'lastX2Dpair')                  value: ( list))) value: ( thing)).              list.            ] value] ) . SmallScheme define:  #'memq'  as: (        [ :obj :list |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( list))) == false) not)               	ifTrue: [ false]               	ifFalse: [ (((((SmallScheme globalRef:  #'eqX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'car')                        value: ( list))))) == false) not)                   	ifTrue: [ list]                   	ifFalse: [((SmallScheme globalRef:  #'memq')                        value: ( obj) value: (((SmallScheme globalRef:  #'cdr')                        value: ( list))))]]] ) . SmallScheme define:  #'memv'  as: (        [ :obj :list |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( list))) == false) not)               	ifTrue: [ false]               	ifFalse: [ (((((SmallScheme globalRef:  #'eqvX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'car')                        value: ( list))))) == false) not)                   	ifTrue: [ list]                   	ifFalse: [((SmallScheme globalRef:  #'memv')                        value: ( obj) value: (((SmallScheme globalRef:  #'cdr')                        value: ( list))))]]] ) . SmallScheme define:  #'member'  as: (        [ :obj :list |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( list))) == false) not)               	ifTrue: [ false]               	ifFalse: [ (((((SmallScheme globalRef:  #'equalX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'car')                        value: ( list))))) == false) not)                   	ifTrue: [ list]                   	ifFalse: [((SmallScheme globalRef:  #'member')                        value: ( obj) value: (((SmallScheme globalRef:  #'cdr')                        value: ( list))))]]] ) . SmallScheme define:  #'assq'  as: (        [ :obj :alist |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( alist))) == false) not)               	ifTrue: [ false]               	ifFalse: [ ( alist detect:               [ :pair | ((SmallScheme globalRef:  #'eqX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'car')                        value: ( pair))))])]] ) . SmallScheme define:  #'assv'  as: (        [ :obj :alist |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( alist))) == false) not)               	ifTrue: [ false]               	ifFalse: [ ( alist detect:               [ :pair | ((SmallScheme globalRef:  #'eqvX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'car')                        value: ( pair))))])]] ) . SmallScheme define:  #'assoc'  as: (        [ :obj :alist |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( alist))) == false) not)               	ifTrue: [ false]               	ifFalse: [ ( alist detect:               [ :pair | ((SmallScheme globalRef:  #'equalX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'car')                        value: ( pair))))])]] ) . SmallScheme define:  #'rassq'  as: (        [ :obj :alist |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( alist))) == false) not)               	ifTrue: [ false]               	ifFalse: [ ( alist detect:               [ :pair | ((SmallScheme globalRef:  #'eqX3F')                        value: ( obj) value: (((SmallScheme globalRef:  #'cdr')                        value: ( pair))))])]] ) .! !