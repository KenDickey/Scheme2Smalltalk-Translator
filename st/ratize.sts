'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.4Translated from file /usr/local/src/Squeak/ProtoScheme/scm/ratize.scm'!!SmallScheme class methodsFor: 'initialization'!initRatize SmallScheme define:  #'findX2DratioX2Dbetween'    "find-ratio-between"  as: (        [ :x :y |             [ | sr |                         sr := (             [ :x :y |  [ :fx :fy |                       (((((SmallScheme globalRef:  #'X3EX3D')                              value: ( fx) value: ( x))) == false) not)                         	ifTrue: [((SmallScheme globalRef:  #'list')                              value: ( fx) value: ( 1))]                         	ifFalse: [ (((((SmallScheme globalRef:  #'X3D')                                  value: ( fx) value: ( fy))) == false) not)                             	ifTrue: [ [ :rat |                                  ((SmallScheme globalRef:  #'list')                                      value: (((SmallScheme globalRef:  #'X2B')                                      value: (((SmallScheme globalRef:  #'cadr')                                      value: ( rat))) value: (((SmallScheme globalRef:  #'X2A')                                      value: ( fx) value: (((SmallScheme globalRef:  #'car')                                      value: ( rat))))))) value: (((SmallScheme globalRef:  #'car')                                      value: ( rat)))).                             ] valueWithArguments: {((sr value: (((SmallScheme globalRef:  #'X2F')                                      value: (((SmallScheme globalRef:  #'X2D')                                      value: ( y) value: ( fy))))) value: (((SmallScheme globalRef:  #'X2F')                                      value: (((SmallScheme globalRef:  #'X2D')                                      value: ( x) value: ( fx))))))). }]                             	ifFalse: [((SmallScheme globalRef:  #'list')                                  value: (((SmallScheme globalRef:  #'X2B')                                  value: ( 1) value: ( fx))) value: ( 1))]].                 ] valueWithArguments: {(((SmallScheme globalRef:  #'inexactX2DX3Eexact')                          value: (((SmallScheme globalRef:  #'floor')                          value: ( x))))). (((SmallScheme globalRef:  #'inexactX2DX3Eexact')                          value: (((SmallScheme globalRef:  #'floor')                          value: ( y))))). }]).                (((((SmallScheme globalRef:  #'X3C')                        value: ( y) value: ( x))) == false) not)                   	ifTrue: [((SmallScheme globalRef:  #'findX2DratioX2Dbetween')                        value: ( y) value: ( x))]                   	ifFalse: [ (((((SmallScheme globalRef:  #'X3EX3D')                            value: ( x) value: ( y))) == false) not)                       	ifTrue: [((SmallScheme globalRef:  #'list')                            value: ( x) value: ( 1))]                       	ifFalse: [ (((((SmallScheme globalRef:  #'positiveX3F')                                value: ( x))) == false) not)                           	ifTrue: [(sr value: ( x) value: ( y))]                           	ifFalse: [ (((((SmallScheme globalRef:  #'negativeX3F')                                    value: ( y))) == false) not)                               	ifTrue: [ [ :rat |                                    ((SmallScheme globalRef:  #'list')                                        value: (((SmallScheme globalRef:  #'X2D')                                        value: (((SmallScheme globalRef:  #'car')                                        value: ( rat))))) value: (((SmallScheme globalRef:  #'cadr')                                        value: ( rat)))).                               ] valueWithArguments: {((sr value: (((SmallScheme globalRef:  #'X2D')                                        value: ( y))) value: (((SmallScheme globalRef:  #'X2D')                                        value: ( x))))). }]                               	ifFalse: [ ({ 00.  1. } asRest)]]]].           ] value] ) . SmallScheme define:  #'findX2Dratio'    "find-ratio"  as: (        [ :x :e | ((SmallScheme globalRef:  #'findX2DratioX2Dbetween')                value: (((SmallScheme globalRef:  #'X2D')                value: ( x) value: ( e))) value: (((SmallScheme globalRef:  #'X2B')                value: ( x) value: ( e))))] ) . SmallScheme define:  #'rationalize'  as: (        [ :x :e | ((SmallScheme globalRef:  #'apply')                value: ( (SmallScheme globalRef:  #'X2F')               ) value: (((SmallScheme globalRef:  #'findX2Dratio')                value: ( x) value: ( e))))] ) .! !