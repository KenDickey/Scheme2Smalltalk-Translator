'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/xlate3.scm'!!SmallScheme methodsFor: 'user'!xlate3    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'makeX2DlistX2DprefixX2Dpredicate'    "make-list-prefix-predicate"  as: (        [ :sym |            [ :exp |  (((((schemeEnv globalRef:  #'pairX3F')                        value: ( exp))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'eqX3F')                        value: (((schemeEnv globalRef:  #'car')                        value: ( exp))) value: ( sym))]                   	ifFalse: [ false]]] ) . schemeEnv define:  #'quoteX3F'    "quote?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'quote')) ) . schemeEnv define:  #'lambdaX3F'    "lambda?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'lambda')) ) . schemeEnv define:  #'caseX2DlambdaX3F'    "case-lambda?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'caseX2Dlambda')) ) . schemeEnv define:  #'setX21X3F'    "set!!?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'setX21')) ) . schemeEnv define:  #'letX3F'    "let?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'let')) ) . schemeEnv define:  #'letX2AX3F'    "let*?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'letX2A')) ) . schemeEnv define:  #'letrecX3F'    "letrec?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'letrec')) ) . schemeEnv define:  #'dynamicX2DletX3F'    "dynamic-let?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'dynamicX2Dlet')) ) . schemeEnv define:  #'dynamicX2DdefineX3F'    "dynamic-define?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'dynamicX2Ddefine')) ) . schemeEnv define:  #'dynamicX2DrefX3F'    "dynamic-ref?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'dynamicX2Dref')) ) . schemeEnv define:  #'dynamicX2DrefX2DwithX2DdefaultX3F'    "dynamic-ref-with-default?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'dynamicX2DrefX2DwithX2Ddefault')) ) . schemeEnv define:  #'dynamicX2DsetX21X3F'    "dynamic-set!!?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'dynamicX2DsetX21')) ) . schemeEnv define:  #'quasiquoteX3F'    "quasiquote?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'quasiquote')) ) . schemeEnv define:  #'unquoteX3F'    "unquote?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'unquote')) ) . schemeEnv define:  #'unquoteX2DsplicingX3F'    "unquote-splicing?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'unquoteX2Dsplicing')) ) . schemeEnv define:  #'namedX2DletX3F'    "named-let?"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'letX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'symbolX3F')                    value: (((schemeEnv globalRef:  #'cadr')                    value: ( exp))))]               	ifFalse: [ false]] ) . schemeEnv define:  #'ifX3F'    "if?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'if')) ) . schemeEnv define:  #'defineX3F'    "define?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'define')) ) . schemeEnv define:  #'beginX3F'    "begin?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'begin')) ) . schemeEnv define:  #'valuesX3F'    "values?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'values')) ) . schemeEnv define:  #'magicX3F'    "magic?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'X3A')) ) . schemeEnv define:  #'smalltalkX2DrefX3F'    "smalltalk-ref?"  as: ( ((schemeEnv globalRef:  #'makeX2DlistX2DprefixX2Dpredicate')            value: ( #'X24')) ) . schemeEnv define:  #'emptyX2DlistX3F'    "empty-list?"  as: (        [ :thing | ((schemeEnv globalRef:  #'eqX3F')                value: ( thing) value: ( nil))] ) . schemeEnv define:  #'keywordX3F'    "keyword?"  as: (        [ :x | ((schemeEnv globalRef:  #'member')                value: ( x) value: ( ({ #'quote'.  #'lambda'.  #'if'.  #'begin'.  #'letrec'.  #'define'. } asRest)))] ) . schemeEnv define:  #'literalX3F'    "literal?"  as: (        [ :exp |  [ :temp90 |                 ((( temp90) == false) not)                   	ifTrue: [ temp90]                   	ifFalse: [ [ :temp91 |                         ((( temp91) == false) not)                           	ifTrue: [ temp91]                           	ifFalse: [((schemeEnv globalRef:  #'quoteX3F')                                value: ( exp))].                   ] valueWithArguments: {(((schemeEnv globalRef:  #'booleanX3F')                            value: ( exp))). }].           ] valueWithArguments: {(((schemeEnv globalRef:  #'numberX3F')                    value: ( exp))). }] ) . schemeEnv define:  #'variableX3F'    "variable?"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'symbolX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'not')                    value: (((schemeEnv globalRef:  #'keywordX3F')                    value: ( exp))))]               	ifFalse: [ false]] ) . schemeEnv define:  #'sameX2DvariableX3F'    "same-variable?"  as: (  (schemeEnv globalRef:  #'eqX3F')            ) . schemeEnv define:  #'lambdaX2Dformals'    "lambda-formals"  as: (  (schemeEnv globalRef:  #'cadr')            ) . schemeEnv define:  #'lambdaX2Dbody'    "lambda-body"  as: (  (schemeEnv globalRef:  #'cddr')            ) . schemeEnv define:  #'setX21X2Dtarget'    "set!!-target"  as: (  (schemeEnv globalRef:  #'cadr')            ) . schemeEnv define:  #'setX21X2DvalueX2Dexp'    "set!!-value-exp"  as: (  (schemeEnv globalRef:  #'caddr')            ) . schemeEnv define:  #'applicationX3F'    "application?"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'pairX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'not')                    value: (((schemeEnv globalRef:  #'keywordX3F')                    value: (((schemeEnv globalRef:  #'car')                    value: ( exp))))))]               	ifFalse: [ false]] ) . schemeEnv define:  #'operator'  as: (  (schemeEnv globalRef:  #'car')            ) . schemeEnv define:  #'operands'  as: (  (schemeEnv globalRef:  #'cdr')            ) . schemeEnv define:  #'ifX2Dpredicate'    "if-predicate"  as: (  (schemeEnv globalRef:  #'cadr')            ) . schemeEnv define:  #'ifX2Dconsequent'    "if-consequent"  as: (  (schemeEnv globalRef:  #'caddr')            ) . schemeEnv define:  #'ifX2Dalternate'    "if-alternate"  as: (  (schemeEnv globalRef:  #'cadddr')            ) . schemeEnv define:  #'ifX2DhasX2DalternateX3F'    "if-has-alternate?"  as: (        [ :exp | ((schemeEnv globalRef:  #'not')                value: (((schemeEnv globalRef:  #'nullX3F')                value: (((schemeEnv globalRef:  #'cdddr')                value: ( exp))))))] ) . schemeEnv define:  #'beginX2Dsubexpressions'    "begin-subexpressions"  as: (  (schemeEnv globalRef:  #'cdr')            ) . schemeEnv define:  #'definitionX2Dname'    "definition-name"  as: (        [ :form |  [ :pattern |                 (((((schemeEnv globalRef:  #'pairX3F')                        value: ( pattern))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'car')                        value: ( pattern))]                   	ifFalse: [ pattern].           ] valueWithArguments: {(((schemeEnv globalRef:  #'cadr')                    value: ( form))). }] ) . schemeEnv define:  #'definitionX2Dbody'    "definition-body"  as: (        [ :form |  [ :pattern |                 (((((schemeEnv globalRef:  #'pairX3F')                        value: ( pattern))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'cons')                        value: ( #'lambda') value: (((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'cdr')                        value: ( pattern))) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                        value: (((schemeEnv globalRef:  #'cddr')                        value: ( form))) value: ( nil))))))]                   	ifFalse: [((schemeEnv globalRef:  #'caddr')                        value: ( form))].           ] valueWithArguments: {(((schemeEnv globalRef:  #'cadr')                    value: ( form))). }] ) . schemeEnv define:  #'mapX2A'    "map*"  as: (        [ :fn :list |            list := list asRest.            (((((schemeEnv globalRef:  #'nullX3F')                    value: (((schemeEnv globalRef:  #'car')                    value: ( list))))) == false) not)               	ifTrue: [ nil]               	ifFalse: [ (((((schemeEnv globalRef:  #'pairX3F')                        value: (((schemeEnv globalRef:  #'car')                        value: ( list))))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'apply')                        value: ( fn) value: (((schemeEnv globalRef:  #'map')                        value: ( (schemeEnv globalRef:  #'car')                       ) value: ( list))))) value: (((schemeEnv globalRef:  #'apply')                        value: ( (schemeEnv globalRef:  #'mapX2A')                       ) value: ( fn) value: (((schemeEnv globalRef:  #'map')                        value: ( (schemeEnv globalRef:  #'cdr')                       ) value: ( list))))))]                   	ifFalse: [((schemeEnv globalRef:  #'apply')                        value: ( fn) value: ( list))]]] withLastArgRest  ) . schemeEnv define:  #'desugar'  as: (        [ :exp :qqX2Dlevel |  ((( [ :temp92 |                     ((( temp92) == false) not)                       	ifTrue: [ temp92]                       	ifFalse: [ [ :temp93 |                             ((( temp93) == false) not)                               	ifTrue: [ temp93]                               	ifFalse: [ [ :temp94 |                                     ((( temp94) == false) not)                                       	ifTrue: [ temp94]                                       	ifFalse: [((schemeEnv globalRef:  #'charX3F')                                            value: ( exp))].                               ] valueWithArguments: {(((schemeEnv globalRef:  #'stringX3F')                                        value: ( exp))). }].                       ] valueWithArguments: {(((schemeEnv globalRef:  #'booleanX3F')                                value: ( exp))). }].               ] valueWithArguments: {(((schemeEnv globalRef:  #'numberX3F')                        value: ( exp))). }) == false) not)               	ifTrue: [ exp]               	ifFalse: [ (((((schemeEnv globalRef:  #'symbolX3F')                        value: ( exp))) == false) not)                   	ifTrue: [ exp]                   	ifFalse: [ (((((schemeEnv globalRef:  #'quoteX3F')                            value: ( exp))) == false) not)                       	ifTrue: [ exp]                       	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                value: ( exp) value: ( nil))) == false) not)                           	ifTrue: [ exp]                           	ifFalse: [ (((((schemeEnv globalRef:  #'lambdaX3F')                                    value: ( exp))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'cons')                                    value: ( #'lambda') value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'lambdaX2Dformals')                                    value: ( exp))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'desugarX2Dbody')                                    value: (((schemeEnv globalRef:  #'lambdaX2Dbody')                                    value: ( exp))) value: ( qqX2Dlevel))) value: ( nil))))))]                               	ifFalse: [ (((((schemeEnv globalRef:  #'defineX3F')                                        value: ( exp))) == false) not)                                   	ifTrue: [((schemeEnv globalRef:  #'cons')                                        value: ( #'define') value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'definitionX2Dname')                                        value: ( exp))) value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'desugar')                                        value: (((schemeEnv globalRef:  #'definitionX2Dbody')                                        value: ( exp))) value: ( qqX2Dlevel))) value: ( nil))))))]                                   	ifFalse: [ (((((schemeEnv globalRef:  #'setX21X3F')                                            value: ( exp))) == false) not)                                       	ifTrue: [((schemeEnv globalRef:  #'cons')                                            value: ( #'setX21') value: (((schemeEnv globalRef:  #'cons')                                            value: (((schemeEnv globalRef:  #'setX21X2Dtarget')                                            value: ( exp))) value: (((schemeEnv globalRef:  #'cons')                                            value: (((schemeEnv globalRef:  #'desugar')                                            value: (((schemeEnv globalRef:  #'setX21X2DvalueX2Dexp')                                            value: ( exp))) value: ( qqX2Dlevel))) value: ( nil))))))]                                       	ifFalse: [ (((((schemeEnv globalRef:  #'beginX3F')                                                value: ( exp))) == false) not)                                           	ifTrue: [((schemeEnv globalRef:  #'desugarX2Dbody')                                                value: (((schemeEnv globalRef:  #'beginX2Dsubexpressions')                                                value: ( exp))) value: ( qqX2Dlevel))]                                           	ifFalse: [ (((((schemeEnv globalRef:  #'ifX3F')                                                    value: ( exp))) == false) not)                                               	ifTrue: [((schemeEnv globalRef:  #'cons')                                                    value: ( #'if') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                                    value: (((schemeEnv globalRef:  #'map')                                                    value: (                                               [ :e | ((schemeEnv globalRef:  #'desugar')                                                        value: ( e) value: ( qqX2Dlevel))]) value: (((schemeEnv globalRef:  #'cdr')                                                    value: ( exp))))) value: ( nil))))]                                               	ifFalse: [ (((((schemeEnv globalRef:  #'namedX2DletX3F')                                                        value: ( exp))) == false) not)                                                   	ifTrue: [((schemeEnv globalRef:  #'cons')                                                        value: ( #'let') value: (((schemeEnv globalRef:  #'cons')                                                        value: (((schemeEnv globalRef:  #'letX2Dname')                                                        value: ( exp))) value: (((schemeEnv globalRef:  #'cons')                                                        value: (((schemeEnv globalRef:  #'map')                                                        value: (                                                   [ :binding | ((schemeEnv globalRef:  #'cons')                                                            value: (((schemeEnv globalRef:  #'letX2Dformal')                                                            value: ( binding))) value: (((schemeEnv globalRef:  #'cons')                                                            value: (((schemeEnv globalRef:  #'desugar')                                                            value: (((schemeEnv globalRef:  #'letX2Dinit')                                                            value: ( binding))) value: ( qqX2Dlevel))) value: ( nil))))]) value: (((schemeEnv globalRef:  #'letX2Dbindings')                                                        value: ( exp))))) value: (((schemeEnv globalRef:  #'cons')                                                        value: (((schemeEnv globalRef:  #'desugarX2Dbody')                                                        value: (((schemeEnv globalRef:  #'letX2Dbody')                                                        value: ( exp))) value: ( qqX2Dlevel))) value: ( nil))))))))]                                                   	ifFalse: [ (((((schemeEnv globalRef:  #'memq')                                                            value: (((schemeEnv globalRef:  #'car')                                                            value: ( exp))) value: ( ({ #'let'.  #'letX2A'.  #'letrec'. } asRest)))) == false) not)                                                       	ifTrue: [((schemeEnv globalRef:  #'cons')                                                            value: (((schemeEnv globalRef:  #'car')                                                            value: ( exp))) value: (((schemeEnv globalRef:  #'cons')                                                            value: (((schemeEnv globalRef:  #'map')                                                            value: (                                                       [ :binding | ((schemeEnv globalRef:  #'cons')                                                                value: (((schemeEnv globalRef:  #'letX2Dformal')                                                                value: ( binding))) value: (((schemeEnv globalRef:  #'cons')                                                                value: (((schemeEnv globalRef:  #'desugar')                                                                value: (((schemeEnv globalRef:  #'letX2Dinit')                                                                value: ( binding))) value: ( qqX2Dlevel))) value: ( nil))))]) value: (((schemeEnv globalRef:  #'letX2Dbindings')                                                            value: ( exp))))) value: (((schemeEnv globalRef:  #'cons')                                                            value: (((schemeEnv globalRef:  #'desugarX2Dbody')                                                            value: (((schemeEnv globalRef:  #'letX2Dbody')                                                            value: ( exp))) value: ( qqX2Dlevel))) value: ( nil))))))]                                                       	ifFalse: [ (((((schemeEnv globalRef:  #'quasiquoteX3F')                                                                value: ( exp))) == false) not)                                                           	ifTrue: [ (((((schemeEnv globalRef:  #'zeroX3F')                                                                    value: ( qqX2Dlevel))) == false) not)                                                               	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dquasiquote')                                                                    value: ( exp) value: ( qqX2Dlevel))]                                                               	ifFalse: [((schemeEnv globalRef:  #'desugar')                                                                    value: (((schemeEnv globalRef:  #'rewrite')                                                                    value: ( exp))) value: ( qqX2Dlevel))]]                                                           	ifFalse: [ (((((schemeEnv globalRef:  #'sugarX3F')                                                                    value: ( exp))) == false) not)                                                               	ifTrue: [((schemeEnv globalRef:  #'desugar')                                                                    value: (((schemeEnv globalRef:  #'rewrite')                                                                    value: ( exp))) value: ( qqX2Dlevel))]                                                               	ifFalse: [((schemeEnv globalRef:  #'mapX2A')                                                                    value: (                                                               [ :e | ((schemeEnv globalRef:  #'desugar')                                                                        value: ( e) value: ( qqX2Dlevel))]) value: ( exp))]]]]]]]]]]]]]] ) . schemeEnv define:  #'setX2DlastX2Dpair'    "set-last-pair"  as: (        [ :list :thing |  (((((schemeEnv globalRef:  #'nullX3F')                    value: ( list))) == false) not)               	ifTrue: [ thing]               	ifFalse: [ (((((schemeEnv globalRef:  #'not')                        value: (((schemeEnv globalRef:  #'pairX3F')                        value: ( list))))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'error')                        value: ( 'set-last-pair: expected a list') value: ( list))]                   	ifFalse: [                    [ | loop |                        loop :=                        [ :result :lastX2Dpair :old |                         ((( [ :temp95 |                                 ((( temp95) == false) not)                                   	ifTrue: [ temp95]                                   	ifFalse: [((schemeEnv globalRef:  #'not')                                        value: (((schemeEnv globalRef:  #'pairX3F')                                        value: ( old))))].                           ] valueWithArguments: {(((schemeEnv globalRef:  #'nullX3F')                                    value: ( old))). }) == false) not)                           	ifTrue: [ [                             ((schemeEnv globalRef:  #'setX2DcdrX21')                                  value: ( lastX2Dpair) value: ( thing)).                              result.                            ] value]                           	ifFalse: [ [ :new |                                 (((((schemeEnv globalRef:  #'nullX3F')                                        value: ( lastX2Dpair))) == false) not)                                   	ifTrue: [(loop value: ( new) value: ( new) value: (((schemeEnv globalRef:  #'cdr')                                        value: ( old))))]                                   	ifFalse: [ [                                     ((schemeEnv globalRef:  #'setX2DcdrX21')                                          value: ( lastX2Dpair) value: ( new)).                                     (loop value: ( result) value: ( new) value: (((schemeEnv globalRef:  #'cdr')                                          value: ( old)))).                                    ] value].                           ] valueWithArguments: {(((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'car')                                    value: ( old))) value: ( nil))). }]                   ].                   loop valueWithArguments: {                        nil.                         nil.                         list. } ] value]]] ) . schemeEnv define:  #'X25quasiquote'    "%quasiquote"  as: (  ({ #'quote'.  #'quasiquote'. } asRest) ) . schemeEnv define:  #'X25unquote'    "%unquote"  as: (  ({ #'quote'.  #'unquote'. } asRest) ) . schemeEnv define:  #'X25unquoteX2Dsplicing'    "%unquote-splicing"  as: (  ({ #'quote'.  #'unquoteX2Dsplicing'. } asRest) ) . schemeEnv define:  #'rewriteX2Dquasiquote'    "rewrite-quasiquote"  as: (        [ :exp :level |  (((((schemeEnv globalRef:  #'X3D')                    value: ( level) value: ( 00))) == false) not)               	ifTrue: [ (((((schemeEnv globalRef:  #'vectorX3F')                        value: (((schemeEnv globalRef:  #'cadr')                        value: ( exp))))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'cons')                        value: ( #'listX2DX3Evector') value: (((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                        value: (((schemeEnv globalRef:  #'vectorX2DX3Elist')                        value: (((schemeEnv globalRef:  #'cadr')                        value: ( exp))))) value: (((schemeEnv globalRef:  #'X2B')                        value: ( level) value: ( 1))))) value: ( nil))))]                   	ifFalse: [((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                        value: (((schemeEnv globalRef:  #'cadr')                        value: ( exp))) value: (((schemeEnv globalRef:  #'X2B')                        value: ( level) value: ( 1))))]]               	ifFalse: [((schemeEnv globalRef:  #'cons')                    value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                    value: ( (schemeEnv globalRef:  #'X25quasiquote')                   ) value: (((schemeEnv globalRef:  #'cons')                    value: (((schemeEnv globalRef:  #'cons')                    value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                    value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                    value: (((schemeEnv globalRef:  #'cadr')                    value: ( exp))) value: (((schemeEnv globalRef:  #'X2B')                    value: ( level) value: ( 1))))) value: (((schemeEnv globalRef:  #'cons')                    value: (((schemeEnv globalRef:  #'cons')                    value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                    value: ( nil) value: ( nil))))) value: ( nil))))))) value: ( nil))))))]] ) . schemeEnv define:  #'buildX2DquasiX2Dlist'    "build-quasi-list"  as: (        [ :thing :level |  (((((schemeEnv globalRef:  #'not')                    value: (((schemeEnv globalRef:  #'pairX3F')                    value: ( thing))))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'cons')                    value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                    value: ( thing) value: ( nil))))]               	ifFalse: [ (((((schemeEnv globalRef:  #'pairX3F')                        value: (((schemeEnv globalRef:  #'car')                        value: ( thing))))) == false) not)                   	ifTrue: [ [ :sublist |                         (((((schemeEnv globalRef:  #'quasiquoteX3F')                                value: ( sublist))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'cons')                                value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'rewriteX2Dquasiquote')                                value: ( sublist) value: ( level))) value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                value: (((schemeEnv globalRef:  #'cdr')                                value: ( thing))) value: ( level))) value: ( nil))))))]                           	ifFalse: [ (((((schemeEnv globalRef:  #'unquoteX3F')                                    value: ( sublist))) == false) not)                               	ifTrue: [ (((((schemeEnv globalRef:  #'X3D')                                        value: ( level) value: ( 1))) == false) not)                                   	ifTrue: [((schemeEnv globalRef:  #'cons')                                        value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'desugar')                                        value: (((schemeEnv globalRef:  #'cadr')                                        value: ( sublist))) value: (((schemeEnv globalRef:  #'X2D')                                        value: ( level) value: ( 1))))) value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                        value: (((schemeEnv globalRef:  #'cdr')                                        value: ( thing))) value: ( level))) value: ( nil))))))]                                   	ifFalse: [((schemeEnv globalRef:  #'cons')                                        value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                        value: ( sublist) value: ( level))) value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                        value: (((schemeEnv globalRef:  #'cdr')                                        value: ( thing))) value: ( level))) value: ( nil))))))]]                               	ifFalse: [ (((((schemeEnv globalRef:  #'unquoteX2DsplicingX3F')                                        value: ( sublist))) == false) not)                                   	ifTrue: [ (((((schemeEnv globalRef:  #'X3D')                                            value: ( level) value: ( 1))) == false) not)                                       	ifTrue: [((schemeEnv globalRef:  #'cons')                                            value: ( #'setX2DlastX2Dpair') value: (((schemeEnv globalRef:  #'cons')                                            value: (((schemeEnv globalRef:  #'desugar')                                            value: (((schemeEnv globalRef:  #'cadr')                                            value: ( sublist))) value: (((schemeEnv globalRef:  #'X2D')                                            value: ( level) value: ( 1))))) value: (((schemeEnv globalRef:  #'cons')                                            value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                            value: (((schemeEnv globalRef:  #'cdr')                                            value: ( thing))) value: ( level))) value: ( nil))))))]                                       	ifFalse: [((schemeEnv globalRef:  #'cons')                                            value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                            value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                            value: ( sublist) value: (((schemeEnv globalRef:  #'X2D')                                            value: ( level) value: ( 1))))) value: (((schemeEnv globalRef:  #'cons')                                            value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                            value: (((schemeEnv globalRef:  #'cdr')                                            value: ( thing))) value: ( level))) value: ( nil))))))]]                                   	ifFalse: [((schemeEnv globalRef:  #'cons')                                        value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                        value: ( sublist) value: ( level))) value: (((schemeEnv globalRef:  #'cons')                                        value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                        value: (((schemeEnv globalRef:  #'cdr')                                        value: ( thing))) value: ( level))) value: ( nil))))))]]].                   ] valueWithArguments: {(((schemeEnv globalRef:  #'car')                            value: ( thing))). }]                   	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                            value: (((schemeEnv globalRef:  #'car')                            value: ( thing))) value: ( #'unquote'))) == false) not)                       	ifTrue: [ (((((schemeEnv globalRef:  #'X3D')                                value: ( level) value: ( 1))) == false) not)                           	ifTrue: [ (((((schemeEnv globalRef:  #'pairX3F')                                    value: (((schemeEnv globalRef:  #'cdr')                                    value: ( thing))))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'desugar')                                    value: (((schemeEnv globalRef:  #'cadr')                                    value: ( thing))) value: (((schemeEnv globalRef:  #'X2D')                                    value: ( level) value: ( 1))))]                               	ifFalse: [((schemeEnv globalRef:  #'cdr')                                    value: ( thing))]]                           	ifFalse: [((schemeEnv globalRef:  #'cons')                                value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                value: ( (schemeEnv globalRef:  #'X25unquote')                               ) value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'cons')                                value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                                value: (((schemeEnv globalRef:  #'cadr')                                value: ( thing))) value: (((schemeEnv globalRef:  #'X2D')                                value: ( level) value: ( 1))))) value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'cons')                                value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                                value: ( nil) value: ( nil))))) value: ( nil))))))) value: ( nil))))))]]                       	ifFalse: [((schemeEnv globalRef:  #'cons')                            value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'cons')                            value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'car')                            value: ( thing))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'buildX2DquasiX2Dlist')                            value: (((schemeEnv globalRef:  #'cdr')                            value: ( thing))) value: ( level))) value: ( nil))))))]]]] ) . schemeEnv define:  #'desugarX2Dbody'    "desugar-body"  as: (        [ :body :qqX2Dlevel |             [ | loop |                loop :=                [ :form :forms :defines :others |                 (((((schemeEnv globalRef:  #'defineX3F')                        value: ( form))) == false) not)                   	ifTrue: [ (((((schemeEnv globalRef:  #'nullX3F')                            value: ( forms))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'error')                            value: ( 'expected body') value: ( body))]                       	ifFalse: [(loop                        valueWithArguments: { ((schemeEnv globalRef:  #'car')                            value: ( forms)). ((schemeEnv globalRef:  #'cdr')                            value: ( forms)). ((schemeEnv globalRef:  #'cons')                            value: ( form) value: ( defines)).  others.})]]                   	ifFalse: [ (((((schemeEnv globalRef:  #'nullX3F')                            value: ( forms))) == false) not)                       	ifTrue: [ (((((schemeEnv globalRef:  #'nullX3F')                                value: ( defines))) == false) not)                           	ifTrue: [ [ :body |                                 (((((schemeEnv globalRef:  #'nullX3F')                                        value: (((schemeEnv globalRef:  #'cdr')                                        value: ( body))))) == false) not)                                   	ifTrue: [((schemeEnv globalRef:  #'car')                                        value: ( body))]                                   	ifFalse: [((schemeEnv globalRef:  #'cons')                                        value: ( #'begin') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                        value: ( body) value: ( nil))))].                           ] valueWithArguments: {(((schemeEnv globalRef:  #'map')                                    value: (                               [ :exp | ((schemeEnv globalRef:  #'desugar')                                        value: ( exp) value: ( qqX2Dlevel))]) value: ( body))). }]                           	ifFalse: [((schemeEnv globalRef:  #'cons')                                value: ( #'letrec') value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'map')                                value: (                           [ :def | ((schemeEnv globalRef:  #'list')                                    value: (((schemeEnv globalRef:  #'definitionX2Dname')                                    value: ( def))) value: (((schemeEnv globalRef:  #'desugar')                                    value: (((schemeEnv globalRef:  #'definitionX2Dbody')                                    value: ( def))) value: ( qqX2Dlevel))))]) value: (((schemeEnv globalRef:  #'reverse')                                value: ( defines))))) value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'desugarX2Dbody')                                value: (((schemeEnv globalRef:  #'reverse')                                value: (((schemeEnv globalRef:  #'cons')                                value: ( form) value: ( others))))) value: ( qqX2Dlevel))) value: ( nil))))))]]                       	ifFalse: [(loop                        valueWithArguments: { ((schemeEnv globalRef:  #'car')                            value: ( forms)). ((schemeEnv globalRef:  #'cdr')                            value: ( forms)).  defines. ((schemeEnv globalRef:  #'cons')                            value: ( form) value: ( others)).})]]           ].           loop valueWithArguments: {               ((schemeEnv globalRef:  #'car')                    value: ( body)).                ((schemeEnv globalRef:  #'cdr')                    value: ( body)).                 nil.                 nil. } ] value] ) . schemeEnv define:  #'sugarX3F'    "sugar?"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'pairX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'member')                    value: (((schemeEnv globalRef:  #'car')                    value: ( exp))) value: ( ({ #'and'.  #'or'.  #'cond'.  #'do'.  #'case'.  #'delay'.  #'string'.  #'vector'. } asRest)))]               	ifFalse: [ false]] ) . schemeEnv define:  #'unspecified'  as: (  'Unspecified' ) . schemeEnv define:  #'rewrite'  as: (        [ :exp |  (((((schemeEnv globalRef:  #'not')                    value: (((schemeEnv globalRef:  #'pairX3F')                    value: ( exp))))) == false) not)               	ifTrue: [ exp]               	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                        value: (((schemeEnv globalRef:  #'car')                        value: ( exp))) value: ( #'and'))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dand')                        value: ( exp))]                   	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                            value: (((schemeEnv globalRef:  #'car')                            value: ( exp))) value: ( #'or'))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dor')                            value: ( exp))]                       	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                value: (((schemeEnv globalRef:  #'car')                                value: ( exp))) value: ( #'cond'))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dcond')                                value: ( exp))]                           	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                    value: (((schemeEnv globalRef:  #'car')                                    value: ( exp))) value: ( #'do'))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Ddo')                                    value: ( exp))]                               	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                        value: (((schemeEnv globalRef:  #'car')                                        value: ( exp))) value: ( #'case'))) == false) not)                                   	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dcase')                                        value: ( exp))]                                   	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                            value: (((schemeEnv globalRef:  #'car')                                            value: ( exp))) value: ( #'delay'))) == false) not)                                       	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Ddelay')                                            value: ( exp))]                                       	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                                value: (((schemeEnv globalRef:  #'car')                                                value: ( exp))) value: ( #'string'))) == false) not)                                           	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dstring')                                                value: ( exp))]                                           	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                                    value: (((schemeEnv globalRef:  #'car')                                                    value: ( exp))) value: ( #'vector'))) == false) not)                                               	ifTrue: [((schemeEnv globalRef:  #'rewriteX2Dvector')                                                    value: ( exp))]                                               	ifFalse: [ exp]]]]]]]]]] ) . schemeEnv define:  #'rewriteX2Dand'    "rewrite-and"  as: (        [ :exp |  [ :conjuncts |                 (((((schemeEnv globalRef:  #'nullX3F')                        value: ( conjuncts))) == false) not)                   	ifTrue: [ true]                   	ifFalse: [ (((((schemeEnv globalRef:  #'nullX3F')                            value: (((schemeEnv globalRef:  #'cdr')                            value: ( conjuncts))))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'car')                            value: ( conjuncts))]                       	ifFalse: [((schemeEnv globalRef:  #'cons')                            value: ( #'if') value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'car')                            value: ( conjuncts))) value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'cons')                            value: ( #'and') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                            value: (((schemeEnv globalRef:  #'cdr')                            value: ( conjuncts))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')                            value: ( false) value: ( nil))))))))]].           ] valueWithArguments: {(((schemeEnv globalRef:  #'cdr')                    value: ( exp))). }] ) . schemeEnv define:  #'rewriteX2Dor'    "rewrite-or"  as: (        [ :exp |  [ :disjuncts |                 (((((schemeEnv globalRef:  #'nullX3F')                        value: ( disjuncts))) == false) not)                   	ifTrue: [ false]                   	ifFalse: [ (((((schemeEnv globalRef:  #'nullX3F')                            value: (((schemeEnv globalRef:  #'cdr')                            value: ( disjuncts))))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'car')                            value: ( disjuncts))]                       	ifFalse: [ [ :temp :test :others |                            ((schemeEnv globalRef:  #'cons')                                value: ( #'let') value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'cons')                                value: ( temp) value: (((schemeEnv globalRef:  #'cons')                                value: ( test) value: ( nil))))) value: ( nil))) value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'cons')                                value: ( #'if') value: (((schemeEnv globalRef:  #'cons')                                value: ( temp) value: (((schemeEnv globalRef:  #'cons')                                value: ( temp) value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'cons')                                value: ( #'or') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                value: ( others) value: ( nil))))) value: ( nil))))))))) value: ( nil)))))).                       ] valueWithArguments: {(((schemeEnv globalRef:  #'gensym')                                value: ( 'temp'))). (((schemeEnv globalRef:  #'car')                                value: ( disjuncts))). (((schemeEnv globalRef:  #'cdr')                                value: ( disjuncts))). }]].           ] valueWithArguments: {(((schemeEnv globalRef:  #'cdr')                    value: ( exp))). }] ) . schemeEnv define:  #'rewriteX2Dcond'    "rewrite-cond"  as: (        [ :exp |  [ :clauses |                 (((((schemeEnv globalRef:  #'nullX3F')                        value: ( clauses))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'cons')                        value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                        value: ( (schemeEnv globalRef:  #'unspecified')                       ) value: ( nil))))]                   	ifFalse: [ (((((schemeEnv globalRef:  #'nullX3F')                            value: (((schemeEnv globalRef:  #'cdar')                            value: ( clauses))))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'cons')                            value: ( #'or') value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'caar')                            value: ( clauses))) value: (((schemeEnv globalRef:  #'cons')                            value: (((schemeEnv globalRef:  #'cons')                            value: ( #'cond') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                            value: (((schemeEnv globalRef:  #'cdr')                            value: ( clauses))) value: ( nil))))) value: ( nil))))))]                       	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                value: (((schemeEnv globalRef:  #'cadar')                                value: ( clauses))) value: ( #'X3DX3E'))) == false) not)                           	ifTrue: [ [ :result :test :recipient :others |                                ((schemeEnv globalRef:  #'cons')                                    value: ( #'let') value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( result) value: (((schemeEnv globalRef:  #'cons')                                    value: ( test) value: ( nil))))) value: ( nil))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'if') value: (((schemeEnv globalRef:  #'cons')                                    value: ( result) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( recipient) value: (((schemeEnv globalRef:  #'cons')                                    value: ( result) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'cond') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                    value: ( others) value: ( nil))))) value: ( nil))))))))) value: ( nil)))))).                           ] valueWithArguments: {(((schemeEnv globalRef:  #'gensym')                                    value: ( #'result'))). (((schemeEnv globalRef:  #'caar')                                    value: ( clauses))). (((schemeEnv globalRef:  #'caddar')                                    value: ( clauses))). (((schemeEnv globalRef:  #'cdr')                                    value: ( clauses))). }]                           	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                    value: (((schemeEnv globalRef:  #'caar')                                    value: ( clauses))) value: ( #'else'))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'cons')                                    value: ( #'begin') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                    value: (((schemeEnv globalRef:  #'cdar')                                    value: ( clauses))) value: ( nil))))]                               	ifFalse: [((schemeEnv globalRef:  #'cons')                                    value: ( #'if') value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'caar')                                    value: ( clauses))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'begin') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                    value: (((schemeEnv globalRef:  #'cdar')                                    value: ( clauses))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'cond') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                    value: (((schemeEnv globalRef:  #'cdr')                                    value: ( clauses))) value: ( nil))))) value: ( nil))))))))]]]].           ] valueWithArguments: {(((schemeEnv globalRef:  #'cdr')                    value: ( exp))). }] ) . schemeEnv define:  #'rewriteX2Ddo'    "rewrite-do"  as: (        [ :exp |  [ :loopX2Dname :locals :exits :commands |                 [ :varX2Dinits :steps :test :exps |                    ((schemeEnv globalRef:  #'cons')                        value: ( #'let') value: (((schemeEnv globalRef:  #'cons')                        value: ( loopX2Dname) value: (((schemeEnv globalRef:  #'cons')                        value: ( varX2Dinits) value: (((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'cons')                        value: ( #'if') value: (((schemeEnv globalRef:  #'cons')                        value: ( test) value: (((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'cons')                        value: ( #'begin') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                        value: ( exps) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'cons')                        value: ( #'begin') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                        value: ( commands) value: (((schemeEnv globalRef:  #'cons')                        value: (((schemeEnv globalRef:  #'cons')                        value: ( loopX2Dname) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                        value: ( steps) value: ( nil))))) value: ( nil))))))) value: ( nil))))))))) value: ( nil)))))))).               ] valueWithArguments: {(((schemeEnv globalRef:  #'map')                        value: (                   [ :vis | ((schemeEnv globalRef:  #'list')                            value: (((schemeEnv globalRef:  #'car')                            value: ( vis))) value: (((schemeEnv globalRef:  #'cadr')                            value: ( vis))))]) value: ( locals))). (((schemeEnv globalRef:  #'map')                        value: (                   [ :vis |  (((((schemeEnv globalRef:  #'nullX3F')                                value: (((schemeEnv globalRef:  #'cddr')                                value: ( vis))))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'car')                                value: ( vis))]                           	ifFalse: [((schemeEnv globalRef:  #'caddr')                                value: ( vis))]]) value: ( locals))). (((schemeEnv globalRef:  #'car')                        value: ( exits))). (((schemeEnv globalRef:  #'cdr')                        value: ( exits))). }.           ] valueWithArguments: {(((schemeEnv globalRef:  #'gensym')                    value: ( 'do-loop'))). (((schemeEnv globalRef:  #'cadr')                    value: ( exp))). (((schemeEnv globalRef:  #'caddr')                    value: ( exp))). (((schemeEnv globalRef:  #'cdddr')                    value: ( exp))). }] ) . schemeEnv define:  #'rewriteX2Dcase'    "rewrite-case"  as: (        [ :exp |  [ :clauses |                 (((((schemeEnv globalRef:  #'nullX3F')                        value: ( clauses))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'cons')                        value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                        value: ( (schemeEnv globalRef:  #'unspecified')                       ) value: ( nil))))]                   	ifFalse: [ (((((schemeEnv globalRef:  #'nullX3F')                            value: (((schemeEnv globalRef:  #'cdr')                            value: ( clauses))))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'car')                            value: ( clauses))]                       	ifFalse: [ (((((schemeEnv globalRef:  #'eqX3F')                                value: (((schemeEnv globalRef:  #'caadr')                                value: ( clauses))) value: ( #'else'))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'cons')                                value: ( #'begin') value: (((schemeEnv globalRef:  #'cons')                                value: (((schemeEnv globalRef:  #'car')                                value: ( clauses))) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                value: (((schemeEnv globalRef:  #'cdadr')                                value: ( clauses))) value: ( nil))))))]                           	ifFalse: [ [ :keyX2Dname :key :datums :exps :others |                                ((schemeEnv globalRef:  #'cons')                                    value: ( #'let') value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( keyX2Dname) value: (((schemeEnv globalRef:  #'cons')                                    value: ( key) value: ( nil))))) value: ( nil))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'if') value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'memv') value: (((schemeEnv globalRef:  #'cons')                                    value: ( keyX2Dname) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')                                    value: ( datums) value: ( nil))))) value: ( nil))))))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'begin') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                    value: ( exps) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: ( #'case') value: (((schemeEnv globalRef:  #'cons')                                    value: ( keyX2Dname) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                    value: ( others) value: ( nil))))))) value: ( nil))))))))) value: ( nil)))))).                           ] valueWithArguments: {(((schemeEnv globalRef:  #'gensym')                                    value: ( #'key'))). (((schemeEnv globalRef:  #'car')                                    value: ( clauses))). (((schemeEnv globalRef:  #'caadr')                                    value: ( clauses))). (((schemeEnv globalRef:  #'cdadr')                                    value: ( clauses))). (((schemeEnv globalRef:  #'cddr')                                    value: ( clauses))). }]]].           ] valueWithArguments: {(((schemeEnv globalRef:  #'cdr')                    value: ( exp))). }] ) . schemeEnv define:  #'rewriteX2Ddelay'    "rewrite-delay"  as: (        [ :exp | ((schemeEnv globalRef:  #'cons')                value: ( #'makeX2Dpromise') value: (((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'cons')                value: ( #'lambda') value: (((schemeEnv globalRef:  #'cons')                value: ( nil) value: (((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'cadr')                value: ( exp))) value: ( nil))))))) value: ( nil))))] ) . schemeEnv define:  #'rewriteX2Dlist'    "rewrite-list"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'nullX3F')                    value: (((schemeEnv globalRef:  #'cdr')                    value: ( exp))))) == false) not)               	ifTrue: [ ({ #'quote'.  nil. } asRest)]               	ifFalse: [((schemeEnv globalRef:  #'cons')                    value: ( #'cons') value: (((schemeEnv globalRef:  #'cons')                    value: (((schemeEnv globalRef:  #'cadr')                    value: ( exp))) value: (((schemeEnv globalRef:  #'cons')                    value: (((schemeEnv globalRef:  #'cons')                    value: ( #'list') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                    value: (((schemeEnv globalRef:  #'cddr')                    value: ( exp))) value: ( nil))))) value: ( nil))))))]] ) . schemeEnv define:  #'rewriteX2Dstring'    "rewrite-string"  as: (        [ :exp | ((schemeEnv globalRef:  #'cons')                value: ( #'listX2DX3Estring') value: (((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'cons')                value: ( #'list') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                value: (((schemeEnv globalRef:  #'cdr')                value: ( exp))) value: ( nil))))) value: ( nil))))] ) . schemeEnv define:  #'rewriteX2Dvector'    "rewrite-vector"  as: (        [ :exp | ((schemeEnv globalRef:  #'cons')                value: ( #'listX2DX3Evector') value: (((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'cons')                value: ( #'list') value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                value: (((schemeEnv globalRef:  #'cdr')                value: ( exp))) value: ( nil))))) value: ( nil))))] ) .! !