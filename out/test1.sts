'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test1.scm'!!SmallScheme methodsFor: 'user'!test1    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 2) value: ( 1)). ({ #'X2B'.  #'X2D'.  #'X2EX2EX2E'.  #'X21X2EX2E'.  #'X24X2EX2B'.  #'X25X2EX2D'.  #'X26X2EX21'.  #'X2AX2EX3A'.  #'X2FX3AX2E'.  #'X3AX2BX2E'.  #'X3CX2DX2E'.  #'X3DX2E'.  #'X3EX2E'.  #'X3FX2E'.  #'X7EX2E'.  #'X5FX2E'.  #'X5EX2E'. } asRest).((schemeEnv globalRef:  #'section')      value: ( 3) value: ( 4)). schemeEnv define:  #'disjointX2DtypeX2Dfunctions'    "disjoint-type-functions"  as: ( ((schemeEnv globalRef:  #'list')                   valueWithArguments: {  (schemeEnv globalRef:  #'booleanX3F')           .  (schemeEnv globalRef:  #'charX3F')           .  (schemeEnv globalRef:  #'nullX3F')           .  (schemeEnv globalRef:  #'numberX3F')           .  (schemeEnv globalRef:  #'pairX3F')           .  (schemeEnv globalRef:  #'procedureX3F')           .  (schemeEnv globalRef:  #'stringX3F')           .  (schemeEnv globalRef:  #'symbolX3F')           .  (schemeEnv globalRef:  #'vectorX3F')           .}) ) . schemeEnv define:  #'typeX2Dexamples'    "type-examples"  as: ( ((schemeEnv globalRef:  #'list')                   valueWithArguments: {  true.  false.  $a.  nil.  9739.  ({ #'test'. } asRest).  (schemeEnv globalRef:  #'recordX2Derror')           .  'test'.  ''.  #'test'.  {}.  { #'a'.  #'b'.  #'c'. }.}) ) . schemeEnv define:  #'i'  as: (  1 ) .((schemeEnv globalRef:  #'forX2Deach')      value: ( [ :x |  [       ((schemeEnv globalRef:  #'display')            value: (((schemeEnv globalRef:  #'makeX2Dstring')            value: ( (schemeEnv globalRef:  #'i')           ) value: ( $ )))).       (schemeEnv setX21:  #'i' as: ((schemeEnv globalRef:  #'X2B')            value: ( 3) value: ( (schemeEnv globalRef:  #'i')           ))).       ((schemeEnv globalRef:  #'write')            value: ( x)).       ((schemeEnv globalRef:  #'newline')            value).      ] value]) value: ( (schemeEnv globalRef:  #'disjointX2DtypeX2Dfunctions')     )). schemeEnv define:  #'typeX2Dmatrix'    "type-matrix"  as: ( ((schemeEnv globalRef:  #'map')            value: (       [ :x |  [ :t |                 [                 ((schemeEnv globalRef:  #'write')                      value: ( t)).                 ((schemeEnv globalRef:  #'write')                      value: ( x)).                 ((schemeEnv globalRef:  #'newline')                      value).                  t.                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'map')                    value: (               [ :f | (f value: ( x))]) value: ( (schemeEnv globalRef:  #'disjointX2DtypeX2Dfunctions')                   ))). }]) value: ( (schemeEnv globalRef:  #'typeX2Dexamples')           )) ) .((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 1) value: ( 2)).((schemeEnv globalRef:  #'test')      value: ( ({ #'quote'.  #'a'. } asRest)) value: ( #'quote') value: ( ({ #'quote'.  #'a'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( ({ #'quote'.  #'a'. } asRest)) value: ( #'quote') value: ( ({ #'quote'.  #'a'. } asRest))).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 1) value: ( 3)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  12.  ((( false) == false) not)     	ifTrue: [ (schemeEnv globalRef:  #'X2B')         ]     	ifFalse: [ (schemeEnv globalRef:  #'X2A')         ].  3.  4.}).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 1) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( 8) value: ( [ :x | ((schemeEnv globalRef:  #'X2B')          value: ( x) value: ( x))]) value: ( 4)). schemeEnv define:  #'reverseX2Dsubtract'    "reverse-subtract"  as: (        [ :x :y | ((schemeEnv globalRef:  #'X2D')                value: ( y) value: ( x))] ) .((schemeEnv globalRef:  #'test')       valueWithArguments: {  3.  (schemeEnv globalRef:  #'reverseX2Dsubtract')     .  7.  10.}). schemeEnv define:  #'add4'  as: (  [ :x |                       [ :y | ((schemeEnv globalRef:  #'X2B')                    value: ( x) value: ( y))].       ] valueWithArguments: {( 4). } ) .((schemeEnv globalRef:  #'test')      value: ( 10) value: ( (schemeEnv globalRef:  #'add4')     ) value: ( 6)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ 3.  4.  5.  6. } asRest).  [ :x |      x := x asRest.      x] withLastArgRest .  3.  4.  5.  6.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ 5.  6. } asRest).  [ :x :y :z |      z := z asRest.      z] withLastArgRest .  3.  4.  5.  6.}).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 1) value: ( 5)).((schemeEnv globalRef:  #'test')      value: ( #'yes') value: ( #'if') value: ( (((((schemeEnv globalRef:  #'X3E')          value: ( 3) value: ( 2))) == false) not)     	ifTrue: [ #'yes']     	ifFalse: [ #'no'])).((schemeEnv globalRef:  #'test')      value: ( #'no') value: ( #'if') value: ( (((((schemeEnv globalRef:  #'X3E')          value: ( 2) value: ( 3))) == false) not)     	ifTrue: [ #'yes']     	ifFalse: [ #'no'])).((schemeEnv globalRef:  #'test')      value: ( 1) value: ( #'if') value: ( (((((schemeEnv globalRef:  #'X3E')          value: ( 3) value: ( 2))) == false) not)     	ifTrue: [((schemeEnv globalRef:  #'X2D')          value: ( 3) value: ( 2))]     	ifFalse: [((schemeEnv globalRef:  #'X2B')          value: ( 3) value: ( 2))])).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 1) value: ( 6)). schemeEnv define:  #'x'  as: (  2 ) .((schemeEnv globalRef:  #'test')      value: ( 3) value: ( #'define') value: (((schemeEnv globalRef:  #'X2B')      value: ( (schemeEnv globalRef:  #'x')     ) value: ( 1)))).(schemeEnv setX21:  #'x' as:  4).((schemeEnv globalRef:  #'test')      value: ( 5) value: ( #'setX21') value: (((schemeEnv globalRef:  #'X2B')      value: ( (schemeEnv globalRef:  #'x')     ) value: ( 1)))).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 2) value: ( 1)).((schemeEnv globalRef:  #'test')      value: ( #'greater') value: ( #'cond') value: ( (((((schemeEnv globalRef:  #'X3E')          value: ( 3) value: ( 2))) == false) not)     	ifTrue: [ #'greater']     	ifFalse: [ (((((schemeEnv globalRef:  #'X3C')              value: ( 3) value: ( 2))) == false) not)         	ifTrue: [ #'less']         	ifFalse: [ 'Unspecified']])).((schemeEnv globalRef:  #'test')      value: ( #'equal') value: ( #'cond') value: ( (((((schemeEnv globalRef:  #'X3E')          value: ( 3) value: ( 3))) == false) not)     	ifTrue: [ #'greater']     	ifFalse: [ (((((schemeEnv globalRef:  #'X3C')              value: ( 3) value: ( 3))) == false) not)         	ifTrue: [ #'less']         	ifFalse: [ #'equal']])).((schemeEnv globalRef:  #'test')      value: ( 2) value: ( #'cond') value: ( [ :result96 |       ((( result96) == false) not)         	ifTrue: [((schemeEnv globalRef:  #'cadr')              value: ( result96))]         	ifFalse: [ false]. ] valueWithArguments: {(((schemeEnv globalRef:  #'assv')          value: ( #'b') value: ( ({ ({ #'a'.  1. } asRest).  ({ #'b'.  2. } asRest). } asRest)))). })).((schemeEnv globalRef:  #'test')      value: ( #'composite') value: ( #'case') value: ( [ :key97 |       (((((schemeEnv globalRef:  #'memv')              value: ( key97) value: ( ({ 2.  3.  5.  7. } asRest)))) == false) not)         	ifTrue: [ #'prime']         	ifFalse: [ [ :key98 |               (((((schemeEnv globalRef:  #'memv')                      value: ( key98) value: ( ({ 1.  4.  6.  8.  9. } asRest)))) == false) not)                 	ifTrue: [ #'composite']                 	ifFalse: [ key98].         ] valueWithArguments: {( key97). }]. ] valueWithArguments: {(((schemeEnv globalRef:  #'X2A')          value: ( 2) value: ( 3))). })).((schemeEnv globalRef:  #'test')      value: ( #'consonant') value: ( #'case') value: ( [ :key99 |       (((((schemeEnv globalRef:  #'memv')              value: ( key99) value: ( ({ #'a'.  #'e'.  #'i'.  #'o'.  #'u'. } asRest)))) == false) not)         	ifTrue: [ #'vowel']         	ifFalse: [ [ :key100 |               (((((schemeEnv globalRef:  #'memv')                      value: ( key100) value: ( ({ #'w'.  #'y'. } asRest)))) == false) not)                 	ifTrue: [ #'semivowel']                 	ifFalse: [ [                    key100.                    #'consonant'.                  ] value].         ] valueWithArguments: {( key99). }]. ] valueWithArguments: {(((schemeEnv globalRef:  #'car')          value: ( ({ #'c'.  #'d'. } asRest)))). })).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'and') value: ( (((((schemeEnv globalRef:  #'X3D')          value: ( 2) value: ( 2))) == false) not)     	ifTrue: [((schemeEnv globalRef:  #'X3E')          value: ( 2) value: ( 1))]     	ifFalse: [ false])).((schemeEnv globalRef:  #'test')      value: ( false) value: ( #'and') value: ( (((((schemeEnv globalRef:  #'X3D')          value: ( 2) value: ( 2))) == false) not)     	ifTrue: [((schemeEnv globalRef:  #'X3C')          value: ( 2) value: ( 1))]     	ifFalse: [ false])).((schemeEnv globalRef:  #'test')      value: ( ({ #'f'.  #'g'. } asRest)) value: ( #'and') value: ( ((( 1) == false) not)     	ifTrue: [ ((( 2) == false) not)         	ifTrue: [ ((( #'c') == false) not)             	ifTrue: [ ({ #'f'.  #'g'. } asRest)]             	ifFalse: [ false]]         	ifFalse: [ false]]     	ifFalse: [ false])).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'and') value: ( true)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'or') value: ( [ :temp101 |       ((( temp101) == false) not)         	ifTrue: [ temp101]         	ifFalse: [((schemeEnv globalRef:  #'X3E')              value: ( 2) value: ( 1))]. ] valueWithArguments: {(((schemeEnv globalRef:  #'X3D')          value: ( 2) value: ( 2))). })).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'or') value: ( [ :temp102 |       ((( temp102) == false) not)         	ifTrue: [ temp102]         	ifFalse: [((schemeEnv globalRef:  #'X3C')              value: ( 2) value: ( 1))]. ] valueWithArguments: {(((schemeEnv globalRef:  #'X3D')          value: ( 2) value: ( 2))). })).((schemeEnv globalRef:  #'test')      value: ( false) value: ( #'or') value: ( [ :temp103 |       ((( temp103) == false) not)         	ifTrue: [ temp103]         	ifFalse: [ [ :temp104 |               ((( temp104) == false) not)                 	ifTrue: [ temp104]                 	ifFalse: [ false].         ] valueWithArguments: {( false). }]. ] valueWithArguments: {( false). })).((schemeEnv globalRef:  #'test')      value: ( false) value: ( #'or') value: ( false)).((schemeEnv globalRef:  #'test')      value: ( ({ #'b'.  #'c'. } asRest)) value: ( #'or') value: ( [ :temp105 |       ((( temp105) == false) not)         	ifTrue: [ temp105]         	ifFalse: [((schemeEnv globalRef:  #'X2B')              value: ( 3) value: ( 00))]. ] valueWithArguments: {(((schemeEnv globalRef:  #'memq')          value: ( #'b') value: ( ({ #'a'.  #'b'.  #'c'. } asRest)))). })).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 2) value: ( 2)).((schemeEnv globalRef:  #'test')      value: ( 6) value: ( #'let') value: ( [ :x :y |      ((schemeEnv globalRef:  #'X2A')          value: ( x) value: ( y)). ] valueWithArguments: {( 2). ( 3). })).((schemeEnv globalRef:  #'test')      value: ( 35) value: ( #'let') value: ( [ :x :y |       [ :x :z |          ((schemeEnv globalRef:  #'X2A')              value: ( z) value: ( x)).     ] valueWithArguments: {( 7). (((schemeEnv globalRef:  #'X2B')              value: ( x) value: ( y))). }. ] valueWithArguments: {( 2). ( 3). })).((schemeEnv globalRef:  #'test')      value: ( 70) value: ( #'letX2A') value: ( [ :x :y |           [ :x |        [ :z |          ((schemeEnv globalRef:  #'X2A')              value: ( z) value: ( x))       ] value: (((schemeEnv globalRef:  #'X2B')            value: ( x) value: ( y)))     ] value: ( 7). ] valueWithArguments: {( 2). ( 3). })).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'letrec') value: (  [ | evenX3F oddX3F |     evenX3F := (   [ :n |  (((((schemeEnv globalRef:  #'zeroX3F')                value: ( n))) == false) not)           	ifTrue: [ true]           	ifFalse: [(oddX3F value: (((schemeEnv globalRef:  #'X2D')                value: ( n) value: ( 1))))]]).    oddX3F := (   [ :n |  (((((schemeEnv globalRef:  #'zeroX3F')                value: ( n))) == false) not)           	ifTrue: [ false]           	ifFalse: [(evenX3F value: (((schemeEnv globalRef:  #'X2D')                value: ( n) value: ( 1))))]]).     (evenX3F value: ( 88)). ] value)). schemeEnv define:  #'x'  as: (  34 ) .((schemeEnv globalRef:  #'test')      value: ( 5) value: ( #'let') value: ( [ :x |            [ | x |             x := ( 5).          x.     ] value. ] valueWithArguments: {( 3). })).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'let') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')      value: ( 6) value: ( #'let') value: ( [           [ | x |             x := ( 6).          x.     ] value. ] value)).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'let') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')      value: ( 7) value: ( #'letX2A') value: ( [ :x |        [ | x |         x := ( 7).        x.   ] value ] value: ( 3))).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'letX2A') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')      value: ( 8) value: ( #'letX2A') value: (   [ | x |     x := ( 8).      x. ] value)).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'letX2A') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')      value: ( 9) value: ( #'letrec') value: (  [ | |            [ | x |             x := ( 9).          x.     ] value. ] value)).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'letrec') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')      value: ( 10) value: ( #'letrec') value: (  [ | x |     x := ( 3).           [ | x |             x := ( 10).          x.     ] value. ] value)).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'letrec') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'reportX2Derrs')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !