'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test3.scm'!!SmallScheme methodsFor: 'user'!test3    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 1)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'not')     ) value: ( true)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'not')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'not')     ) value: (((schemeEnv globalRef:  #'list')      value: ( 3)))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'not')     ) value: ( false)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'not')     ) value: ( nil)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'not')     ) value: (((schemeEnv globalRef:  #'list')      value))).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'not')     ) value: ( #'nil')).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'booleanX3F')     ) value: ( false)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'booleanX3F')     ) value: ( 00)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'booleanX3F')     ) value: ( nil)).((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 2)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')     .  #'a'.  #'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqvX3F')     .  #'a'.  #'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')     .  2.  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')     .  nil.  nil.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')     .  10000.  10000.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqvX3F')     . ((schemeEnv globalRef:  #'cons')      value: ( 1) value: ( 2)). ((schemeEnv globalRef:  #'cons')      value: ( 1) value: ( 2)).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqvX3F')     .  [ 1].  [ 2].}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqvX3F')     .  false.  #'nil'.}). [ :p |      ((schemeEnv globalRef:  #'test')               valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')         .  p.  p.}). ] valueWithArguments: {(     [ :x |  x]). }. schemeEnv define:  #'genX2Dcounter'    "gen-counter"  as: (        [ [ :n |                               [ [                     (n := ((schemeEnv globalRef:  #'X2B')                          value: ( n) value: ( 1))).                      n.                    ] value].           ] valueWithArguments: {( 00). }] ) . [ :g |      ((schemeEnv globalRef:  #'test')               valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')         .  g.  g.}). ] valueWithArguments: {(((schemeEnv globalRef:  #'genX2Dcounter')          value)). }.((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqvX3F')     . ((schemeEnv globalRef:  #'genX2Dcounter')      value). ((schemeEnv globalRef:  #'genX2Dcounter')      value).}).  [ | f g |     f := (   [ (((((schemeEnv globalRef:  #'eqvX3F')                value: ( f) value: ( g))) == false) not)           	ifTrue: [ #'f']           	ifFalse: [ #'both']]).    g := (   [ (((((schemeEnv globalRef:  #'eqvX3F')                value: ( f) value: ( g))) == false) not)           	ifTrue: [ #'g']           	ifFalse: [ #'both']]).     ((schemeEnv globalRef:  #'test')               valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqvX3F')         .  f.  g.}). ] value.((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')     .  #'a'.  #'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'eqX3F')     . ((schemeEnv globalRef:  #'list')      value: ( #'a')). ((schemeEnv globalRef:  #'list')      value: ( #'a')).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')     .  nil.  nil.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')     .  (schemeEnv globalRef:  #'car')     .  (schemeEnv globalRef:  #'car')     .}). [ :x |      ((schemeEnv globalRef:  #'test')               valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')         .  x.  x.}). ] valueWithArguments: {( ({ #'a'. } asRest)). }. [ :x |      ((schemeEnv globalRef:  #'test')               valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')         .  x.  x.}). ] valueWithArguments: {( {}). }. [ :x |      ((schemeEnv globalRef:  #'test')               valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')         .  x.  x.}). ] valueWithArguments: {(     [ :x |  x]). }.((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'equalX3F')     .  #'a'.  #'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'equalX3F')     .  ({ #'a'. } asRest).  ({ #'a'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'equalX3F')     .  ({ #'a'.  ({ #'b'. } asRest).  #'c'. } asRest).  ({ #'a'.  ({ #'b'. } asRest).  #'c'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'equalX3F')     .  'abc'.  'abc'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'equalX3F')     .  2.  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'equalX3F')     . ((schemeEnv globalRef:  #'makeX2Dvector')      value: ( 5) value: ( #'a')). ((schemeEnv globalRef:  #'makeX2Dvector')      value: ( 5) value: ( #'a')).}).((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( ({ #'a'.  #'b'.  #'c'.  #'d'.  #'e'. } asRest)) value: ( #'dot') value: ( ({ #'a'.  #'b'.  #'c'.  #'d'.  #'e'. } asRest))). schemeEnv define:  #'x'  as: ( ((schemeEnv globalRef:  #'list')            value: ( #'a') value: ( #'b') value: ( #'c')) ) . schemeEnv define:  #'y'  as: (  (schemeEnv globalRef:  #'x')            ) . ((( (schemeEnv globalRef:  #'listX3F')         ) == false) not)     	ifTrue: [((schemeEnv globalRef:  #'test')          value: ( true) value: ( (schemeEnv globalRef:  #'listX3F')         ) value: ( (schemeEnv globalRef:  #'y')         ))]     	ifFalse: [ false].((schemeEnv globalRef:  #'setX2DcdrX21')      value: ( (schemeEnv globalRef:  #'x')     ) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( (Pair car:  #'a' cdr:  4)) value: ( #'setX2DcdrX21') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqvX3F')     .  (schemeEnv globalRef:  #'x')     .  (schemeEnv globalRef:  #'y')     .}).((schemeEnv globalRef:  #'test')      value: ( (Pair car:  #'a' cdr:  (Pair car:  #'b' cdr:  (Pair car:  #'c' cdr:  #'d')))) value: ( #'dot') value: ( (Pair car:  #'a' cdr:  (Pair car:  #'b' cdr:  (Pair car:  #'c' cdr:  #'d'))))). ((( (schemeEnv globalRef:  #'listX3F')         ) == false) not)     	ifTrue: [((schemeEnv globalRef:  #'test')          value: ( false) value: ( (schemeEnv globalRef:  #'listX3F')         ) value: ( (schemeEnv globalRef:  #'y')         ))]     	ifFalse: [ false]. ((( (schemeEnv globalRef:  #'listX3F')         ) == false) not)     	ifTrue: [ [ :x |           [           ((schemeEnv globalRef:  #'setX2DcdrX21')                value: ( x) value: ( x)).           ((schemeEnv globalRef:  #'test')                value: ( false) value: ( #'listX3F') value: (((schemeEnv globalRef:  #'listX3F')                value: ( x)))).          ] value.     ] valueWithArguments: {(((schemeEnv globalRef:  #'list')              value: ( #'a'))). }]     	ifFalse: [ false].((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'pairX3F')     ) value: ( (Pair car:  #'a' cdr:  #'b'))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'pairX3F')     ) value: ( (Pair car:  #'a' cdr:  1))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'pairX3F')     ) value: ( ({ #'a'.  #'b'.  #'c'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'pairX3F')     ) value: ( nil)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'pairX3F')     ) value: ( { #'a'.  #'b'. })).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'a'. } asRest).  (schemeEnv globalRef:  #'cons')     .  #'a'.  nil.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ ({ #'a'. } asRest).  #'b'.  #'c'.  #'d'. } asRest).  (schemeEnv globalRef:  #'cons')     .  ({ #'a'. } asRest).  ({ #'b'.  #'c'.  #'d'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ 'a'.  #'b'.  #'c'. } asRest).  (schemeEnv globalRef:  #'cons')     .  'a'.  ({ #'b'.  #'c'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  (Pair car:  #'a' cdr:  3).  (schemeEnv globalRef:  #'cons')     .  #'a'.  3.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  (Pair car:  ({ #'a'.  #'b'. } asRest) cdr:  #'c').  (schemeEnv globalRef:  #'cons')     .  ({ #'a'.  #'b'. } asRest).  #'c'.}).((schemeEnv globalRef:  #'test')      value: ( #'a') value: ( (schemeEnv globalRef:  #'car')     ) value: ( ({ #'a'.  #'b'.  #'c'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( ({ #'a'. } asRest)) value: ( (schemeEnv globalRef:  #'car')     ) value: ( ({ ({ #'a'. } asRest).  #'b'.  #'c'.  #'d'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( 1) value: ( (schemeEnv globalRef:  #'car')     ) value: ( (Pair car:  1 cdr:  2))).((schemeEnv globalRef:  #'test')      value: ( ({ #'b'.  #'c'.  #'d'. } asRest)) value: ( (schemeEnv globalRef:  #'cdr')     ) value: ( ({ ({ #'a'. } asRest).  #'b'.  #'c'.  #'d'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( 2) value: ( (schemeEnv globalRef:  #'cdr')     ) value: ( (Pair car:  1 cdr:  2))).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'a'.  7.  #'c'. } asRest).  (schemeEnv globalRef:  #'list')     .  #'a'. ((schemeEnv globalRef:  #'X2B')      value: ( 3) value: ( 4)).  #'c'.}).((schemeEnv globalRef:  #'test')      value: ( nil) value: ( (schemeEnv globalRef:  #'list')     )).((schemeEnv globalRef:  #'test')      value: ( 3) value: ( (schemeEnv globalRef:  #'length')     ) value: ( ({ #'a'.  #'b'.  #'c'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( 3) value: ( (schemeEnv globalRef:  #'length')     ) value: ( ({ #'a'.  ({ #'b'. } asRest).  ({ #'c'.  #'d'.  #'e'. } asRest). } asRest))).((schemeEnv globalRef:  #'test')      value: ( 00) value: ( (schemeEnv globalRef:  #'length')     ) value: ( nil)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'x'.  #'y'. } asRest).  (schemeEnv globalRef:  #'append')     .  ({ #'x'. } asRest).  ({ #'y'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'a'.  #'b'.  #'c'.  #'d'. } asRest).  (schemeEnv globalRef:  #'append')     .  ({ #'a'. } asRest).  ({ #'b'.  #'c'.  #'d'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'a'.  ({ #'b'. } asRest).  ({ #'c'. } asRest). } asRest).  (schemeEnv globalRef:  #'append')     .  ({ #'a'.  ({ #'b'. } asRest). } asRest).  ({ ({ #'c'. } asRest). } asRest).}).((schemeEnv globalRef:  #'test')      value: ( nil) value: ( (schemeEnv globalRef:  #'append')     )).((schemeEnv globalRef:  #'test')       valueWithArguments: {  (Pair car:  #'a' cdr:  (Pair car:  #'b' cdr:  (Pair car:  #'c' cdr:  #'d'))).  (schemeEnv globalRef:  #'append')     .  ({ #'a'.  #'b'. } asRest).  (Pair car:  #'c' cdr:  #'d').}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  #'a'.  (schemeEnv globalRef:  #'append')     .  nil.  #'a'.}).((schemeEnv globalRef:  #'test')      value: ( ({ #'c'.  #'b'.  #'a'. } asRest)) value: ( (schemeEnv globalRef:  #'reverse')     ) value: ( ({ #'a'.  #'b'.  #'c'. } asRest))).((schemeEnv globalRef:  #'test')      value: ( ({ ({ #'e'.  ({ #'f'. } asRest). } asRest).  #'d'.  ({ #'b'.  #'c'. } asRest).  #'a'. } asRest)) value: ( (schemeEnv globalRef:  #'reverse')     ) value: ( ({ #'a'.  ({ #'b'.  #'c'. } asRest).  #'d'.  ({ #'e'.  ({ #'f'. } asRest). } asRest). } asRest))).((schemeEnv globalRef:  #'test')       valueWithArguments: {  #'c'.  (schemeEnv globalRef:  #'listX2Dref')     .  ({ #'a'.  #'b'.  #'c'.  #'d'. } asRest).  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'a'.  #'b'.  #'c'. } asRest).  (schemeEnv globalRef:  #'memq')     .  #'a'.  ({ #'a'.  #'b'.  #'c'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'b'.  #'c'. } asRest).  (schemeEnv globalRef:  #'memq')     .  #'b'.  ({ #'a'.  #'b'.  #'c'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'memq')     .  #'a'.  ({ #'b'.  #'c'.  #'d'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'memq')     . ((schemeEnv globalRef:  #'list')      value: ( #'a')).  ({ #'b'.  ({ #'a'. } asRest).  #'c'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ ({ #'a'. } asRest).  #'c'. } asRest).  (schemeEnv globalRef:  #'member')     . ((schemeEnv globalRef:  #'list')      value: ( #'a')).  ({ #'b'.  ({ #'a'. } asRest).  #'c'. } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ 101.  102. } asRest).  (schemeEnv globalRef:  #'memv')     .  101.  ({ 100.  101.  102. } asRest).}). schemeEnv define:  #'e'  as: (  ({ ({ #'a'.  1. } asRest).  ({ #'b'.  2. } asRest).  ({ #'c'.  3. } asRest). } asRest) ) .((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'a'.  1. } asRest).  (schemeEnv globalRef:  #'assq')     .  #'a'.  (schemeEnv globalRef:  #'e')     .}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ #'b'.  2. } asRest).  (schemeEnv globalRef:  #'assq')     .  #'b'.  (schemeEnv globalRef:  #'e')     .}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'assq')     .  #'d'.  (schemeEnv globalRef:  #'e')     .}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'assq')     . ((schemeEnv globalRef:  #'list')      value: ( #'a')).  ({ ({ ({ #'a'. } asRest). } asRest).  ({ ({ #'b'. } asRest). } asRest).  ({ ({ #'c'. } asRest). } asRest). } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ ({ #'a'. } asRest). } asRest).  (schemeEnv globalRef:  #'assoc')     . ((schemeEnv globalRef:  #'list')      value: ( #'a')).  ({ ({ ({ #'a'. } asRest). } asRest).  ({ ({ #'b'. } asRest). } asRest).  ({ ({ #'c'. } asRest). } asRest). } asRest).}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ({ 5.  7. } asRest).  (schemeEnv globalRef:  #'assv')     .  5.  ({ ({ 2.  3. } asRest).  ({ 5.  7. } asRest).  ({ 11.  13. } asRest). } asRest).}).((schemeEnv globalRef:  #'reportX2Derrs')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !