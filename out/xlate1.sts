'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/xlate1.scm'!!SmallScheme methodsFor: 'user'!xlate1    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'lineX2Ddelimiter'    "line-delimiter"  as: ( ((schemeEnv globalRef:  #'integerX2DX3Echar')            value: ( 13)) ) . schemeEnv define:  #'endline'  as: (        [ :port | ((schemeEnv globalRef:  #'display')                value: ( (schemeEnv globalRef:  #'lineX2Ddelimiter')               ) value: ( port))] ) . schemeEnv define:  #'libraryX2DgenX2Dheader'    "library-gen-header"  as: (        [ :auxX2Dstring :initX2Dname :port |  [             (schemeEnv setX21:  #'globalX2DenvX2Dstr' as:  'SmallScheme ').             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '''# This file is encoded in ASCII') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '# line delimitor is CR.') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( 'SmallScheme') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( 'SmallScheme code for Squeak 3.0') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( auxX2Dstring) value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '''!!') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '!!SmallScheme class methodsFor: ''initialization''!!') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( initX2Dname) value: ( port)).            ] value] ) . schemeEnv define:  #'userX2DgenX2Dheader'    "user-gen-header"  as: (        [ :auxX2Dstring :initX2Dname :port |  [             (schemeEnv setX21:  #'globalX2DenvX2Dstr' as:  'schemeEnv ').             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '''# This file is encoded in ASCII') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '# line delimitor is CR.') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( 'SmallScheme') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( 'SmallScheme code for Squeak 3.0') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( auxX2Dstring) value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '''!!') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '!!SmallScheme methodsFor: ''user''!!') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( initX2Dname) value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '    "Capture self as env for use by nested block code"') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '    | schemeEnv | schemeEnv := self. ') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).            ] value] ) . schemeEnv define:  #'genX2Dtrailer'    "gen-trailer"  as: (        [ :port |  [             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( '!! !!') value: ( port)).             ((schemeEnv globalRef:  #'endline')                  value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2DfromX2Dfile'    "xlate-from-file"  as: (        [ :infileX2Dname :initX2Dname :genX2Dheader :genX2Dtrailer :outport |            outport := outport asRest.            [ :out |                ((schemeEnv globalRef:  #'callX2DwithX2DinputX2Dfile')                    value: ( infileX2Dname) value: (               [ :in |  [                     (genX2Dheader value: (((schemeEnv globalRef:  #'stringX2Dappend')                          value: ( 'Translated from file ') value: ( infileX2Dname))) value: ( initX2Dname) value: ( out)).                                           [ | loop |                          loop :=                          [ :form |                           (((((schemeEnv globalRef:  #'eofX2DobjectX3F')                                  value: ( form))) == false) not)                             	ifTrue: [ #'done']                             	ifFalse: [ [                               ((schemeEnv globalRef:  #'translate')                                    value: ( form) value: ( out)).                               (loop value: (((schemeEnv globalRef:  #'read')                                    value: ( in)))).                              ] value]                     ].                     loop valueWithArguments: {                         ((schemeEnv globalRef:  #'read')                              value: ( in)). } ] value.                     (genX2Dtrailer value: ( out)).                    ] value])).           ] valueWithArguments: {(((schemeEnv globalRef:  #'X3Aoptional')                    value: ( outport) value: (((schemeEnv globalRef:  #'currentX2DoutputX2Dport')                    value)))). }] withLastArgRest  ) . schemeEnv define:  #'makeX2DinitX2Dname'    "make-init-name"  as: (        [ :stem |  [ :bashable |                 [                 ((schemeEnv globalRef:  #'stringX2DsetX21')                      value: ( bashable) value: ( 00) value: (((schemeEnv globalRef:  #'charX2Dupcase')                      value: (((schemeEnv globalRef:  #'stringX2Dref')                      value: ( bashable) value: ( 00)))))).                 ((schemeEnv globalRef:  #'stringX2Dappend')                      value: ( 'init') value: ( bashable)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'symbolX2DX3Estring')                    value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                    value: ( stem))))). }] ) . schemeEnv define:  #'xlateX2DlibraryX2Dfile'    "xlate-library-file"  as: (        [ :infileX2Dname :outfileX2Dname :stem | ((schemeEnv globalRef:  #'callX2DwithX2DoutputX2Dfile')                value: ( outfileX2Dname) value: (           [ :out | ((schemeEnv globalRef:  #'xlateX2DfromX2Dfile')                                   valueWithArguments: {  infileX2Dname. ((schemeEnv globalRef:  #'makeX2DinitX2Dname')                    value: ( stem)).  (schemeEnv globalRef:  #'libraryX2DgenX2Dheader')                   .  (schemeEnv globalRef:  #'genX2Dtrailer')                   .  out.})]))] ) . schemeEnv define:  #'makeX2DinstanceX2Dname'    "make-instance-name"  as: (        [ :stem |  stem] ) . schemeEnv define:  #'xlateX2Dfile'    "xlate-file"  as: (        [ :infileX2Dname :outfileX2Dname :stem | ((schemeEnv globalRef:  #'callX2DwithX2DoutputX2Dfile')                value: ( outfileX2Dname) value: (           [ :out | ((schemeEnv globalRef:  #'xlateX2DfromX2Dfile')                                   valueWithArguments: {  infileX2Dname. ((schemeEnv globalRef:  #'makeX2DinstanceX2Dname')                    value: ( stem)).  (schemeEnv globalRef:  #'userX2DgenX2Dheader')                   .  (schemeEnv globalRef:  #'genX2Dtrailer')                   .  out.})]))] ) . schemeEnv define:  #'scheme2smalltalk'  as: (        [ :schemeX2DcodeX2Dstring :outputX2Dport |  [ :inputX2Dport |                 [                 (schemeEnv setX21:  #'globalX2DenvX2Dstr' as:  'schemeEnv ').                 ((schemeEnv globalRef:  #'display')                      value: ( '[ :schemeEnv | ') value: ( outputX2Dport)).                 ((schemeEnv globalRef:  #'translate')                      value: (((schemeEnv globalRef:  #'read')                      value: ( inputX2Dport))) value: ( outputX2Dport)).                 ((schemeEnv globalRef:  #'display')                      value: ( ']') value: ( outputX2Dport)).                 ((schemeEnv globalRef:  #'endline')                      value: ( outputX2Dport)).                  outputX2Dport.                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'openX2DinputX2Dstring')                    value: ( schemeX2DcodeX2Dstring))). }] ) . schemeEnv define:  #'translate'  as: (        [ :schemeX2Dexp :port |            port := port asRest.            [ :outport |                 [                 ((schemeEnv globalRef:  #'endline')                      value: ( outport)).                 ((schemeEnv globalRef:  #'xlate')                                       valueWithArguments: { ((schemeEnv globalRef:  #'desugar')                      value: ( schemeX2Dexp) value: ( 00)). ((schemeEnv globalRef:  #'makeX2DemptyX2Denv')                      value).  00.  outport.}).                 ((schemeEnv globalRef:  #'display')                      value: ( '.') value: ( outport)).                 ((schemeEnv globalRef:  #'endline')                      value: ( outport)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X3Aoptional')                    value: ( port) value: (((schemeEnv globalRef:  #'currentX2DoutputX2Dport')                    value)))). }] withLastArgRest  ) . schemeEnv define:  #'globalX2DenvX2Dstr'    "global-env-str"  as: (  'SmallScheme ' ) . schemeEnv define:  #'global'  as: (        [ :preX2Dstr :postX2Dstr | ((schemeEnv globalRef:  #'stringX2Dappend')                value: ( preX2Dstr) value: ( (schemeEnv globalRef:  #'globalX2DenvX2Dstr')               ) value: ( postX2Dstr))] ) . schemeEnv define:  #'makeX2DemptyX2Denv'    "make-empty-env"  as: (        [ nil] ) . schemeEnv define:  #'extendX2Denv'    "extend-env"  as: (        [ :newX2Dvars :env | ((schemeEnv globalRef:  #'append')                value: ( newX2Dvars) value: ( env))] ) . schemeEnv define:  #'isX2DglobalX3F'    "is-global?"  as: (        [ :sym :localsX2Denv | ((schemeEnv globalRef:  #'not')                value: (((schemeEnv globalRef:  #'memq')                value: ( sym) value: ( localsX2Denv))))] ) . schemeEnv define:  #'xlate'  as: (        [ :exp :ctX2Denv :offset :port |  (((((schemeEnv globalRef:  #'emptyX2DlistX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'xlateX2DemptyX2Dlist')                    value: ( exp) value: ( port))]               	ifFalse: [ (((((schemeEnv globalRef:  #'numberX3F')                        value: ( exp))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dnumber')                        value: ( exp) value: ( port))]                   	ifFalse: [ (((((schemeEnv globalRef:  #'booleanX3F')                            value: ( exp))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dboolean')                            value: ( exp) value: ( port))]                       	ifFalse: [ (((((schemeEnv globalRef:  #'stringX3F')                                value: ( exp))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dstring')                                value: ( exp) value: ( port))]                           	ifFalse: [ (((((schemeEnv globalRef:  #'charX3F')                                    value: ( exp))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dchar')                                    value: ( exp) value: ( port))]                               	ifFalse: [ (((((schemeEnv globalRef:  #'quoteX3F')                                        value: ( exp))) == false) not)                                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dquote')                                        value: (((schemeEnv globalRef:  #'cadr')                                        value: ( exp))) value: ( offset) value: ( port))]                                   	ifFalse: [ (((((schemeEnv globalRef:  #'variableX3F')                                            value: ( exp))) == false) not)                                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dvariable')                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                       	ifFalse: [ (((((schemeEnv globalRef:  #'lambdaX3F')                                                value: ( exp))) == false) not)                                           	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dlambda')                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                           	ifFalse: [ (((((schemeEnv globalRef:  #'defineX3F')                                                    value: ( exp))) == false) not)                                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Ddefine')                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                               	ifFalse: [ (((((schemeEnv globalRef:  #'ifX3F')                                                        value: ( exp))) == false) not)                                                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dif')                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                   	ifFalse: [ (((((schemeEnv globalRef:  #'beginX3F')                                                            value: ( exp))) == false) not)                                                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dbegin')                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                       	ifFalse: [ (((((schemeEnv globalRef:  #'setX21X3F')                                                                value: ( exp))) == false) not)                                                           	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DsetX21')                                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                           	ifFalse: [ (((((schemeEnv globalRef:  #'namedX2DletX3F')                                                                    value: ( exp))) == false) not)                                                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DnamedX2Dlet')                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                               	ifFalse: [ (((((schemeEnv globalRef:  #'letX3F')                                                                        value: ( exp))) == false) not)                                                                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dlet')                                                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                   	ifFalse: [ (((((schemeEnv globalRef:  #'letX2AX3F')                                                                            value: ( exp))) == false) not)                                                                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DletX2A')                                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                       	ifFalse: [ (((((schemeEnv globalRef:  #'letrecX3F')                                                                                value: ( exp))) == false) not)                                                                           	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dletrec')                                                                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                           	ifFalse: [ (((((schemeEnv globalRef:  #'dynamicX2DletX3F')                                                                                    value: ( exp))) == false) not)                                                                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DdynamicX2Dlet')                                                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                               	ifFalse: [ (((((schemeEnv globalRef:  #'dynamicX2DdefineX3F')                                                                                        value: ( exp))) == false) not)                                                                                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DdynamicX2Ddefine')                                                                                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                   	ifFalse: [ (((((schemeEnv globalRef:  #'dynamicX2DrefX2DwithX2DdefaultX3F')                                                                                            value: ( exp))) == false) not)                                                                                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DdynamicX2Drwd')                                                                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                       	ifFalse: [ (((((schemeEnv globalRef:  #'dynamicX2DrefX3F')                                                                                                value: ( exp))) == false) not)                                                                                           	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DdynamicX2Dref')                                                                                                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                           	ifFalse: [ (((((schemeEnv globalRef:  #'dynamicX2DsetX21X3F')                                                                                                    value: ( exp))) == false) not)                                                                                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2DdynamicX2DsetX21')                                                                                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                               	ifFalse: [ (((((schemeEnv globalRef:  #'valuesX3F')                                                                                                        value: ( exp))) == false) not)                                                                                                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dvalues')                                                                                                                                                                                                           valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                                   	ifFalse: [ (((((schemeEnv globalRef:  #'magicX3F')                                                                                                            value: ( exp))) == false) not)                                                                                                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dmagically')                                                                                                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                                       	ifFalse: [ (((((schemeEnv globalRef:  #'smalltalkX2DrefX3F')                                                                                                                value: ( exp))) == false) not)                                                                                                           	ifTrue: [((schemeEnv globalRef:  #'emitX2DssX2Dref')                                                                                                                value: ( exp) value: ( port))]                                                                                                           	ifFalse: [ (((((schemeEnv globalRef:  #'applicationX3F')                                                                                                                    value: ( exp))) == false) not)                                                                                                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dapplication')                                                                                                                                                                                                                                   valueWithArguments: {  exp.  ctX2Denv.  offset.  port.})]                                                                                                               	ifFalse: [((schemeEnv globalRef:  #'error')                                                                                                                    value: ( 'unknown expression type') value: ( exp))]]]]]]]]]]]]]]]]]]]]]]]]]] ) . schemeEnv define:  #'X3Aoptional'    ":optional"  as: (        [ :exp :default |  (((((schemeEnv globalRef:  #'nullX3F')                    value: ( exp))) == false) not)               	ifTrue: [ default]               	ifFalse: [((schemeEnv globalRef:  #'car')                    value: ( exp))]] ) . schemeEnv define:  #'spaces'  as: (        [ :n :port |             [ | loop |                loop :=                [ :count |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( $ ) value: ( port)).                  (((((schemeEnv globalRef:  #'X3E')                          value: ( n) value: ( 00))) == false) not)                     	ifTrue: [((schemeEnv globalRef:  #'spaces')                          value: (((schemeEnv globalRef:  #'X2D')                          value: ( count) value: ( 1))) value: ( port))].                ] value           ].           loop valueWithArguments: {                n. } ] value] ) . schemeEnv define:  #'endlineX2DandX2Dspaces'    "endline-and-spaces"  as: (        [ :n :port |  [             ((schemeEnv globalRef:  #'endline')                  value: ( port)).             ((schemeEnv globalRef:  #'spaces')                  value: ( n) value: ( port)).            ] value] ) . schemeEnv define:  #'lambdaX2DbodyX2Dindent'    "lambda-body-indent"  as: (  4 ) . schemeEnv define:  #'emitX2DbuildX2DrestX2Dargs'    "emit-build-rest-args"  as: (        [ :restX2Dname :offset :port |  [             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                  value: ( offset) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                  value: ( restX2Dname))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( ' := ') value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                  value: ( restX2Dname))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( ' asRest.') value: ( port)).             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                  value: ( offset) value: ( port)).            ] value] ) . schemeEnv define:  #'lambdaX2DhasX2DrestX3F'    "lambda-has-rest?"  as: (        [ :exp | ((schemeEnv globalRef:  #'not')                value: (((schemeEnv globalRef:  #'listX3F')                value: (((schemeEnv globalRef:  #'lambdaX2Dformals')                value: ( exp))))))] ) . schemeEnv define:  #'lambdaX2DrestX2DandX2DotherX2Dformals'    "lambda-rest-and-other-formals"  as: (        [ :exp |  [ :formals |                 (((((schemeEnv globalRef:  #'symbolX3F')                        value: ( formals))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'cons')                        value: ( formals) value: ( nil))]                   	ifFalse: [                    [ | loop |                        loop :=                        [ :list :others |                         (((((schemeEnv globalRef:  #'nullX3F')                                value: ( list))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'cons')                                value: ( nil) value: (((schemeEnv globalRef:  #'reverse')                                value: ( others))))]                           	ifFalse: [ (((((schemeEnv globalRef:  #'not')                                    value: (((schemeEnv globalRef:  #'pairX3F')                                    value: (((schemeEnv globalRef:  #'cdr')                                    value: ( list))))))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'cdr')                                    value: ( list))) value: (((schemeEnv globalRef:  #'reverse')                                    value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'car')                                    value: ( list))) value: ( others))))))]                               	ifFalse: [(loop value: (((schemeEnv globalRef:  #'cdr')                                    value: ( list))) value: (((schemeEnv globalRef:  #'cons')                                    value: (((schemeEnv globalRef:  #'car')                                    value: ( list))) value: ( others))))]]                   ].                   loop valueWithArguments: {                        formals.                         nil. } ] value].           ] valueWithArguments: {(((schemeEnv globalRef:  #'lambdaX2Dformals')                    value: ( exp))). }] ) . schemeEnv define:  #'xlateX2DX3EstsX2Dlambda'    "xlate->sts-lambda"  as: (        [ :exp :ctX2Denv :offset :port |            [ :restX3F |              [ :restX2DandX2Dothers |                [ :restX2Dformal |                  [ :nonX2DrestX2Dformals |                    [ :envX2Dformals |                      [ :bodyX2Doffset |                         [                         ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                              value: ( offset) value: ( port)).                         ((schemeEnv globalRef:  #'display')                              value: ( $[) value: ( port)).                          ((( restX3F) == false) not)                             	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dformals')                                  value: (((schemeEnv globalRef:  #'append')                                  value: ( nonX2DrestX2Dformals) value: (((schemeEnv globalRef:  #'list')                                  value: ( restX2Dformal))))) value: ( port))]                             	ifFalse: [((schemeEnv globalRef:  #'xlateX2Dformals')                                  value: ( nonX2DrestX2Dformals) value: ( port))].                          ((( restX3F) == false) not)                             	ifTrue: [((schemeEnv globalRef:  #'emitX2DbuildX2DrestX2Dargs')                                  value: ( restX2Dformal) value: ( bodyX2Doffset) value: ( port))].                         ((schemeEnv globalRef:  #'map')                              value: (                         [ :bodyX2Dexp | ((schemeEnv globalRef:  #'xlate')                                                               valueWithArguments: {  bodyX2Dexp. ((schemeEnv globalRef:  #'extendX2Denv')                                  value: ( envX2Dformals) value: ( ctX2Denv)).  bodyX2Doffset.  port.})]) value: (((schemeEnv globalRef:  #'lambdaX2Dbody')                              value: ( exp)))).                         ((schemeEnv globalRef:  #'display')                              value: ( $]) value: ( port)).                          ((( restX3F) == false) not)                             	ifTrue: [((schemeEnv globalRef:  #'display')                                  value: ( ' withLastArgRest ') value: ( port))].                        ] value                     ] value: (((schemeEnv globalRef:  #'X2B')                          value: ( offset) value: ( (schemeEnv globalRef:  #'lambdaX2DbodyX2Dindent')                         )))                   ] value: ( ((( restX3F) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'cons')                            value: ( restX2Dformal) value: ( nonX2DrestX2Dformals))]                       	ifFalse: [ nonX2DrestX2Dformals])                 ] value: (((schemeEnv globalRef:  #'cdr')                      value: ( restX2DandX2Dothers)))               ] value: (((schemeEnv globalRef:  #'car')                    value: ( restX2DandX2Dothers)))             ] value: (((schemeEnv globalRef:  #'lambdaX2DrestX2DandX2DotherX2Dformals')                  value: ( exp)))           ] value: (((schemeEnv globalRef:  #'lambdaX2DhasX2DrestX3F')                value: ( exp)))] ) . schemeEnv define:  #'caseX2Darity'    "case-arity"  as: (        [ :form |             [ | loop |                loop :=                [ :args :len |                 (((((schemeEnv globalRef:  #'nullX3F')                        value: ( args))) == false) not)                   	ifTrue: [ len]                   	ifFalse: [ (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'pairX3F')                            value: ( args))))) == false) not)                       	ifTrue: [ (((((schemeEnv globalRef:  #'zeroX3F')                                value: ( len))) == false) not)                           	ifTrue: [ #'nary']                           	ifFalse: [((schemeEnv globalRef:  #'X2D')                                value: ( len))]]                       	ifFalse: [(loop value: (((schemeEnv globalRef:  #'cdr')                            value: ( args))) value: (((schemeEnv globalRef:  #'X2B')                            value: ( len) value: ( 1))))]]           ].           loop valueWithArguments: {               ((schemeEnv globalRef:  #'car')                    value: ( form)).                 00. } ] value] ) . schemeEnv define:  #'xlateX2DX3EstsX2DcaseX2Dlambda'    "xlate->sts-case-lambda"  as: (        [ :exp :ctX2Denv :offset :port |  [ :caseX2Doffset :argsX2Dname |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( '[ | ') value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( argsX2Dname) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' | := (varArgList asList).') value: ( port)).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' (Switch new)') value: ( port)).                                   [ | loop |                      loop :=                      [ :nargsX2Dseen :forms |                       (((((schemeEnv globalRef:  #'nullX3F')                              value: ( forms))) == false) not)                         	ifTrue: [ (((((schemeEnv globalRef:  #'not')                                  value: (((schemeEnv globalRef:  #'memv')                                  value: ( #'nary') value: ( nargsX2Dseen))))) == false) not)                             	ifTrue: [ [                               ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                    value: ( offset) value: ( port)).                               ((schemeEnv globalRef:  #'display')                                    value: ( 'default: ((R5RS.Scheme globalRef: #''error'') ') value: ( port)).                               ((schemeEnv globalRef:  #'display')                                    value: ( 'value: ''case-lambda: no matching case'' value: ') value: ( port)).                               ((schemeEnv globalRef:  #'display')                                    value: ( argsX2Dname) value: ( port)).                               ((schemeEnv globalRef:  #'display')                                    value: ( ');') value: ( port)).                              ] value]]                         	ifFalse: [ [ :form |                               [                               ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                    value: ( offset) value: ( port)).                                [ :arity |                                     [                                      ((( [ :temp89 |                                               ((( temp89) == false) not)                                                 	ifTrue: [ temp89]                                                 	ifFalse: [ (((((schemeEnv globalRef:  #'numberX3F')                                                          value: ( arity))) == false) not)                                                     	ifTrue: [ (((((schemeEnv globalRef:  #'negativeX3F')                                                              value: ( arity))) == false) not)                                                         	ifTrue: [((schemeEnv globalRef:  #'memv')                                                              value: ( #'nary') value: ( nargsX2Dseen))]                                                         	ifFalse: [ false]]                                                     	ifFalse: [ false]].                                         ] valueWithArguments: {(((schemeEnv globalRef:  #'memv')                                                  value: ( arity) value: ( nargsX2Dseen))). }) == false) not)                                         	ifTrue: [((schemeEnv globalRef:  #'error')                                              value: ( 'case-lambda: arguments counts must be distinct') value: ( exp))].                                      (((((schemeEnv globalRef:  #'eqX3F')                                              value: ( arity) value: ( #'nary'))) == false) not)                                         	ifTrue: [ [                                           ((schemeEnv globalRef:  #'display')                                                value: ( ' default: (') value: ( port)).                                           ((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dlambda')                                                                                           valueWithArguments: { ((schemeEnv globalRef:  #'cons')                                                value: ( #'lambda') value: (((schemeEnv globalRef:  #'cons')                                                value: (((schemeEnv globalRef:  #'list')                                                value: (((schemeEnv globalRef:  #'car')                                                value: ( form))))) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')                                                value: (((schemeEnv globalRef:  #'cdr')                                                value: ( form))) value: ( nil)))))).  ctX2Denv.  caseX2Doffset.  port.}).                                           ((schemeEnv globalRef:  #'display')                                                value: ( ' value: (') value: ( port)).                                           ((schemeEnv globalRef:  #'display')                                                value: ( argsX2Dname) value: ( port)).                                           ((schemeEnv globalRef:  #'display')                                                value: ( ' asRest));') value: ( port)).                                           (loop value: (((schemeEnv globalRef:  #'cons')                                                value: ( arity) value: ( nargsX2Dseen))) value: (((schemeEnv globalRef:  #'cdr')                                                value: ( forms)))).                                          ] value]                                         	ifFalse: [ (((((schemeEnv globalRef:  #'negativeX3F')                                                  value: ( arity))) == false) not)                                             	ifTrue: [ [                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' default: (') value: ( port)).                                               ((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dlambda')                                                                                                   valueWithArguments: { ((schemeEnv globalRef:  #'cons')                                                    value: ( #'lambda') value: ( form)).  ctX2Denv.  caseX2Doffset.  port.}).                                               ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                                    value: ( caseX2Doffset) value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' valueWithArguments: ') value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( argsX2Dname) value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' );') value: ( port)).                                               (loop value: (((schemeEnv globalRef:  #'cons')                                                    value: ( arity) value: (((schemeEnv globalRef:  #'cons')                                                    value: ( #'nary') value: ( nargsX2Dseen))))) value: (((schemeEnv globalRef:  #'cdr')                                                    value: ( forms)))).                                              ] value]                                             	ifFalse: [ [                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' case: ') value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( arity) value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' do: (') value: ( port)).                                               ((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dlambda')                                                                                                   valueWithArguments: { ((schemeEnv globalRef:  #'cons')                                                    value: ( #'lambda') value: ( form)).  ctX2Denv.  caseX2Doffset.  port.}).                                               ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                                    value: ( caseX2Doffset) value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' valueWithArguments: ') value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( argsX2Dname) value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( ' );') value: ( port)).                                               (loop value: (((schemeEnv globalRef:  #'cons')                                                    value: ( arity) value: ( nargsX2Dseen))) value: (((schemeEnv globalRef:  #'cdr')                                                    value: ( forms)))).                                              ] value]].                                    ] value.                               ] valueWithArguments: {(((schemeEnv globalRef:  #'caseX2Darity')                                        value: ( form))). }.                              ] value.                         ] valueWithArguments: {(((schemeEnv globalRef:  #'car')                                  value: ( forms))). }]                 ].                 loop valueWithArguments: {                      nil.                      ((schemeEnv globalRef:  #'cdr')                          value: ( exp)). } ] value.                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( 'on: (varArgList.size)]') value: ( port)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X2B')                    value: ( 10) value: ( offset))). (((schemeEnv globalRef:  #'gensym')                    value: ( 'args'))). }] ) .! !