'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/characters.scm'!!SmallScheme class methodsFor: 'initialization'!initCharacters SmallScheme define:  #'charX3F'    "char?"  as: (        [ :obj |  ( obj isKindOf: Character)] ) . SmallScheme define:  #'charX3DX3F'    "char=?"  as: (        [ :c1 :c2 |  ( c1 = c2)] ) . SmallScheme define:  #'charX3CX3F'    "char<?"  as: (        [ :c1 :c2 |  ( c1 < c2)] ) . SmallScheme define:  #'charX3EX3F'    "char>?"  as: (        [ :c1 :c2 |  ( c1 > c2)] ) . SmallScheme define:  #'charX3EX3DX3F'    "char>=?"  as: (        [ :c1 :c2 |  ( c1 >= c2)] ) . SmallScheme define:  #'charX3CX3DX3F'    "char<=?"  as: (        [ :c1 :c2 |  ( c1 <= c2)] ) . SmallScheme define:  #'charX2DciX3DX3F'    "char-ci=?"  as: (        [ :c1 :c2 |  ( ( c1 asLowercase) = ( c2 asLowercase))] ) . SmallScheme define:  #'charX2DciX3CX3F'    "char-ci<?"  as: (        [ :c1 :c2 |  ( ( c1 asLowercase) < ( c2 asLowercase))] ) . SmallScheme define:  #'charX2DciX3EX3F'    "char-ci>?"  as: (        [ :c1 :c2 |  ( ( c1 asLowercase) > ( c2 asLowercase))] ) . SmallScheme define:  #'charX2DciX3CX3DX3F'    "char-ci<=?"  as: (        [ :c1 :c2 |  ( ( c1 asLowercase) <= ( c2 asLowercase))] ) . SmallScheme define:  #'charX2DciX3EX3DX3F'    "char-ci>=?"  as: (        [ :c1 :c2 |  ( ( c1 asLowercase) >= ( c2 asLowercase))] ) . SmallScheme define:  #'charX2DalphabeticX3F'    "char-alphabetic?"  as: (        [ :c |  [ :temp18 |                 ((( temp18) == false) not)                   	ifTrue: [ temp18]                   	ifFalse: [((SmallScheme globalRef:  #'charX2DlowerX2DcaseX3F')                        value: ( c))].           ] valueWithArguments: {(((SmallScheme globalRef:  #'charX2DupperX2DcaseX3F')                    value: ( c))). }] ) . SmallScheme define:  #'charX2DnumericX3F'    "char-numeric?"  as: (        [ :c |  (((((SmallScheme globalRef:  #'charX3EX3DX3F')                    value: ( c) value: ( $0))) == false) not)               	ifTrue: [((SmallScheme globalRef:  #'charX3CX3DX3F')                    value: ( c) value: ( $9))]               	ifFalse: [ false]] ) . SmallScheme define:  #'charX2DwhitespaceX3F'    "char-whitespace?"  as: (        [ :c |  ( ( c asciiValue) <= 32)] ) . SmallScheme define:  #'charX2DnewlineX3F'    "char-newline?"  as: (        [ :c |  [ :temp19 |                 ((( temp19) == false) not)                   	ifTrue: [ temp19]                   	ifFalse: [ ( c  asciiValue = 13)].           ] valueWithArguments: {( ( c  asciiValue  = 10)). }] ) . SmallScheme define:  #'charX2DupperX2DcaseX3F'    "char-upper-case?"  as: (        [ :c |  (((((SmallScheme globalRef:  #'charX3EX3DX3F')                    value: ( c) value: ( $A))) == false) not)               	ifTrue: [((SmallScheme globalRef:  #'charX3CX3DX3F')                    value: ( c) value: ( $Z))]               	ifFalse: [ false]] ) . SmallScheme define:  #'charX2DlowerX2DcaseX3F'    "char-lower-case?"  as: (        [ :c |  (((((SmallScheme globalRef:  #'charX3EX3DX3F')                    value: ( c) value: ( $a))) == false) not)               	ifTrue: [((SmallScheme globalRef:  #'charX3CX3DX3F')                    value: ( c) value: ( $z))]               	ifFalse: [ false]] ) . SmallScheme define:  #'charX2DX3Einteger'    "char->integer"  as: (        [ :c |  ( c asciiValue)] ) . SmallScheme define:  #'integerX2DX3Echar'    "integer->char"  as: (        [ :n |  ( n asCharacter)] ) . SmallScheme define:  #'charX2Dupcase'    "char-upcase"  as: (        [ :c |  ( c asUppercase)] ) . SmallScheme define:  #'charX2Ddowncase'    "char-downcase"  as: (        [ :c |  ( c asLowercase)] ) .! !