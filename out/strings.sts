'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/strings.scm'!!SmallScheme class methodsFor: 'initialization'!initStrings SmallScheme define:  #'string'  as: (        [ :rest |            rest := rest asRest.            (((((SmallScheme globalRef:  #'nullX3F')                    value: ( rest))) == false) not)               	ifTrue: [ '']               	ifFalse: [((SmallScheme globalRef:  #'listX2DX3Estring')                    value: ( rest))]] withLastArgRest  ) . SmallScheme define:  #'stringX3F'    "string?"  as: (        [ :obj |  ((( ( obj isKindOf: String)) == false) not)               	ifTrue: [((SmallScheme globalRef:  #'not')                    value: ( ( obj isKindOf: Symbol)))]               	ifFalse: [ false]] ) . SmallScheme define:  #'makeX2Dstring'    "make-string"  as: (        [ :k :optionalX2Dchar |            optionalX2Dchar := optionalX2Dchar asRest.            [ :fill |                 ( String new: k withAll: fill).           ] valueWithArguments: {( (((((SmallScheme globalRef:  #'nullX3F')                        value: ( optionalX2Dchar))) == false) not)                   	ifTrue: [ $ ]                   	ifFalse: [((SmallScheme globalRef:  #'car')                        value: ( optionalX2Dchar))]). }] withLastArgRest  ) . SmallScheme define:  #'stringX2Dlength'    "string-length"  as: (        [ :str |  ( str size)] ) . SmallScheme define:  #'stringX2Dref'    "string-ref"  as: (        [ :str :k |  ( str at:((SmallScheme globalRef:  #'X2B')                value: ( 1) value: ( k)))] ) . SmallScheme define:  #'stringX2DsetX21'    "string-set!!"  as: (        [ :str :k :char |  ( str at:((SmallScheme globalRef:  #'X2B')                value: ( 1) value: ( k)) put: char)] ) . SmallScheme define:  #'stringX3DX3F'    "string=?"  as: (        [ :s1 :s2 |  ( s1 = s2)] ) . SmallScheme define:  #'stringX3CX3F'    "string<?"  as: (        [ :s1 :s2 |  ( s1 < s2)] ) . SmallScheme define:  #'stringX3EX3F'    "string>?"  as: (        [ :s1 :s2 |  ( s1 > s2)] ) . SmallScheme define:  #'stringX3EX3DX3F'    "string>=?"  as: (        [ :s1 :s2 |  ( s1 >= s2)] ) . SmallScheme define:  #'stringX3CX3DX3F'    "string<=?"  as: (        [ :s1 :s2 |  ( s1 <= s2)] ) . SmallScheme define:  #'stringX2DciX3DX3F'    "string-ci=?"  as: (        [ :s1 :s2 |  ( ( s1 asLowercase) = ( s2 asLowercase))] ) . SmallScheme define:  #'stringX2DciX3CX3F'    "string-ci<?"  as: (        [ :s1 :s2 |  ( ( s1 asLowercase) < ( s2 asLowercase))] ) . SmallScheme define:  #'stringX2DciX3EX3F'    "string-ci>?"  as: (        [ :s1 :s2 |  ( ( s1 asLowercase) > ( s2 asLowercase))] ) . SmallScheme define:  #'stringX2DciX3CX3DX3F'    "string-ci<=?"  as: (        [ :s1 :s2 |  ( ( s1 asLowercase) <= ( s2 asLowercase))] ) . SmallScheme define:  #'stringX2DciX3EX3DX3F'    "string-ci>=?"  as: (        [ :s1 :s2 |  ( ( s1 asLowercase) >= ( s2 asLowercase))] ) . SmallScheme define:  #'substring'  as: (        [ :str :start :end |  ((( (((((SmallScheme globalRef:  #'X3CX3D')                        value: ( 00) value: ( start))) == false) not)                   	ifTrue: [ (((((SmallScheme globalRef:  #'X3CX3D')                            value: ( start) value: ( end))) == false) not)                       	ifTrue: [((SmallScheme globalRef:  #'X3CX3D')                            value: ( end) value: (((SmallScheme globalRef:  #'stringX2Dlength')                            value: ( str))))]                       	ifFalse: [ false]]                   	ifFalse: [ false]) == false) not)               	ifTrue: [ ( str copyFrom:((SmallScheme globalRef:  #'X2B')                    value: ( start) value: ( 1)) to: end)]               	ifFalse: [((SmallScheme globalRef:  #'error')                    value: ( 'substring: indexing error'))]] ) . SmallScheme define:  #'stringX2Dappend'    "string-append"  as: (        [ :strings |            strings := strings asRest.            (((((SmallScheme globalRef:  #'nullX3F')                    value: ( strings))) == false) not)               	ifTrue: [ '']               	ifFalse: [ (((((SmallScheme globalRef:  #'nullX3F')                        value: (((SmallScheme globalRef:  #'cdr')                        value: ( strings))))) == false) not)                   	ifTrue: [((SmallScheme globalRef:  #'car')                        value: ( strings))]                   	ifFalse: [((SmallScheme globalRef:  #'reduce')                        value: (                   [ :s1 :s2 |  ( s1 , s2)]) value: (((SmallScheme globalRef:  #'car')                        value: ( strings))) value: (((SmallScheme globalRef:  #'cdr')                        value: ( strings))))]]] withLastArgRest  ) . SmallScheme define:  #'stringX2DX3Elist'    "string->list"  as: (        [ :str |  ( ( str collectArray:           [ :c |  c]) asRest)] ) . SmallScheme define:  #'listX2DX3Estring'    "list->string"  as: (        [ :list |  (((((SmallScheme globalRef:  #'nullX3F')                    value: ( list))) == false) not)               	ifTrue: [ '']               	ifFalse: [ [ :str |                     [                      ( list collect:                     [ :char |  ( str := str , char asString)]).                      str.                    ] value.               ] valueWithArguments: {( ( '')). }]] ) . SmallScheme define:  #'stringX2Dcopy'    "string-copy"  as: (        [ :str |  ( str copy)] ) . SmallScheme define:  #'stringX2DfillX21'    "string-fill!!"  as: (        [ :str :char |             [ | loop |                loop :=                [ :idx |                 (((((SmallScheme globalRef:  #'X3C')                        value: ( idx) value: ( 00))) == false) not)                   	ifTrue: [ str]                   	ifFalse: [ [                     ((SmallScheme globalRef:  #'stringX2DsetX21')                          value: ( str) value: ( idx) value: ( char)).                     (loop value: (((SmallScheme globalRef:  #'X2D')                          value: ( idx) value: ( 1)))).                    ] value]           ].           loop valueWithArguments: {               ((SmallScheme globalRef:  #'X2D')                    value: (((SmallScheme globalRef:  #'stringX2Dlength')                    value: ( str))) value: ( 1)). } ] value] ) .! !