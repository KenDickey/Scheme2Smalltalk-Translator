'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/eval.scm'!!SmallScheme class methodsFor: 'initialization'!initEval SmallScheme define:  #'eval'  as: (        [ :exp :envX2Dspec |            [ :stringX2Dport |              [ :schemeX2Dexp |                [ :stX2Dexp |                  (( ( Utilities evaluate: stX2Dexp in: nil to: nil)) value: ( envX2Dspec))               ] value: ( (((SmallScheme globalRef:  #'scheme2smalltalk')                    value: ( schemeX2Dexp) value: ( stringX2Dport)) contents))             ] value: ( (((((SmallScheme globalRef:  #'stringX3F')                      value: ( exp))) == false) not)                 	ifTrue: [ exp]                 	ifFalse: [ ( exp asSchemeObjString)])           ] value: (((SmallScheme globalRef:  #'openX2DoutputX2Dstring')                value))] ) . SmallScheme define:  #'schemeX2DreportX2Denvironment'    "scheme-report-environment"  as: (        [ :version |  ( SmallScheme newEnv)] ) . SmallScheme define:  #'nullX2Denvironment'    "null-environment"  as: (        [ :version |  ( SmallScheme newEnv)] ) . SmallScheme define:  #'interactionX2Denvironment'    "interaction-environment"  as: (        [ ( schemeEnv)] ) . SmallScheme define:  #'load'  as: (        [ :fileX2DnameX2Dstring | ((SmallScheme globalRef:  #'callX2DwithX2DinputX2Dfile')                value: ( fileX2DnameX2Dstring) value: (           [ :in |                 [ | loop |                    loop :=                    [ :form |                     (((((SmallScheme globalRef:  #'eofX2DobjectX3F')                            value: ( form))) == false) not)                       	ifTrue: [ fileX2DnameX2Dstring]                       	ifFalse: [ [                         ((SmallScheme globalRef:  #'eval')                              value: ( form) value: (((SmallScheme globalRef:  #'interactionX2Denvironment')                              value))).                         (loop value: (((SmallScheme globalRef:  #'read')                              value: ( in)))).                        ] value]               ].               loop valueWithArguments: {                   ((SmallScheme globalRef:  #'read')                        value: ( in)). } ] value]))] ) .! !