'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test4.scm'!!SmallScheme methodsFor: 'user'!test4    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'symbolX3F')     ) value: ( #'foo')).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'symbolX3F')     ) value: (((schemeEnv globalRef:  #'car')      value: ( ({ #'a'.  #'b'. } asRest))))).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'symbolX3F')     ) value: ( 'bar')).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'symbolX3F')     ) value: ( #'nil')).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'symbolX3F')     ) value: ( nil)).((schemeEnv globalRef:  #'test')      value: ( false) value: ( (schemeEnv globalRef:  #'symbolX3F')     ) value: ( false)). schemeEnv define:  #'charX2DstandardX2Dcase'    "char-standard-case"  as: (  (schemeEnv globalRef:  #'charX2Dupcase')            ) . (((((schemeEnv globalRef:  #'stringX3DX3F')          value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')          value: ( #'a'))) value: ( 'a'))) == false) not)     	ifTrue: [(schemeEnv setX21:  #'charX2DstandardX2Dcase' as:  (schemeEnv globalRef:  #'charX2Ddowncase')         )].((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'standardX2Dcase') value: (((schemeEnv globalRef:  #'stringX3DX3F')      value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')      value: ( #'a'))) value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')      value: ( #'a')))))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'standardX2Dcase') value: ( [ :temp110 |       ((( temp110) == false) not)         	ifTrue: [ temp110]         	ifFalse: [((schemeEnv globalRef:  #'stringX3DX3F')              value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')              value: ( #'a'))) value: ( 'a'))]. ] valueWithArguments: {(((schemeEnv globalRef:  #'stringX3DX3F')          value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')          value: ( #'a'))) value: ( 'A'))). })). schemeEnv define:  #'strX2Dcopy'    "str-copy"  as: (        [ :s |  [ :v |                                [ | doX2Dloop111 |                    doX2Dloop111 :=                    [ :i |                     (((((schemeEnv globalRef:  #'X3C')                            value: ( i) value: ( 00))) == false) not)                       	ifTrue: [ v]                       	ifFalse: [ [                         ((schemeEnv globalRef:  #'stringX2DsetX21')                              value: ( v) value: ( i) value: (((schemeEnv globalRef:  #'stringX2Dref')                              value: ( s) value: ( i)))).                         (doX2Dloop111 value: (((schemeEnv globalRef:  #'X2D')                              value: ( i) value: ( 1)))).                        ] value]               ].               doX2Dloop111 valueWithArguments: {                   ((schemeEnv globalRef:  #'X2D')                        value: (((schemeEnv globalRef:  #'stringX2Dlength')                        value: ( v))) value: ( 1)). } ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'makeX2Dstring')                    value: (((schemeEnv globalRef:  #'stringX2Dlength')                    value: ( s))))). }] ) . schemeEnv define:  #'stringX2DstandardX2Dcase'    "string-standard-case"  as: (        [ :s |  [             (s := ((schemeEnv globalRef:  #'strX2Dcopy')                  value: ( s))).                           [ | doX2Dloop112 |                  doX2Dloop112 :=                  [ :i :sl |                   (((((schemeEnv globalRef:  #'X3EX3D')                          value: ( i) value: ( sl))) == false) not)                     	ifTrue: [ s]                     	ifFalse: [ [                       ((schemeEnv globalRef:  #'stringX2DsetX21')                            value: ( s) value: ( i) value: (((schemeEnv globalRef:  #'charX2DstandardX2Dcase')                            value: (((schemeEnv globalRef:  #'stringX2Dref')                            value: ( s) value: ( i)))))).                       (doX2Dloop112 value: (((schemeEnv globalRef:  #'X2B')                            value: ( 1) value: ( i))) value: ( sl)).                      ] value]             ].             doX2Dloop112 valueWithArguments: {                  00.                  ((schemeEnv globalRef:  #'stringX2Dlength')                      value: ( s)). } ] value.            ] value] ) .((schemeEnv globalRef:  #'test')      value: (((schemeEnv globalRef:  #'stringX2DstandardX2Dcase')      value: ( 'flying-fish'))) value: ( (schemeEnv globalRef:  #'symbolX2DX3Estring')     ) value: ( #'flyingX2Dfish')).((schemeEnv globalRef:  #'test')      value: (((schemeEnv globalRef:  #'stringX2DstandardX2Dcase')      value: ( 'martin'))) value: ( (schemeEnv globalRef:  #'symbolX2DX3Estring')     ) value: ( #'martin')).((schemeEnv globalRef:  #'test')      value: ( 'Malvina') value: ( (schemeEnv globalRef:  #'symbolX2DX3Estring')     ) value: (((schemeEnv globalRef:  #'stringX2DX3Esymbol')      value: ( 'Malvina')))).((schemeEnv globalRef:  #'test')      value: ( true) value: ( #'standardX2Dcase') value: (((schemeEnv globalRef:  #'eqX3F')      value: ( #'a') value: ( #'a')))). schemeEnv define:  #'x'  as: ( ((schemeEnv globalRef:  #'listX2DX3Estring')            value: (((schemeEnv globalRef:  #'list')            value: ( $a) value: ( $b)))) ) . schemeEnv define:  #'y'  as: ( ((schemeEnv globalRef:  #'stringX2DX3Esymbol')            value: ( (schemeEnv globalRef:  #'x')           )) ) .((schemeEnv globalRef:  #'stringX2DsetX21')      value: ( (schemeEnv globalRef:  #'x')     ) value: ( 00) value: ( $c)).((schemeEnv globalRef:  #'test')      value: ( 'cb') value: ( #'stringX2DsetX21') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'test')      value: ( 'ab') value: ( (schemeEnv globalRef:  #'symbolX2DX3Estring')     ) value: ( (schemeEnv globalRef:  #'y')     )).((schemeEnv globalRef:  #'test')      value: ( (schemeEnv globalRef:  #'y')     ) value: ( (schemeEnv globalRef:  #'stringX2DX3Esymbol')     ) value: ( 'ab')).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'eqX3F')     .  #'mississippi'.  #'mississippi'.}).((schemeEnv globalRef:  #'test')      value: ( false) value: ( #'stringX2DX3Esymbol') value: (((schemeEnv globalRef:  #'eqX3F')      value: ( #'bitblt') value: (((schemeEnv globalRef:  #'stringX2DX3Esymbol')      value: ( 'bitBlt')))))).((schemeEnv globalRef:  #'test')      value: ( #'jollywog') value: ( (schemeEnv globalRef:  #'stringX2DX3Esymbol')     ) value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')      value: ( #'jollywog')))).((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 5) value: ( 5)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'numberX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'complexX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'realX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'rationalX3F')     ) value: ( 3)).((schemeEnv globalRef:  #'reportX2Derrs')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !