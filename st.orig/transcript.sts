'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/transcript.scm'!!SmallScheme class methodsFor: 'initialization'!initTranscript SmallScheme define:  #'transcriptX3Aport'    "transcript:port"  as: (  ( Transcript) ) . SmallScheme define:  #'transcriptX2Don'    "transcript-on"  as: (        [ :filename | (SmallScheme setX21:  #'transcriptX3Aport' as: ((SmallScheme globalRef:  #'openX2DoutputX2Dfile')                value: ( filename)))] ) . SmallScheme define:  #'transcriptX2Doff'    "transcript-off"  as: (        [ [              (((((SmallScheme globalRef:  #'outputX2DportX3F')                      value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                     ))) == false) not)                 	ifTrue: [((SmallScheme globalRef:  #'closeX2DoutputX2Dport')                      value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                     ))].             (SmallScheme setX21:  #'transcriptX3Aport' as:  ( Transcript)).            ] value] ) . SmallScheme define:  #'readX2Dchar'    "read-char"  as: (  [ :readX2Dchar :writeX2Dchar |                       [ :opt |                opt := opt asRest.                [ :ans |                     [                      [ :temp55 |                           ((( temp55) == false) not)                             	ifTrue: [ temp55]                             	ifFalse: [ (((((SmallScheme globalRef:  #'outputX2DportX3F')                                      value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                                     ))) == false) not)                                 	ifTrue: [(writeX2Dchar value: ( ans) value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                                     ))]                                 	ifFalse: [ 'Unspecified']].                     ] valueWithArguments: {(((SmallScheme globalRef:  #'eofX2DobjectX3F')                              value: ( ans))). }.                      ans.                    ] value.               ] valueWithArguments: {(((SmallScheme globalRef:  #'apply')                        value: ( readX2Dchar) value: ( opt))). }] withLastArgRest .       ] valueWithArguments: {( (SmallScheme globalRef:  #'readX2Dchar')               ). ( (SmallScheme globalRef:  #'writeX2Dchar')               ). } ) . SmallScheme define:  #'read'  as: (  [ :read :write :newline |                       [ :opt |                opt := opt asRest.                [ :ans |                     [                      [ :temp56 |                           ((( temp56) == false) not)                             	ifTrue: [ temp56]                             	ifFalse: [ (((((SmallScheme globalRef:  #'outputX2DportX3F')                                      value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                                     ))) == false) not)                                 	ifTrue: [ [                                   (write value: ( ans) value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                                       )).                                    (((((SmallScheme globalRef:  #'eqvX3F')                                            value: ((Character cr)) value: (((SmallScheme globalRef:  #'apply')                                            value: ( (SmallScheme globalRef:  #'peekX2Dchar')                                           ) value: ( opt))))) == false) not)                                       	ifTrue: [(newline value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                                           ))].                                  ] value]                                 	ifFalse: [ 'Unspecified']].                     ] valueWithArguments: {(((SmallScheme globalRef:  #'eofX2DobjectX3F')                              value: ( ans))). }.                      ans.                    ] value.               ] valueWithArguments: {(((SmallScheme globalRef:  #'apply')                        value: ( read) value: ( opt))). }] withLastArgRest .       ] valueWithArguments: {( (SmallScheme globalRef:  #'read')               ). ( (SmallScheme globalRef:  #'write')               ). ( (SmallScheme globalRef:  #'newline')               ). } ) . SmallScheme define:  #'writeX2Dchar'    "write-char"  as: (  [ :writeX2Dchar |                       [ :obj :opt |                opt := opt asRest.                [                 ((SmallScheme globalRef:  #'apply')                      value: ( writeX2Dchar) value: ( obj) value: ( opt)).                  (((((SmallScheme globalRef:  #'outputX2DportX3F')                          value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))) == false) not)                     	ifTrue: [(writeX2Dchar value: ( obj) value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))].                ] value] withLastArgRest .       ] valueWithArguments: {( (SmallScheme globalRef:  #'writeX2Dchar')               ). } ) . SmallScheme define:  #'write'  as: (  [ :write |                       [ :obj :opt |                opt := opt asRest.                [                 ((SmallScheme globalRef:  #'apply')                      value: ( write) value: ( obj) value: ( opt)).                  (((((SmallScheme globalRef:  #'outputX2DportX3F')                          value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))) == false) not)                     	ifTrue: [(write value: ( obj) value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))].                ] value] withLastArgRest .       ] valueWithArguments: {( (SmallScheme globalRef:  #'write')               ). } ) . SmallScheme define:  #'display'  as: (  [ :display |                       [ :obj :opt |                opt := opt asRest.                [                 ((SmallScheme globalRef:  #'apply')                      value: ( display) value: ( obj) value: ( opt)).                  (((((SmallScheme globalRef:  #'outputX2DportX3F')                          value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))) == false) not)                     	ifTrue: [(display value: ( obj) value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))].                ] value] withLastArgRest .       ] valueWithArguments: {( (SmallScheme globalRef:  #'display')               ). } ) . SmallScheme define:  #'newline'  as: (  [ :newline |                       [ :opt |                opt := opt asRest.                [                 ((SmallScheme globalRef:  #'apply')                      value: ( newline) value: ( opt)).                  (((((SmallScheme globalRef:  #'outputX2DportX3F')                          value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))) == false) not)                     	ifTrue: [(newline value: ( (SmallScheme globalRef:  #'transcriptX3Aport')                         ))].                ] value] withLastArgRest .       ] valueWithArguments: {( (SmallScheme globalRef:  #'newline')               ). } ) .! !