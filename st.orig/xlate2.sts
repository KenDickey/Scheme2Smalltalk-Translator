'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/xlate2.scm'!!SmallScheme methodsFor: 'user'!xlate2    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'defineX2Dindent'    "define-indent"  as: (  6 ) . schemeEnv define:  #'xlateX2DX3EstsX2Ddefine'    "xlate->sts-define"  as: (        [ :exp :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                  value: ( offset) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'global')                  value: ( '') value: ( 'define: '))) value: ( port)).              [ :defX2Dname |                   [                   ((schemeEnv globalRef:  #'xlateX2Dsymbol')                        value: ( defX2Dname) value: ( port)).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( defX2Dname) value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                            value: ( defX2Dname))))))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2DsymbolX2DasX2DstX2Dcomment')                            value: ( defX2Dname) value: ( port))].                   ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                        value: ( offset) value: ( port)).                   ((schemeEnv globalRef:  #'display')                        value: ( ' as: ( ') value: ( port)).                   ((schemeEnv globalRef:  #'xlate')                                           valueWithArguments: { ((schemeEnv globalRef:  #'definitionX2Dbody')                        value: ( exp)).  ctX2Denv. ((schemeEnv globalRef:  #'X2B')                        value: ( offset) value: ( (schemeEnv globalRef:  #'defineX2Dindent')                       )).  port.}).                   ((schemeEnv globalRef:  #'display')                        value: ( ' )') value: ( port)).                   ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                        value: ( offset) value: ( port)).                  ] value.             ] valueWithArguments: {(((schemeEnv globalRef:  #'definitionX2Dname')                      value: ( exp))). }.            ] value] ) . schemeEnv define:  #'xlateX2DX3EstsX2Dvariable'    "xlate->sts-variable"  as: (        [ :variableX2Dname :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( $ ) value: ( port)).              (((((schemeEnv globalRef:  #'not')                      value: (((schemeEnv globalRef:  #'isX2DglobalX3F')                      value: ( variableX2Dname) value: ( ctX2Denv))))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                      value: ( variableX2Dname))) value: ( port))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'xlateX2DglobalX2Dref')                        value: ( variableX2Dname) value: ( port)).                   ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                        value: (((schemeEnv globalRef:  #'X2B')                        value: ( 4) value: ( offset))) value: ( port)).                  ] value].            ] value] ) . schemeEnv define:  #'xlateX2DsymbolX2DasX2DstX2Dcomment'    "xlate-symbol-as-st-comment"  as: (        [ :sym :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( '    "') value: ( port)).             ((schemeEnv globalRef:  #'forX2Deach')                  value: (             [ :char |  [                   ((schemeEnv globalRef:  #'display')                        value: ( char) value: ( port)).                    (((((schemeEnv globalRef:  #'charX3DX3F')                            value: ( char) value: ( $!!))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'display')                            value: ( char) value: ( port))].                  ] value]) value: (((schemeEnv globalRef:  #'stringX2DX3Elist')                  value: (((schemeEnv globalRef:  #'symbolX2DX3Estring')                  value: ( sym)))))).             ((schemeEnv globalRef:  #'display')                  value: ( '"') value: ( port)).            ] value] ) . schemeEnv define:  #'schemeX2DX3EsmalltalkX2Didentifier'    "scheme->smalltalk-identifier"  as: (  [ :specials |                       [ :name |                 [ | loop |                    loop :=                    [ :result :chars |                     (((((schemeEnv globalRef:  #'nullX3F')                            value: ( chars))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'stringX2DX3Esymbol')                            value: (((schemeEnv globalRef:  #'listX2DX3Estring')                            value: (((schemeEnv globalRef:  #'reverse')                            value: ( result))))))]                       	ifFalse: [ [ :char |                             (((((schemeEnv globalRef:  #'memq')                                    value: ( char) value: ( specials))) == false) not)                               	ifTrue: [(loop value: (((schemeEnv globalRef:  #'addX2DreverseX2DhexX2Dchars')                                    value: ( char) value: ( result))) value: (((schemeEnv globalRef:  #'cdr')                                    value: ( chars))))]                               	ifFalse: [ (((((schemeEnv globalRef:  #'charX3DX3F')                                        value: ( char) value: ( $X))) == false) not)                                   	ifTrue: [(loop value: (((schemeEnv globalRef:  #'cons')                                        value: ( $X) value: (((schemeEnv globalRef:  #'cons')                                        value: ( $X) value: ( result))))) value: (((schemeEnv globalRef:  #'cdr')                                        value: ( chars))))]                                   	ifFalse: [(loop value: (((schemeEnv globalRef:  #'cons')                                        value: ( char) value: ( result))) value: (((schemeEnv globalRef:  #'cdr')                                        value: ( chars))))]].                       ] valueWithArguments: {(((schemeEnv globalRef:  #'car')                                value: ( chars))). }]               ].               loop valueWithArguments: {                    nil.                    ((schemeEnv globalRef:  #'stringX2DX3Elist')                        value: ( (((((schemeEnv globalRef:  #'symbolX3F')                            value: ( name))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'symbolX2DX3Estring')                            value: ( name))]                       	ifFalse: [ name])). } ] value].       ] valueWithArguments: {( ({ $!!.  $$.  $%.  $&.  $*.  $+.  $-.  $..  $/.  $:.  $<.  $=.  $>.  $?.  $@.  $^.  $_.  $~. } asRest)). } ) . schemeEnv define:  #'addX2DreverseX2DhexX2Dchars'    "add-reverse-hex-chars"  as: (        [ :char :result |            [ :chars |              ((schemeEnv globalRef:  #'append')                  value: (((schemeEnv globalRef:  #'reverse')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( $X) value: ( chars))))) value: ( result))           ] value: (((schemeEnv globalRef:  #'stringX2DX3Elist')                value: (((schemeEnv globalRef:  #'numberX2DX3Estring')                value: (((schemeEnv globalRef:  #'charX2DX3Einteger')                value: ( char))) value: ( 16)))))] ) . schemeEnv define:  #'xlateX2Dnumber'    "xlate-number"  as: (        [ :number :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( $ ) value: ( port)).              (((((schemeEnv globalRef:  #'X3C')                      value: (((schemeEnv globalRef:  #'abs')                      value: ( number))) value: ( 1))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( '0') value: ( port))].             ((schemeEnv globalRef:  #'display')                  value: ( number) value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2Dstring'    "xlate-string"  as: (        [ :string :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( ' ''') value: ( port)).             ((schemeEnv globalRef:  #'forX2Deach')                  value: (             [ :char |  [                   ((schemeEnv globalRef:  #'display')                        value: ( char) value: ( port)).                    (((((schemeEnv globalRef:  #'charX3DX3F')                            value: ( char) value: ( $'))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'display')                            value: ( char) value: ( port))]                       	ifFalse: [ (((((schemeEnv globalRef:  #'charX3DX3F')                                value: ( char) value: ( $`))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'display')                                value: ( char) value: ( port))]                           	ifFalse: [ (((((schemeEnv globalRef:  #'charX3DX3F')                                    value: ( char) value: ( $!!))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'display')                                    value: ( char) value: ( port))]]].                  ] value]) value: (((schemeEnv globalRef:  #'stringX2DX3Elist')                  value: ( string)))).             ((schemeEnv globalRef:  #'display')                  value: ( '''') value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2Dchar'    "xlate-char"  as: (        [ :char :port |  (((((schemeEnv globalRef:  #'eqX3F')                    value: ( char) value: ((Character cr)))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'display')                    value: ( '(Character cr)') value: ( port))]               	ifFalse: [ [                 ((schemeEnv globalRef:  #'display')                      value: ( ' $') value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( char) value: ( port)).                  (((((schemeEnv globalRef:  #'charX3DX3F')                          value: ( char) value: ( $!!))) == false) not)                     	ifTrue: [((schemeEnv globalRef:  #'display')                          value: ( char) value: ( port))].                ] value]] ) . schemeEnv define:  #'xlateX2Dboolean'    "xlate-boolean"  as: (        [ :boolean :port |  ((( boolean) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'display')                    value: ( ' true') value: ( port))]               	ifFalse: [((schemeEnv globalRef:  #'display')                    value: ( ' false') value: ( port))]] ) . schemeEnv define:  #'xlateX2DemptyX2Dlist'    "xlate-empty-list"  as: (        [ :exp :port | ((schemeEnv globalRef:  #'display')                value: ( ' nil') value: ( port))] ) . schemeEnv define:  #'xlateX2Dsymbol'    "xlate-symbol"  as: (        [ :sym :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( ' #''') value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                  value: ( sym))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( $') value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2DglobalX2Dref'    "xlate-global-ref"  as: (        [ :name :port |  [             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'global')                  value: ( '(') value: ( 'globalRef: '))) value: ( port)).             ((schemeEnv globalRef:  #'xlateX2Dsymbol')                  value: ( name) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( ')') value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2Dformals'    "xlate-formals"  as: (        [ :formals :port |  (((((schemeEnv globalRef:  #'X3E')                    value: (((schemeEnv globalRef:  #'length')                    value: ( formals))) value: ( 00))) == false) not)               	ifTrue: [ [                 ((schemeEnv globalRef:  #'forX2Deach')                      value: (                 [ :name |  [                       ((schemeEnv globalRef:  #'display')                            value: ( ' :') value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                            value: ( name))) value: ( port)).                      ] value]) value: ( formals)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' | ') value: ( port)).                ] value]] ) . schemeEnv define:  #'xlateX2Dquote'    "xlate-quote"  as: (        [ :exp :offset :port |  (((((schemeEnv globalRef:  #'symbolX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dsymbol')                    value: ( exp) value: ( port))]               	ifFalse: [ (((((schemeEnv globalRef:  #'numberX3F')                        value: ( exp))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dnumber')                        value: ( exp) value: ( port))]                   	ifFalse: [ (((((schemeEnv globalRef:  #'booleanX3F')                            value: ( exp))) == false) not)                       	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dboolean')                            value: ( exp) value: ( port))]                       	ifFalse: [ (((((schemeEnv globalRef:  #'stringX3F')                                value: ( exp))) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dstring')                                value: ( exp) value: ( port))]                           	ifFalse: [ (((((schemeEnv globalRef:  #'charX3F')                                    value: ( exp))) == false) not)                               	ifTrue: [((schemeEnv globalRef:  #'xlateX2Dchar')                                    value: ( exp) value: ( port))]                               	ifFalse: [ (((((schemeEnv globalRef:  #'emptyX2DlistX3F')                                        value: ( exp))) == false) not)                                   	ifTrue: [((schemeEnv globalRef:  #'display')                                        value: ( ' nil') value: ( port))]                                   	ifFalse: [ (((((schemeEnv globalRef:  #'listX3F')                                            value: ( exp))) == false) not)                                       	ifTrue: [ [                                         ((schemeEnv globalRef:  #'display')                                              value: ( ' ({') value: ( port)).                                         ((schemeEnv globalRef:  #'forX2Deach')                                              value: (                                         [ :thing |  [                                               ((schemeEnv globalRef:  #'xlateX2Dquote')                                                    value: ( thing) value: ( offset) value: ( port)).                                               ((schemeEnv globalRef:  #'display')                                                    value: ( '. ') value: ( port)).                                              ] value]) value: ( exp)).                                         ((schemeEnv globalRef:  #'display')                                              value: ( '} asRest)') value: ( port)).                                        ] value]                                       	ifFalse: [ (((((schemeEnv globalRef:  #'pairX3F')                                                value: ( exp))) == false) not)                                           	ifTrue: [ [                                             ((schemeEnv globalRef:  #'display')                                                  value: ( ' (Pair car: ') value: ( port)).                                             ((schemeEnv globalRef:  #'xlateX2Dquote')                                                  value: (((schemeEnv globalRef:  #'car')                                                  value: ( exp))) value: ( offset) value: ( port)).                                             ((schemeEnv globalRef:  #'display')                                                  value: ( ' cdr: ') value: ( port)).                                             ((schemeEnv globalRef:  #'xlateX2Dquote')                                                  value: (((schemeEnv globalRef:  #'cdr')                                                  value: ( exp))) value: ( offset) value: ( port)).                                             ((schemeEnv globalRef:  #'display')                                                  value: ( ')') value: ( port)).                                            ] value]                                           	ifFalse: [ (((((schemeEnv globalRef:  #'vectorX3F')                                                    value: ( exp))) == false) not)                                               	ifTrue: [ [                                                 ((schemeEnv globalRef:  #'display')                                                      value: ( ' {') value: ( port)).                                                 ((schemeEnv globalRef:  #'forX2Deach')                                                      value: (                                                 [ :thing |  [                                                       ((schemeEnv globalRef:  #'xlateX2Dquote')                                                            value: ( thing) value: ( offset) value: ( port)).                                                       ((schemeEnv globalRef:  #'display')                                                            value: ( '. ') value: ( port)).                                                      ] value]) value: (((schemeEnv globalRef:  #'vectorX2DX3Elist')                                                      value: ( exp)))).                                                 ((schemeEnv globalRef:  #'display')                                                      value: ( '}') value: ( port)).                                                ] value]                                               	ifFalse: [((schemeEnv globalRef:  #'error')                                                    value: ( 'unknown quoted expression type') value: ( exp))]]]]]]]]]] ) . schemeEnv define:  #'ifX2Dindent'    "if-indent"  as: (  4 ) . schemeEnv define:  #'xlateX2DX3EstsX2Dif'    "xlate->sts-if"  as: (        [ :exp :ctX2Denv :offset :port |  [ :ifX2Doffset |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( ' (((') value: ( port)).                 ((schemeEnv globalRef:  #'xlate')                                       valueWithArguments: { ((schemeEnv globalRef:  #'ifX2Dpredicate')                      value: ( exp)).  ctX2Denv.  ifX2Doffset.  port.}).                 ((schemeEnv globalRef:  #'display')                      value: ( ') == false) not)') value: ( port)).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( ifX2Doffset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( '	ifTrue: [') value: ( port)).                 ((schemeEnv globalRef:  #'xlate')                                       valueWithArguments: { ((schemeEnv globalRef:  #'ifX2Dconsequent')                      value: ( exp)).  ctX2Denv.  ifX2Doffset.  port.}).                 ((schemeEnv globalRef:  #'display')                      value: ( $]) value: ( port)).                  (((((schemeEnv globalRef:  #'ifX2DhasX2DalternateX3F')                          value: ( exp))) == false) not)                     	ifTrue: [ [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( ifX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: ( '	ifFalse: [') value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: { ((schemeEnv globalRef:  #'ifX2Dalternate')                            value: ( exp)).  ctX2Denv.  ifX2Doffset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( $]) value: ( port)).                      ] value].                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X2B')                    value: ( offset) value: ( (schemeEnv globalRef:  #'ifX2Dindent')                   ))). }] ) . schemeEnv define:  #'beginX2Dindent'    "begin-indent"  as: (  2 ) . schemeEnv define:  #'xlateX2DX3EstsX2Dbegin'    "xlate->sts-begin"  as: (        [ :exp :ctX2Denv :offset :port |  [ :newX2Doffset |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( ' [') value: ( port)).                 ((schemeEnv globalRef:  #'map')                      value: (                 [ :exp |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( newX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: {  exp.  ctX2Denv.  newX2Doffset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( $.) value: ( port)).                      ] value]) value: (((schemeEnv globalRef:  #'beginX2Dsubexpressions')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' ] value') value: ( port)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X2B')                    value: ( offset) value: ( (schemeEnv globalRef:  #'beginX2Dindent')                   ))). }] ) . schemeEnv define:  #'setX21X2Dvar'    "set!!-var"  as: (  (schemeEnv globalRef:  #'cadr')            ) . schemeEnv define:  #'setX21X2Dval'    "set!!-val"  as: (  (schemeEnv globalRef:  #'caddr')            ) . schemeEnv define:  #'xlateX2DX3EstsX2DsetX21'    "xlate->sts-set!!"  as: (        [ :exp :ctX2Denv :offset :port |  [ :var :val |                 [                  ((( (((((schemeEnv globalRef:  #'pairX3F')                              value: ( var))) == false) not)                         	ifTrue: [((schemeEnv globalRef:  #'eqX3F')                              value: (((schemeEnv globalRef:  #'car')                              value: ( var))) value: ( #'X24'))]                         	ifFalse: [ false]) == false) not)                     	ifTrue: [ [                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'global')                            value: ( '(') value: ( 'setX21: '))) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'cadr')                            value: ( var))) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: ( ' as: ') value: ( port)).                      ] value]                     	ifFalse: [ (((((schemeEnv globalRef:  #'isX2DglobalX3F')                              value: ( var) value: ( ctX2Denv))) == false) not)                         	ifTrue: [ [                           ((schemeEnv globalRef:  #'display')                                value: (((schemeEnv globalRef:  #'global')                                value: ( '(') value: ( 'setX21: '))) value: ( port)).                           ((schemeEnv globalRef:  #'xlateX2Dsymbol')                                value: ( var) value: ( port)).                           ((schemeEnv globalRef:  #'display')                                value: ( ' as: ') value: ( port)).                          ] value]                         	ifFalse: [ [                           ((schemeEnv globalRef:  #'display')                                value: ( '(') value: ( port)).                           ((schemeEnv globalRef:  #'display')                                value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                                value: ( var))) value: ( port)).                           ((schemeEnv globalRef:  #'display')                                value: ( ' := ') value: ( port)).                          ] value]].                 ((schemeEnv globalRef:  #'xlate')                                       valueWithArguments: {  val.  ctX2Denv.  offset.  port.}).                 ((schemeEnv globalRef:  #'display')                      value: ( ')') value: ( port)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'setX21X2Dvar')                    value: ( exp))). (((schemeEnv globalRef:  #'setX21X2Dval')                    value: ( exp))). }] ) . schemeEnv define:  #'letX2Dbindings'    "let-bindings"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'namedX2DletX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'caddr')                    value: ( exp))]               	ifFalse: [((schemeEnv globalRef:  #'cadr')                    value: ( exp))]] ) . schemeEnv define:  #'letX2Dbody'    "let-body"  as: (        [ :exp |  (((((schemeEnv globalRef:  #'namedX2DletX3F')                    value: ( exp))) == false) not)               	ifTrue: [((schemeEnv globalRef:  #'cdddr')                    value: ( exp))]               	ifFalse: [((schemeEnv globalRef:  #'cddr')                    value: ( exp))]] ) . schemeEnv define:  #'letX2Dformal'    "let-formal"  as: (  (schemeEnv globalRef:  #'car')            ) . schemeEnv define:  #'letX2Dinit'    "let-init"  as: (  (schemeEnv globalRef:  #'cadr')            ) . schemeEnv define:  #'letX2Dformals'    "let-formals"  as: (        [ :exp | ((schemeEnv globalRef:  #'map')                value: ( (schemeEnv globalRef:  #'letX2Dformal')               ) value: (((schemeEnv globalRef:  #'letX2Dbindings')                value: ( exp))))] ) . schemeEnv define:  #'letX2Dinits'    "let-inits"  as: (        [ :exp | ((schemeEnv globalRef:  #'map')                value: ( (schemeEnv globalRef:  #'letX2Dinit')               ) value: (((schemeEnv globalRef:  #'letX2Dbindings')                value: ( exp))))] ) . schemeEnv define:  #'letX2Dname'    "let-name"  as: (  (schemeEnv globalRef:  #'cadr')            ) . schemeEnv define:  #'letX2DbodyX2Dindent'    "let-body-indent"  as: (  4 ) . schemeEnv define:  #'letX2Dindent'    "let-indent"  as: (  2 ) . schemeEnv define:  #'xlateX2DX3EstsX2Dlet'    "xlate->sts-let"  as: (        [ :exp :ctX2Denv :offset :port |  [ :bodyX2Doffset :formals :inits |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( ' [') value: ( port)).                 ((schemeEnv globalRef:  #'xlateX2Dformals')                      value: ( formals) value: ( port)).                 ((schemeEnv globalRef:  #'map')                      value: (                 [ :bodyX2Dexp |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( bodyX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: {  bodyX2Dexp. ((schemeEnv globalRef:  #'extendX2Denv')                            value: ( formals) value: ( ctX2Denv)).  bodyX2Doffset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( $.) value: ( port)).                      ] value]) value: (((schemeEnv globalRef:  #'letX2Dbody')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( '] ') value: ( port)).                  (((((schemeEnv globalRef:  #'nullX3F')                          value: ( inits))) == false) not)                     	ifTrue: [((schemeEnv globalRef:  #'display')                          value: ( 'value') value: ( port))]                     	ifFalse: [ [                       ((schemeEnv globalRef:  #'display')                            value: ( 'valueWithArguments: {') value: ( port)).                       ((schemeEnv globalRef:  #'map')                            value: (                       [ :init |  [                             ((schemeEnv globalRef:  #'display')                                  value: ( '(') value: ( port)).                             ((schemeEnv globalRef:  #'xlate')                                                               valueWithArguments: {  init.  ctX2Denv.  bodyX2Doffset.  port.}).                             ((schemeEnv globalRef:  #'display')                                  value: ( '). ') value: ( port)).                            ] value]) value: ( inits)).                       ((schemeEnv globalRef:  #'display')                            value: ( '}') value: ( port)).                      ] value].                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X2B')                    value: ( offset) value: ( (schemeEnv globalRef:  #'letX2DbodyX2Dindent')                   ))). (((schemeEnv globalRef:  #'letX2Dformals')                    value: ( exp))). (((schemeEnv globalRef:  #'letX2Dinits')                    value: ( exp))). }] ) . schemeEnv define:  #'namedX2DletX2Dindent'    "named-let-indent"  as: (  4 ) . schemeEnv define:  #'xlateX2DX3EstsX2DnamedX2Dlet'    "xlate->sts-named-let"  as: (        [ :exp :ctX2Denv :offset :port |  [ :newX2Doffset :newX2Denv :tagX2Dname |                 [                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' [ | ') value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( tagX2Dname) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' | ') value: ( port)).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: (((schemeEnv globalRef:  #'X2B')                      value: ( offset) value: ( 4))) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( tagX2Dname) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' := ') value: ( port)).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( newX2Doffset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( '[') value: ( port)).                 ((schemeEnv globalRef:  #'xlateX2Dformals')                      value: (((schemeEnv globalRef:  #'letX2Dformals')                      value: ( exp))) value: ( port)).                 ((schemeEnv globalRef:  #'forX2Deach')                      value: (                 [ :bodyX2Dexp |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( newX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: {  bodyX2Dexp.  newX2Denv.  newX2Doffset.  port.}).                      ] value]) value: (((schemeEnv globalRef:  #'letX2Dbody')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( '].') value: ( port)).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( tagX2Dname) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' valueWithArguments: {') value: ( port)).                 ((schemeEnv globalRef:  #'forX2Deach')                      value: (                 [ :init |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( newX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: {  init.  newX2Denv.  newX2Doffset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( '. ') value: ( port)).                      ] value]) value: (((schemeEnv globalRef:  #'letX2Dinits')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'display')                      value: ( '} ] value') value: ( port)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X2B')                    value: ( offset) value: ( (schemeEnv globalRef:  #'namedX2DletX2Dindent')                   ))). (((schemeEnv globalRef:  #'extendX2Denv')                    value: (((schemeEnv globalRef:  #'cons')                    value: (((schemeEnv globalRef:  #'letX2Dname')                    value: ( exp))) value: (((schemeEnv globalRef:  #'letX2Dformals')                    value: ( exp))))) value: ( ctX2Denv))). (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                    value: (((schemeEnv globalRef:  #'letX2Dname')                    value: ( exp))))). }] ) . schemeEnv define:  #'xlateX2DX3EstsX2DletX2A'    "xlate->sts-let*"  as: (        [ :exp :ctX2Denv :offset :port |             [ | loop |                loop :=                [ :formals :inits :bodyX2Doffset :env |                 (((((schemeEnv globalRef:  #'nullX3F')                        value: ( formals))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'map')                        value: (                   [ :bodyX2Dexp |  [                         ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                              value: ( bodyX2Doffset) value: ( port)).                         ((schemeEnv globalRef:  #'xlate')                                                       valueWithArguments: {  bodyX2Dexp.  env.  bodyX2Doffset.  port.}).                        ] value]) value: (((schemeEnv globalRef:  #'letX2Dbody')                        value: ( exp))))]                   	ifFalse: [ [ :formal :init |                         [                         ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                              value: ( bodyX2Doffset) value: ( port)).                         ((schemeEnv globalRef:  #'display')                              value: ( '[') value: ( port)).                         ((schemeEnv globalRef:  #'xlateX2Dformals')                              value: ( formal) value: ( port)).                         (loop                          valueWithArguments: { ((schemeEnv globalRef:  #'cdr')                              value: ( formals)). ((schemeEnv globalRef:  #'cdr')                              value: ( inits)). ((schemeEnv globalRef:  #'X2B')                              value: ( bodyX2Doffset) value: ( (schemeEnv globalRef:  #'letX2Dindent')                             )). ((schemeEnv globalRef:  #'extendX2Denv')                              value: ( formal) value: ( env)).}).                         ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                              value: ( bodyX2Doffset) value: ( port)).                         ((schemeEnv globalRef:  #'display')                              value: ( '] value: (') value: ( port)).                         ((schemeEnv globalRef:  #'xlate')                                                       valueWithArguments: {  init.  env.  bodyX2Doffset.  port.}).                         ((schemeEnv globalRef:  #'display')                              value: ( ')') value: ( port)).                        ] value.                   ] valueWithArguments: {(((schemeEnv globalRef:  #'list')                            value: (((schemeEnv globalRef:  #'car')                            value: ( formals))))). (((schemeEnv globalRef:  #'car')                            value: ( inits))). }]           ].           loop valueWithArguments: {               ((schemeEnv globalRef:  #'letX2Dformals')                    value: ( exp)).                ((schemeEnv globalRef:  #'letX2Dinits')                    value: ( exp)).                 offset.                 ctX2Denv. } ] value] ) . schemeEnv define:  #'xlateX2DX3EstsX2Dletrec'    "xlate->sts-letrec"  as: (        [ :exp :ctX2Denv :offset :port |            [ :bodyX2Doffset |              [ :initX2Doffset |                [ :formals |                  [ :inits |                    [ :newX2Denv |                       [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( offset) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: ( ' [ |') value: ( port)).                       ((schemeEnv globalRef:  #'forX2Deach')                            value: (                       [ :formal |  [                             ((schemeEnv globalRef:  #'display')                                  value: ( ' ') value: ( port)).                             ((schemeEnv globalRef:  #'display')                                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                                  value: ( formal))) value: ( port)).                            ] value]) value: ( formals)).                       ((schemeEnv globalRef:  #'display')                            value: ( ' |') value: ( port)).                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( offset) value: ( port)).                       ((schemeEnv globalRef:  #'map')                            value: (                       [ :name :init |  [                             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                  value: ( initX2Doffset) value: ( port)).                             ((schemeEnv globalRef:  #'xlateX2DX3EstsX2Dvariable')                                                               valueWithArguments: {  name.  newX2Denv.  offset.  port.}).                             ((schemeEnv globalRef:  #'display')                                  value: ( ' := (') value: ( port)).                             ((schemeEnv globalRef:  #'xlate')                                                               valueWithArguments: {  init.  newX2Denv.  initX2Doffset.  port.}).                             ((schemeEnv globalRef:  #'display')                                  value: ( ').') value: ( port)).                            ] value]) value: ( formals) value: ( inits)).                       ((schemeEnv globalRef:  #'map')                            value: (                       [ :bodyX2Dexp |  [                             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                  value: ( bodyX2Doffset) value: ( port)).                             ((schemeEnv globalRef:  #'xlate')                                                               valueWithArguments: {  bodyX2Dexp.  newX2Denv.  bodyX2Doffset.  port.}).                             ((schemeEnv globalRef:  #'display')                                  value: ( $.) value: ( port)).                            ] value]) value: (((schemeEnv globalRef:  #'letX2Dbody')                            value: ( exp)))).                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( offset) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: ( '] value') value: ( port)).                      ] value                   ] value: (((schemeEnv globalRef:  #'extendX2Denv')                        value: ( formals) value: ( ctX2Denv)))                 ] value: (((schemeEnv globalRef:  #'letX2Dinits')                      value: ( exp)))               ] value: (((schemeEnv globalRef:  #'letX2Dformals')                    value: ( exp)))             ] value: (((schemeEnv globalRef:  #'X2B')                  value: ( offset) value: ( (schemeEnv globalRef:  #'letX2Dindent')                 )))           ] value: (((schemeEnv globalRef:  #'X2B')                value: ( offset) value: ( (schemeEnv globalRef:  #'letX2DbodyX2Dindent')               )))] ) . schemeEnv define:  #'xlateX2DX3EstsX2DdynamicX2Dlet'    "xlate->sts-dynamic-let"  as: (        [ :exp :ctX2Denv :offset :port |  [ :bodyX2Doffset |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( ' [') value: ( port)).                 ((schemeEnv globalRef:  #'map')                      value: (                 [ :binding |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( bodyX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'global')                            value: ( '') value: ( 'dynamicPush: #'))) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                            value: (((schemeEnv globalRef:  #'letX2Dformal')                            value: ( binding))))) value: ( port)).                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: (((schemeEnv globalRef:  #'X2B')                            value: ( 10) value: ( bodyX2Doffset))) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: ( ' as: ') value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: { ((schemeEnv globalRef:  #'letX2Dinit')                            value: ( binding)).  ctX2Denv.  bodyX2Doffset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( $.) value: ( port)).                      ] value]) value: (((schemeEnv globalRef:  #'letX2Dbindings')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'map')                      value: (                 [ :bodyX2Dexp |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( bodyX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: {  bodyX2Dexp.  ctX2Denv.  bodyX2Doffset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( $.) value: ( port)).                      ] value]) value: (((schemeEnv globalRef:  #'letX2Dbody')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                      value: ( offset) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( '] ensure: [') value: ( port)).                 ((schemeEnv globalRef:  #'map')                      value: (                 [ :formal |  [                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                            value: ( bodyX2Doffset) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'global')                            value: ( '') value: ( 'dynamicPop: #'))) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                            value: ( formal))) value: ( port)).                       ((schemeEnv globalRef:  #'display')                            value: ( $.) value: ( port)).                      ] value]) value: (((schemeEnv globalRef:  #'letX2Dformals')                      value: ( exp)))).                 ((schemeEnv globalRef:  #'display')                      value: ( '].') value: ( port)).                 ((schemeEnv globalRef:  #'endline')                      value: ( port)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'X2B')                    value: ( offset) value: ( (schemeEnv globalRef:  #'letX2Dindent')                   ))). }] ) . schemeEnv define:  #'xlateX2DX3EstsX2DdynamicX2Ddefine'    "xlate->sts-dynamic-define"  as: (        [ :exp :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                  value: ( offset) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'global')                  value: ( '') value: ( 'dynamicDefine: #'))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                  value: (((schemeEnv globalRef:  #'definitionX2Dname')                  value: ( exp))))) value: ( port)).             ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                  value: ( offset) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( ' as: ') value: ( port)).             ((schemeEnv globalRef:  #'xlate')                               valueWithArguments: { ((schemeEnv globalRef:  #'definitionX2Dbody')                  value: ( exp)).  ctX2Denv. ((schemeEnv globalRef:  #'X2B')                  value: ( offset) value: ( (schemeEnv globalRef:  #'defineX2Dindent')                 )).  port.}).            ] value] ) . schemeEnv define:  #'xlateX2DX3EstsX2DdynamicX2Dref'    "xlate->sts-dynamic-ref"  as: (        [ :exp :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'global')                  value: ( '(') value: ( 'dynamicRef: #'))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                  value: (((schemeEnv globalRef:  #'cadr')                  value: ( exp))))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( ')') value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2DX3EstsX2DdynamicX2Drwd'    "xlate->sts-dynamic-rwd"  as: (        [ :exp :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'global')                  value: ( '(') value: ( 'dynamicRef: #'))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                  value: (((schemeEnv globalRef:  #'cadr')                  value: ( exp))))) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: ( ' withDefault: ') value: ( port)).             ((schemeEnv globalRef:  #'xlate')                               valueWithArguments: { ((schemeEnv globalRef:  #'caddr')                  value: ( exp)).  ctX2Denv.  offset.  port.}).             ((schemeEnv globalRef:  #'display')                  value: ( ')') value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2DX3EstsX2DdynamicX2DsetX21'    "xlate->sts-dynamic-set!!"  as: (        [ :exp :ctX2Denv :offset :port |  [ :var :val |                 [                 ((schemeEnv globalRef:  #'display')                      value: (((schemeEnv globalRef:  #'global')                      value: ( '(') value: ( 'dynamicSetX21: #'))) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                      value: ( var))) value: ( port)).                 ((schemeEnv globalRef:  #'display')                      value: ( ' as: ') value: ( port)).                 ((schemeEnv globalRef:  #'xlate')                                       valueWithArguments: {  val.  ctX2Denv.  offset.  port.}).                 ((schemeEnv globalRef:  #'display')                      value: ( ')') value: ( port)).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'setX21X2Dvar')                    value: ( exp))). (((schemeEnv globalRef:  #'setX21X2Dval')                    value: ( exp))). }] ) . schemeEnv define:  #'xlateX2DX3EstsX2Dapplication'    "xlate->sts-application"  as: (        [ :exp :ctX2Denv :offset :port |  [ :op |                 [                 ((schemeEnv globalRef:  #'display')                      value: ( '(') value: ( port)).                  (((((schemeEnv globalRef:  #'variableX3F')                          value: ( op))) == false) not)                     	ifTrue: [ (((((schemeEnv globalRef:  #'isX2DglobalX3F')                              value: ( op) value: ( ctX2Denv))) == false) not)                         	ifTrue: [ [                           ((schemeEnv globalRef:  #'xlateX2DglobalX2Dref')                                value: ( op) value: ( port)).                           ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                value: (((schemeEnv globalRef:  #'X2B')                                value: ( 4) value: ( offset))) value: ( port)).                          ] value]                         	ifFalse: [((schemeEnv globalRef:  #'display')                              value: (((schemeEnv globalRef:  #'schemeX2DX3EsmalltalkX2Didentifier')                              value: ( op))) value: ( port))]]                     	ifFalse: [ [                       ((schemeEnv globalRef:  #'display')                            value: ( '(') value: ( port)).                       ((schemeEnv globalRef:  #'xlate')                                                   valueWithArguments: {  op.  ctX2Denv.  offset.  port.}).                       ((schemeEnv globalRef:  #'display')                            value: ( ')') value: ( port)).                      ] value].                                  [ :operands |                    [ :numX2Doperands |                       (((((schemeEnv globalRef:  #'zeroX3F')                              value: ( numX2Doperands))) == false) not)                         	ifTrue: [((schemeEnv globalRef:  #'display')                              value: ( ' value)') value: ( port))]                         	ifFalse: [ (((((schemeEnv globalRef:  #'X3D')                                  value: ( 1) value: ( numX2Doperands))) == false) not)                             	ifTrue: [ [                               ((schemeEnv globalRef:  #'display')                                    value: ( ' value: (') value: ( port)).                               ((schemeEnv globalRef:  #'xlate')                                                                   valueWithArguments: { ((schemeEnv globalRef:  #'car')                                    value: ( operands)).  ctX2Denv.  offset.  port.}).                               ((schemeEnv globalRef:  #'display')                                    value: ( '))') value: ( port)).                              ] value]                             	ifFalse: [ (((((schemeEnv globalRef:  #'X3D')                                      value: ( 2) value: ( numX2Doperands))) == false) not)                                 	ifTrue: [ [                                   ((schemeEnv globalRef:  #'display')                                        value: ( ' value: (') value: ( port)).                                   ((schemeEnv globalRef:  #'xlate')                                                                           valueWithArguments: { ((schemeEnv globalRef:  #'car')                                        value: ( operands)).  ctX2Denv.  offset.  port.}).                                   ((schemeEnv globalRef:  #'display')                                        value: ( ') value: (') value: ( port)).                                   ((schemeEnv globalRef:  #'xlate')                                                                           valueWithArguments: { ((schemeEnv globalRef:  #'cadr')                                        value: ( operands)).  ctX2Denv.  offset.  port.}).                                   ((schemeEnv globalRef:  #'display')                                        value: ( '))') value: ( port)).                                  ] value]                                 	ifFalse: [ (((((schemeEnv globalRef:  #'X3D')                                          value: ( 3) value: ( numX2Doperands))) == false) not)                                     	ifTrue: [ [                                       ((schemeEnv globalRef:  #'display')                                            value: ( ' value: (') value: ( port)).                                       ((schemeEnv globalRef:  #'xlate')                                                                                   valueWithArguments: { ((schemeEnv globalRef:  #'car')                                            value: ( operands)).  ctX2Denv.  offset.  port.}).                                       ((schemeEnv globalRef:  #'display')                                            value: ( ') value: (') value: ( port)).                                       ((schemeEnv globalRef:  #'xlate')                                                                                   valueWithArguments: { ((schemeEnv globalRef:  #'cadr')                                            value: ( operands)).  ctX2Denv.  offset.  port.}).                                       ((schemeEnv globalRef:  #'display')                                            value: ( ') value: (') value: ( port)).                                       ((schemeEnv globalRef:  #'xlate')                                                                                   valueWithArguments: { ((schemeEnv globalRef:  #'caddr')                                            value: ( operands)).  ctX2Denv.  offset.  port.}).                                       ((schemeEnv globalRef:  #'display')                                            value: ( '))') value: ( port)).                                      ] value]                                     	ifFalse: [ [                                       ((schemeEnv globalRef:  #'endlineX2DandX2Dspaces')                                            value: ( offset) value: ( port)).                                       ((schemeEnv globalRef:  #'display')                                            value: ( ' valueWithArguments: {') value: ( port)).                                       ((schemeEnv globalRef:  #'forX2Deach')                                            value: (                                       [ :whatever |  [                                             ((schemeEnv globalRef:  #'display')                                                  value: ( $ ) value: ( port)).                                             ((schemeEnv globalRef:  #'xlate')                                                                                               valueWithArguments: {  whatever.  ctX2Denv.  offset.  port.}).                                             ((schemeEnv globalRef:  #'display')                                                  value: ( $.) value: ( port)).                                            ] value]) value: ( operands)).                                       ((schemeEnv globalRef:  #'display')                                            value: ( '})') value: ( port)).                                      ] value]]]]                   ] value: (((schemeEnv globalRef:  #'length')                        value: ( operands)))                 ] value: (((schemeEnv globalRef:  #'operands')                      value: ( exp))).                ] value.           ] valueWithArguments: {(((schemeEnv globalRef:  #'operator')                    value: ( exp))). }] ) . schemeEnv define:  #'xlateX2DX3EstsX2Dvalues'    "xlate->sts-values"  as: (        [ :exp :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( ' {') value: ( port)).             ((schemeEnv globalRef:  #'forX2Deach')                  value: (             [ :whatever |  [                   ((schemeEnv globalRef:  #'display')                        value: ( $ ) value: ( port)).                   ((schemeEnv globalRef:  #'xlate')                                           valueWithArguments: {  whatever.  ctX2Denv.  offset.  port.}).                   ((schemeEnv globalRef:  #'display')                        value: ( $.) value: ( port)).                  ] value]) value: (((schemeEnv globalRef:  #'cdr')                  value: ( exp)))).             ((schemeEnv globalRef:  #'display')                  value: ( '}') value: ( port)).            ] value] ) . schemeEnv define:  #'xlateX2Dmagically'    "xlate-magically"  as: (        [ :exp :ctX2Denv :offset :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( ' (') value: ( port)).                           [ | loop |                  loop :=                  [ :stuff :oddX3F |                   (((((schemeEnv globalRef:  #'nullX3F')                          value: ( stuff))) == false) not)                     	ifTrue: [ (schemeEnv globalRef:  #'unspecified')                         ]                     	ifFalse: [ [                        ((( oddX3F) == false) not)                           	ifTrue: [((schemeEnv globalRef:  #'xlate')                                                           valueWithArguments: { ((schemeEnv globalRef:  #'car')                                value: ( stuff)).  ctX2Denv.  offset.  port.})]                           	ifFalse: [ [                             ((schemeEnv globalRef:  #'display')                                  value: ( $ ) value: ( port)).                             ((schemeEnv globalRef:  #'display')                                  value: (((schemeEnv globalRef:  #'car')                                  value: ( stuff))) value: ( port)).                            ] value].                       (loop value: (((schemeEnv globalRef:  #'cdr')                            value: ( stuff))) value: (((schemeEnv globalRef:  #'not')                            value: ( oddX3F)))).                      ] value]             ].             loop valueWithArguments: {                 ((schemeEnv globalRef:  #'cdr')                      value: ( exp)).                   true. } ] value.             ((schemeEnv globalRef:  #'display')                  value: ( ')') value: ( port)).            ] value] ) . schemeEnv define:  #'emitX2DssX2Dref'    "emit-ss-ref"  as: (        [ :exp :port |  [             ((schemeEnv globalRef:  #'display')                  value: ( $ ) value: ( port)).             ((schemeEnv globalRef:  #'display')                  value: (((schemeEnv globalRef:  #'cadr')                  value: ( exp))) value: ( port)).            ] value] ) .! !