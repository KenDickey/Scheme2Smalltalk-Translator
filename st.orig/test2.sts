'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test2.scm'!!SmallScheme methodsFor: 'user'!test2    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 2) value: ( 3)). schemeEnv define:  #'x'  as: (  00 ) .((schemeEnv globalRef:  #'test')      value: ( 6) value: ( #'begin') value: ( [   (schemeEnv setX21:  #'x' as:  5).   ((schemeEnv globalRef:  #'X2B')        value: ( (schemeEnv globalRef:  #'x')       ) value: ( 1)).  ] value)).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 2) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( { 00.  1.  2.  3.  4. }) value: ( #'do') value: (  [ | doX2Dloop107 |      doX2Dloop107 :=      [ :vec :i |       (((((schemeEnv globalRef:  #'X3D')              value: ( i) value: ( 5))) == false) not)         	ifTrue: [ vec]         	ifFalse: [ [           ((schemeEnv globalRef:  #'vectorX2DsetX21')                value: ( vec) value: ( i) value: ( i)).           (doX2Dloop107 value: ( vec) value: (((schemeEnv globalRef:  #'X2B')                value: ( i) value: ( 1)))).          ] value] ]. doX2Dloop107 valueWithArguments: {     ((schemeEnv globalRef:  #'makeX2Dvector')          value: ( 5)).       00. } ] value)).((schemeEnv globalRef:  #'test')      value: ( 25) value: ( #'do') value: ( [ :x |            [ | doX2Dloop108 |          doX2Dloop108 :=          [ :x :sum |           (((((schemeEnv globalRef:  #'nullX3F')                  value: ( x))) == false) not)             	ifTrue: [ sum]             	ifFalse: [(doX2Dloop108 value: (((schemeEnv globalRef:  #'cdr')                  value: ( x))) value: (((schemeEnv globalRef:  #'X2B')                  value: ( sum) value: (((schemeEnv globalRef:  #'car')                  value: ( x))))))]     ].     doX2Dloop108 valueWithArguments: {          x.           00. } ] value. ] valueWithArguments: {( ({ 1.  3.  5.  7.  9. } asRest)). })).((schemeEnv globalRef:  #'test')      value: ( 1) value: ( #'let') value: (  [ | foo |      foo :=      [      1 ]. foo valueWithArguments: {} ] value)).((schemeEnv globalRef:  #'test')      value: ( ({ ({ 6.  1.  3. } asRest).  ({ -5.  -2. } asRest). } asRest)) value: ( #'let') value: (  [ | loop |      loop :=      [ :numbers :nonneg :neg |       (((((schemeEnv globalRef:  #'nullX3F')              value: ( numbers))) == false) not)         	ifTrue: [((schemeEnv globalRef:  #'list')              value: ( nonneg) value: ( neg))]         	ifFalse: [ (((((schemeEnv globalRef:  #'negativeX3F')                  value: (((schemeEnv globalRef:  #'car')                  value: ( numbers))))) == false) not)             	ifTrue: [(loop value: (((schemeEnv globalRef:  #'cdr')                  value: ( numbers))) value: ( nonneg) value: (((schemeEnv globalRef:  #'cons')                  value: (((schemeEnv globalRef:  #'car')                  value: ( numbers))) value: ( neg))))]             	ifFalse: [(loop value: (((schemeEnv globalRef:  #'cdr')                  value: ( numbers))) value: (((schemeEnv globalRef:  #'cons')                  value: (((schemeEnv globalRef:  #'car')                  value: ( numbers))) value: ( nonneg))) value: ( neg))]] ]. loop valueWithArguments: {      ({ 3.  -2.  1.  6.  -5. } asRest).       nil.       nil. } ] value)).((schemeEnv globalRef:  #'section')      value: ( 4) value: ( 2) value: ( 6)).((schemeEnv globalRef:  #'test')      value: ( ({ #'list'.  3.  4. } asRest)) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')      value: ( #'list') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'X2B')      value: ( 1) value: ( 2))) value: (((schemeEnv globalRef:  #'cons')      value: ( 4) value: ( nil)))))))).((schemeEnv globalRef:  #'test')      value: ( ({ #'list'.  #'a'.  ({ #'quote'.  #'a'. } asRest). } asRest)) value: ( #'quasiquote') value: ( [ :name |      ((schemeEnv globalRef:  #'cons')          value: ( #'list') value: (((schemeEnv globalRef:  #'cons')          value: ( name) value: (((schemeEnv globalRef:  #'cons')          value: (((schemeEnv globalRef:  #'cons')          value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')          value: ( name) value: ( nil))))) value: ( nil)))))). ] valueWithArguments: {( #'a'). })).((schemeEnv globalRef:  #'test')      value: ( ({ #'a'.  3.  4.  5.  6.  #'b'. } asRest)) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')      value: ( #'a') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'X2B')      value: ( 1) value: ( 2))) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')      value: (((schemeEnv globalRef:  #'map')      value: ( (schemeEnv globalRef:  #'abs')     ) value: ( ({ 4.  -5.  6. } asRest)))) value: (((schemeEnv globalRef:  #'cons')      value: ( #'b') value: ( nil)))))))))).((schemeEnv globalRef:  #'test')      value: ( (Pair car:  ({ #'foo'.  7. } asRest) cdr:  #'cons')) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'foo') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'X2D')      value: ( 10) value: ( 3))) value: ( nil))))) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')      value: (((schemeEnv globalRef:  #'cdr')      value: ( ({ #'c'. } asRest)))) value: (((schemeEnv globalRef:  #'car')      value: ( ({ #'cons'. } asRest))))))))). schemeEnv define:  #'sqt'  as: (        [ :x |             [ | doX2Dloop109 |                doX2Dloop109 :=                [ :i |                 (((((schemeEnv globalRef:  #'X3E')                        value: (((schemeEnv globalRef:  #'X2A')                        value: ( i) value: ( i))) value: ( x))) == false) not)                   	ifTrue: [((schemeEnv globalRef:  #'X2D')                        value: ( i) value: ( 1))]                   	ifFalse: [(doX2Dloop109 value: (((schemeEnv globalRef:  #'X2B')                        value: ( i) value: ( 1))))]           ].           doX2Dloop109 valueWithArguments: {                00. } ] value] ) .((schemeEnv globalRef:  #'test')      value: ( { 10.  5.  2.  4.  3.  8. }) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'listX2DX3Evector')      value: (((schemeEnv globalRef:  #'cons')      value: ( 10) value: (((schemeEnv globalRef:  #'cons')      value: ( 5) value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'sqt')      value: ( 4))) value: (((schemeEnv globalRef:  #'setX2DlastX2Dpair')      value: (((schemeEnv globalRef:  #'map')      value: ( (schemeEnv globalRef:  #'sqt')     ) value: ( ({ 16.  9. } asRest)))) value: (((schemeEnv globalRef:  #'cons')      value: ( 8) value: ( nil)))))))))))))).((schemeEnv globalRef:  #'test')      value: ( 5) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'X2B')      value: ( 2) value: ( 3)))).((schemeEnv globalRef:  #'test')      value: ( ({ #'a'.  ({ #'quasiquote'.  ({ #'b'.  ({ #'unquote'.  ({ #'X2B'.  1.  2. } asRest). } asRest).  ({ #'unquote'.  ({ #'foo'.  4.  #'d'. } asRest). } asRest).  #'e'. } asRest). } asRest).  #'f'. } asRest)) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')      value: ( #'a') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'b') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'unquote') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'X2B') value: (((schemeEnv globalRef:  #'cons')      value: ( 1) value: (((schemeEnv globalRef:  #'cons')      value: ( 2) value: ( nil))))))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'unquote') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'cons')      value: ( #'foo') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'X2B')      value: ( 1) value: ( 3))) value: (((schemeEnv globalRef:  #'cons')      value: ( #'d') value: ( nil))))))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')      value: ( #'e') value: ( nil))))))))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')      value: ( #'f') value: ( nil)))))))).((schemeEnv globalRef:  #'test')      value: ( ({ #'a'.  ({ #'quasiquote'.  ({ #'b'.  ({ #'unquote'.  #'x'. } asRest).  ({ #'unquote'.  ({ #'quote'.  #'y'. } asRest). } asRest).  #'d'. } asRest). } asRest).  #'e'. } asRest)) value: ( #'quasiquote') value: ( [ :name1 :name2 |      ((schemeEnv globalRef:  #'cons')          value: ( #'a') value: (((schemeEnv globalRef:  #'cons')          value: (((schemeEnv globalRef:  #'cons')          value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')          value: (((schemeEnv globalRef:  #'cons')          value: ( #'b') value: (((schemeEnv globalRef:  #'cons')          value: (((schemeEnv globalRef:  #'cons')          value: ( #'unquote') value: (((schemeEnv globalRef:  #'cons')          value: ( name1) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')          value: (((schemeEnv globalRef:  #'cons')          value: ( #'unquote') value: (((schemeEnv globalRef:  #'cons')          value: (((schemeEnv globalRef:  #'cons')          value: ( #'quote') value: (((schemeEnv globalRef:  #'cons')          value: ( name2) value: ( nil))))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')          value: ( #'d') value: ( nil))))))))) value: ( nil))))) value: (((schemeEnv globalRef:  #'cons')          value: ( #'e') value: ( nil)))))). ] valueWithArguments: {( #'x'). ( #'y'). })).((schemeEnv globalRef:  #'test')      value: ( ({ #'list'.  3.  4. } asRest)) value: ( #'quasiquote') value: (((schemeEnv globalRef:  #'cons')      value: ( #'list') value: (((schemeEnv globalRef:  #'cons')      value: (((schemeEnv globalRef:  #'X2B')      value: ( 1) value: ( 2))) value: (((schemeEnv globalRef:  #'cons')      value: ( 4) value: ( nil)))))))).((schemeEnv globalRef:  #'test')      value: ( ({ #'quasiquote'.  ({ #'list'.  ({ #'unquote'.  ({ #'X2B'.  1.  2. } asRest). } asRest).  4. } asRest). } asRest)) value: ( #'quasiquote') value: ( ({ #'quasiquote'.  ({ #'list'.  ({ #'unquote'.  ({ #'X2B'.  1.  2. } asRest). } asRest).  4. } asRest). } asRest))).((schemeEnv globalRef:  #'section')      value: ( 5) value: ( 2) value: ( 1)). schemeEnv define:  #'add3'  as: (        [ :x | ((schemeEnv globalRef:  #'X2B')                value: ( x) value: ( 3))] ) .((schemeEnv globalRef:  #'test')      value: ( 6) value: ( #'define') value: (((schemeEnv globalRef:  #'add3')      value: ( 3)))). schemeEnv define:  #'first'  as: (  (schemeEnv globalRef:  #'car')            ) .((schemeEnv globalRef:  #'test')      value: ( 1) value: ( #'define') value: (((schemeEnv globalRef:  #'first')      value: ( ({ 1.  2. } asRest))))).((schemeEnv globalRef:  #'section')      value: ( 5) value: ( 2) value: ( 2)).((schemeEnv globalRef:  #'test')      value: ( 45) value: ( #'define') value: ( [ :x |            [ | foo bar |             foo := (       [ :y | (bar value: ( x) value: ( y))]).        bar := (       [ :a :b | ((schemeEnv globalRef:  #'X2B')                value: (((schemeEnv globalRef:  #'X2A')                value: ( a) value: ( b))) value: ( a))]).         (foo value: (((schemeEnv globalRef:  #'X2B')              value: ( x) value: ( 3)))).     ] value. ] valueWithArguments: {( 5). })). schemeEnv define:  #'x'  as: (  34 ) . schemeEnv define:  #'foo'  as: (        [            [ | x |                         x := ( 5).                x.           ] value] ) .((schemeEnv globalRef:  #'test')      value: ( 5) value: ( (schemeEnv globalRef:  #'foo')     )).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'define') value: ( (schemeEnv globalRef:  #'x')     )). schemeEnv define:  #'foo'  as: (        [            [ | x |                         x := ( 5).                x.           ] value] ) .((schemeEnv globalRef:  #'test')      value: ( 5) value: ( (schemeEnv globalRef:  #'foo')     )).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'define') value: ( (schemeEnv globalRef:  #'x')     )). schemeEnv define:  #'foo'  as: (        [ :x |  [             ((             [                  [ | x |                                     x := ( 5).                      x.                 ] value]) value).              x.            ] value] ) .((schemeEnv globalRef:  #'test')      value: ( 88) value: ( (schemeEnv globalRef:  #'foo')     ) value: ( 88)).((schemeEnv globalRef:  #'test')      value: ( 4) value: ( (schemeEnv globalRef:  #'foo')     ) value: ( 4)).((schemeEnv globalRef:  #'test')      value: ( 34) value: ( #'define') value: ( (schemeEnv globalRef:  #'x')     )).((schemeEnv globalRef:  #'reportX2Derrs')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !