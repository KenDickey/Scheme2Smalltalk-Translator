'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/test7.scm'!!SmallScheme methodsFor: 'user'!test7    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'curX2Dsection'    "cur-section"  as: (  nil ) . schemeEnv define:  #'errs'  as: (  nil ) . schemeEnv define:  #'section'  as: (        [ :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'display')                  value: ( 'SECTION')).             ((schemeEnv globalRef:  #'write')                  value: ( args)).             ((schemeEnv globalRef:  #'newline')                  value).             (schemeEnv setX21:  #'curX2Dsection' as:  args).              true.            ] value] withLastArgRest  ) . schemeEnv define:  #'recordX2Derror'    "record-error"  as: (        [ :e | (schemeEnv setX21:  #'errs' as: ((schemeEnv globalRef:  #'cons')                value: (((schemeEnv globalRef:  #'list')                value: ( (schemeEnv globalRef:  #'curX2Dsection')               ) value: ( e))) value: ( (schemeEnv globalRef:  #'errs')               )))] ) . schemeEnv define:  #'test'  as: (        [ :expect :fun :args |            args := args asRest.            [             ((schemeEnv globalRef:  #'write')                  value: (((schemeEnv globalRef:  #'cons')                  value: ( fun) value: ( args)))).             ((schemeEnv globalRef:  #'display')                  value: ( '  ==> ')).             ((             [ :res |  [                   ((schemeEnv globalRef:  #'write')                        value: ( res)).                   ((schemeEnv globalRef:  #'newline')                        value).                    (((((schemeEnv globalRef:  #'not')                            value: (((schemeEnv globalRef:  #'equalX3F')                            value: ( expect) value: ( res))))) == false) not)                       	ifTrue: [ [                         ((schemeEnv globalRef:  #'recordX2Derror')                              value: (((schemeEnv globalRef:  #'list')                              value: ( res) value: ( expect) value: (((schemeEnv globalRef:  #'cons')                              value: ( fun) value: ( args)))))).                         ((schemeEnv globalRef:  #'display')                              value: ( ' BUT EXPECTED ')).                         ((schemeEnv globalRef:  #'write')                              value: ( expect)).                         ((schemeEnv globalRef:  #'newline')                              value).                          false.                        ] value]                       	ifFalse: [ true].                  ] value]) value: ( (((((schemeEnv globalRef:  #'procedureX3F')                      value: ( fun))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'apply')                      value: ( fun) value: ( args))]                 	ifFalse: [((schemeEnv globalRef:  #'car')                      value: ( args))])).            ] value] withLastArgRest  ) . schemeEnv define:  #'reportX2Derrs'    "report-errs"  as: (        [ [             ((schemeEnv globalRef:  #'newline')                  value).              (((((schemeEnv globalRef:  #'nullX3F')                      value: ( (schemeEnv globalRef:  #'errs')                     ))) == false) not)                 	ifTrue: [((schemeEnv globalRef:  #'display')                      value: ( 'Passed all tests'))]                 	ifFalse: [ [                   ((schemeEnv globalRef:  #'display')                        value: ( 'errors were:')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'display')                        value: ( '(SECTION (got expected (call)))')).                   ((schemeEnv globalRef:  #'newline')                        value).                   ((schemeEnv globalRef:  #'forX2Deach')                        value: (                   [ :l |  [                         ((schemeEnv globalRef:  #'write')                              value: ( l)).                         ((schemeEnv globalRef:  #'newline')                              value).                        ] value]) value: ( (schemeEnv globalRef:  #'errs')                       )).                  ] value].             ((schemeEnv globalRef:  #'newline')                  value).            ] value] ) .((schemeEnv globalRef:  #'section')      value: ( 6) value: ( 7)).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'stringX3F')     ) value: ( 'The word "recursion\" has many meanings.')).((schemeEnv globalRef:  #'test')      value: ( true) value: ( (schemeEnv globalRef:  #'stringX3F')     ) value: ( '')). schemeEnv define:  #'f'  as: ( ((schemeEnv globalRef:  #'makeX2Dstring')            value: ( 3) value: ( $*)) ) .((schemeEnv globalRef:  #'test')      value: ( '?**') value: ( #'stringX2DsetX21') value: ( [   ((schemeEnv globalRef:  #'stringX2DsetX21')        value: ( (schemeEnv globalRef:  #'f')       ) value: ( 00) value: ( $?)).    (schemeEnv globalRef:  #'f')       .  ] value)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'abc'.  (schemeEnv globalRef:  #'string')     .  $a.  $b.  $c.}).((schemeEnv globalRef:  #'test')      value: ( '') value: ( (schemeEnv globalRef:  #'string')     )).((schemeEnv globalRef:  #'test')      value: ( 3) value: ( (schemeEnv globalRef:  #'stringX2Dlength')     ) value: ( 'abc')).((schemeEnv globalRef:  #'test')       valueWithArguments: {  $a.  (schemeEnv globalRef:  #'stringX2Dref')     .  'abc'.  00.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  $c.  (schemeEnv globalRef:  #'stringX2Dref')     .  'abc'.  2.}).((schemeEnv globalRef:  #'test')      value: ( 00) value: ( (schemeEnv globalRef:  #'stringX2Dlength')     ) value: ( '')).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ''.  (schemeEnv globalRef:  #'substring')     .  'ab'.  00.  00.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ''.  (schemeEnv globalRef:  #'substring')     .  'ab'.  1.  1.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  ''.  (schemeEnv globalRef:  #'substring')     .  'ab'.  2.  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'a'.  (schemeEnv globalRef:  #'substring')     .  'ab'.  00.  1.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'b'.  (schemeEnv globalRef:  #'substring')     .  'ab'.  1.  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'ab'.  (schemeEnv globalRef:  #'substring')     .  'ab'.  00.  2.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'foobar'.  (schemeEnv globalRef:  #'stringX2Dappend')     .  'foo'.  'bar'.}).((schemeEnv globalRef:  #'test')      value: ( 'foo') value: ( (schemeEnv globalRef:  #'stringX2Dappend')     ) value: ( 'foo')).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'foo'.  (schemeEnv globalRef:  #'stringX2Dappend')     .  'foo'.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  'foo'.  (schemeEnv globalRef:  #'stringX2Dappend')     .  ''.  'foo'.}).((schemeEnv globalRef:  #'test')      value: ( '') value: ( (schemeEnv globalRef:  #'stringX2Dappend')     )).((schemeEnv globalRef:  #'test')      value: ( '') value: ( (schemeEnv globalRef:  #'makeX2Dstring')     ) value: ( 00)).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3DX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3CX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3EX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3CX3DX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3EX3DX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  ''.  ''.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3DX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3DX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3DX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3DX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3CX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3CX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3CX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3CX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3EX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3EX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3EX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3EX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3CX3DX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3CX3DX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3CX3DX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3CX3DX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3EX3DX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX3EX3DX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3EX3DX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX3EX3DX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  'a'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  'A'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3DX3F')     .  'A'.  'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  'a'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  'A'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3CX3F')     .  'A'.  'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  'a'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  'A'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3F')     .  'A'.  'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  'a'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  'A'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3CX3DX3F')     .  'A'.  'a'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  'A'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  'a'.  'B'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  'A'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  false.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  'a'.  'b'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  '9'.  '0'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  'A'.  'A'.}).((schemeEnv globalRef:  #'test')       valueWithArguments: {  true.  (schemeEnv globalRef:  #'stringX2DciX3EX3DX3F')     .  'A'.  'a'.}).((schemeEnv globalRef:  #'reportX2Derrs')      value).((schemeEnv globalRef:  #'newline')      value). 'last item in file'.! !