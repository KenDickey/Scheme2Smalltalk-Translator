'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/trace.scm'!!SmallScheme methodsFor: 'user'!trace    "Capture self as env for use by nested block code"    | schemeEnv | schemeEnv := self.  schemeEnv define:  #'X2AtracedX2A'    "*traced*"  as: (  nil ) . schemeEnv define:  #'trace'  as: (        [ :fname |  [ :fval |                 [                  [ :result88 |                       ((( result88) == false) not)                         	ifTrue: [((                         [ :bucket | ((schemeEnv globalRef:  #'setX2DcdrX21')                                  value: ( bucket) value: ( fval))]) value: ( result88))]                         	ifFalse: [(schemeEnv setX21:  #'X2AtracedX2A' as: ((schemeEnv globalRef:  #'cons')                              value: (((schemeEnv globalRef:  #'cons')                              value: ( fname) value: ( fval))) value: ( (schemeEnv globalRef:  #'X2AtracedX2A')                             )))].                 ] valueWithArguments: {(((schemeEnv globalRef:  #'assq')                          value: ( fname) value: ( (schemeEnv globalRef:  #'X2AtracedX2A')                         ))). }.                  [ :tracedX2Dfun |                       [                        ( self defineOrSet: fname as: tracedX2Dfun).                       ((schemeEnv globalRef:  #'map')                            value: ( (schemeEnv globalRef:  #'car')                           ) value: ( (schemeEnv globalRef:  #'X2AtracedX2A')                           )).                      ] value.                 ] valueWithArguments: {(                     [ :args |                          args := args asRest.                          [                           ((schemeEnv globalRef:  #'newline')                                value).                           ((schemeEnv globalRef:  #'display')                                value: ( '**entering** ')).                           ((schemeEnv globalRef:  #'write')                                value: ( fname)).                           ((schemeEnv globalRef:  #'display')                                value: ( ' < ')).                           ((schemeEnv globalRef:  #'write')                                value: ( args)).                            [ :result |                                 [                                 ((schemeEnv globalRef:  #'newline')                                      value).                                 ((schemeEnv globalRef:  #'display')                                      value: ( '***leaving** ')).                                 ((schemeEnv globalRef:  #'write')                                      value: ( fname)).                                 ((schemeEnv globalRef:  #'display')                                      value: ( ' > ')).                                 ((schemeEnv globalRef:  #'write')                                      value: ( result)).                                 ((schemeEnv globalRef:  #'newline')                                      value).                                  result.                                ] value.                           ] valueWithArguments: {(((schemeEnv globalRef:  #'apply')                                    value: ( fval) value: ( args))). }.                          ] value] withLastArgRest ). }.                ] value.           ] valueWithArguments: {( ( self globalRef: fname)). }] ) . schemeEnv define:  #'untrace'  as: (        [ :fname |  [              [ :result89 |                   ((( result89) == false) not)                     	ifTrue: [((                     [ :bucket | (schemeEnv setX21: fname as: ((schemeEnv globalRef:  #'cdr')                              value: ( bucket)))]) value: ( result89))]                     	ifFalse: [ 'Unspecified'].             ] valueWithArguments: {(((schemeEnv globalRef:  #'assq')                      value: ( fname) value: ( (schemeEnv globalRef:  #'X2AtracedX2A')                     ))). }.             ((schemeEnv globalRef:  #'map')                  value: ( (schemeEnv globalRef:  #'car')                 ) value: ( (schemeEnv globalRef:  #'X2AtracedX2A')                 )).            ] value] ) . schemeEnv define:  #'untraceX2Dall'    "untrace-all"  as: (        [((schemeEnv globalRef:  #'map')                value: (           [ :fname | ((schemeEnv globalRef:  #'untrace')                    value: ( fname))]) value: ( (schemeEnv globalRef:  #'X2AtracedX2A')               ))] ) .! !