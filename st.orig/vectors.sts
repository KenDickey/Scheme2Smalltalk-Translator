'# This file is encoded in ASCII# line delimitor is CR.SmallSchemeSmallScheme code for Squeak 3.0Translated from file /usr/local/src/Squeak/ProtoScheme/scm/vectors.scm'!!SmallScheme class methodsFor: 'initialization'!initVectors SmallScheme define:  #'vectorX3F'    "vector?"  as: (        [ :obj |  ( obj isKindOf: Array)] ) . SmallScheme define:  #'makeX2Dvector'    "make-vector"  as: (        [ :k :optionalX2Dobj |            optionalX2Dobj := optionalX2Dobj asRest.            [ :fill |                 ( Array new: k withAll: fill).           ] valueWithArguments: {( (((((SmallScheme globalRef:  #'nullX3F')                        value: ( optionalX2Dobj))) == false) not)                   	ifTrue: [ (SmallScheme globalRef:  #'nil')                       ]                   	ifFalse: [((SmallScheme globalRef:  #'car')                        value: ( optionalX2Dobj))]). }] withLastArgRest  ) . SmallScheme define:  #'vector'  as: (        [ :list |            list := list asRest.           ((SmallScheme globalRef:  #'listX2DX3Evector')                value: ( list))] withLastArgRest  ) . SmallScheme define:  #'vectorX2Dlength'    "vector-length"  as: (        [ :vec |  ( vec size)] ) . SmallScheme define:  #'vectorX2Dref'    "vector-ref"  as: (        [ :vec :k |  ( vec at:((SmallScheme globalRef:  #'X2B')                value: ( 1) value: ( k)))] ) . SmallScheme define:  #'vectorX2DsetX21'    "vector-set!!"  as: (        [ :vec :k :obj |  ( vec at:((SmallScheme globalRef:  #'X2B')                value: ( 1) value: ( k)) put: obj)] ) . SmallScheme define:  #'vectorX2DX3Elist'    "vector->list"  as: (        [ :vec |  ( vec asRest)] ) . SmallScheme define:  #'listX2DX3Evector'    "list->vector"  as: (        [ :list |  ( list asArray)] ) . SmallScheme define:  #'vectorX2DfillX21'    "vector-fill!!"  as: (        [ :vec :obj |             [ | loop |                loop :=                [ :idx |                 (((((SmallScheme globalRef:  #'X3C')                        value: ( idx) value: ( 00))) == false) not)                   	ifTrue: [ vec]                   	ifFalse: [ [                     ((SmallScheme globalRef:  #'vectorX2DsetX21')                          value: ( vec) value: ( idx) value: ( obj)).                     (loop value: (((SmallScheme globalRef:  #'X2D')                          value: ( idx) value: ( 1)))).                    ] value]           ].           loop valueWithArguments: {               ((SmallScheme globalRef:  #'X2D')                    value: (((SmallScheme globalRef:  #'vectorX2Dlength')                    value: ( vec))) value: ( 1)). } ] value] ) .! !